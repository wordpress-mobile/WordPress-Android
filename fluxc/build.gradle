plugins {
    alias(sharedLibs.plugins.android.library)
    alias(sharedLibs.plugins.kotlin.android)
    alias(sharedLibs.plugins.kotlin.android.extensions)
    alias(sharedLibs.plugins.kotlin.kapt)
    alias(sharedLibs.plugins.automattic.publishToS3)
}

android {
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
        consumerProguardFiles 'proguard-rules.pro'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

androidExtensions {
    experimental = true
}

android.buildTypes.all { buildType ->
    // Load gradle properties and add them to BuildConfig
    Properties gradleProperties = new Properties()
    File propertiesFile = file("gradle.properties")
    if (propertiesFile.exists()) {
        gradleProperties.load(new FileInputStream(propertiesFile))
    } else {
        // Load defaults
        gradleProperties.load(new FileInputStream(file("gradle.properties-example")))
    }
    gradleProperties.any { property ->
        if (property.value.equals("true") || property.value.equals("false")) {
            buildType.buildConfigField "boolean", property.key.replace("fluxc.", "").replace(".", "_").toUpperCase(),
                    "Boolean.parseBoolean(\"${property.value}\")"
        } else {
            buildType.buildConfigField "String", property.key.replace("fluxc.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
    }
}

dependencies {
    implementation sharedLibs.androidx.appcompat
    implementation sharedLibs.androidx.recyclerview

    implementation sharedLibs.androidx.exifinterface

    implementation(sharedLibs.wordpress.utils) {
        // Using official volley package
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    // Custom WellSql version
    api sharedLibs.wellsql
    kapt sharedLibs.wellsql.processor

    // FluxC annotations
    api fluxcAnnotationsProjectDependency
    kapt fluxcProcessorProjectDependency

    // External libs
    api sharedLibs.eventbus
    api sharedLibs.squareup.okhttp3
    implementation sharedLibs.squareup.okhttp3.urlconnection
    api sharedLibs.volley
    implementation sharedLibs.google.gson

    implementation sharedLibs.apache.commons.text
    api sharedLibs.androidx.paging.runtime
    implementation sharedLibs.androidx.room.runtime
    kapt sharedLibs.androidx.room.compiler
    implementation sharedLibs.androidx.room.ktx

    // Dagger
    implementation sharedLibs.google.dagger
    kapt sharedLibs.google.dagger.compiler
    compileOnly sharedLibs.glassfish.javax.annotation

    // Coroutines
    implementation sharedLibs.kotlinx.coroutines.core
    implementation sharedLibs.kotlinx.coroutines.android

    // Encrypted Logging
    api "com.goterl:lazysodium-android:5.0.2@aar"
    api "net.java.dev.jna:jna:5.5.0@aar"
}

project.afterEvaluate {
    publishing {
        publications {
            FluxCPublication(MavenPublication) {
                from components.release

                groupId "org.wordpress"
                artifactId "fluxc"
                artifact tasks.named("androidSourcesJar") // This task is added by 'publish-to-s3' plugin
                // version is set by 'publish-to-s3' plugin
            }
        }
   }
}
