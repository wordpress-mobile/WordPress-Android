plugins {
    id "com.android.library"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.android.extensions"
    id "org.jetbrains.kotlin.kapt"
    id "com.automattic.android.publish-to-s3"
}

android {
    useLibrary 'org.apache.http.legacy'

    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 29
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

androidExtensions {
    experimental = true
}

android.buildTypes.all { buildType ->
    // Load gradle properties and add them to BuildConfig
    Properties gradleProperties = new Properties()
    File propertiesFile = file("gradle.properties")
    if (propertiesFile.exists()) {
        gradleProperties.load(new FileInputStream(propertiesFile))
    } else {
        // Load defaults
        gradleProperties.load(new FileInputStream(file("gradle.properties-example")))
    }
    gradleProperties.any { property ->
        if (property.value.equals("true") || property.value.equals("false")) {
            buildType.buildConfigField "boolean", property.key.replace("fluxc.", "").replace(".", "_").toUpperCase(),
                    "Boolean.parseBoolean(\"${property.value}\")"
        } else {
            buildType.buildConfigField "String", property.key.replace("fluxc.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
    }
}

dependencies {
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.recyclerview:recyclerview:1.0.0"

    implementation "androidx.exifinterface:exifinterface:1.0.0"

    // WordPress libs
    implementation('org.wordpress:utils:90-39e7741284f91fb568bd1242cf1ee0661085dda8') {
        // Using official volley package
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    // Custom WellSql version
    api "org.wordpress:wellsql:$wellSqlVersion"
    kapt "org.wordpress:wellsql-processor:$wellSqlVersion"

    // FluxC annotations
    api fluxcAnnotationsProjectDependency
    kapt fluxcProcessorProjectDependency

    // External libs
    api 'org.greenrobot:eventbus:3.2.0'
    api 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.9.0'
    api 'com.android.volley:volley:1.1.1'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'org.apache.commons:commons-text:1.1'
    api "androidx.paging:paging-runtime:2.1.2"
    implementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"

    // Encrypted Logging
    api "com.goterl:lazysodium-android:5.0.2@aar"
    api "net.java.dev.jna:jna:5.5.0@aar"
}

project.afterEvaluate {
    publishing {
        publications {
            FluxCPublication(MavenPublication) {
                from components.release

                groupId "org.wordpress"
                artifactId "fluxc"
                // version is set by 'publish-to-s3' plugin
            }
        }
   }
}

publishToS3Plugin {
    mavenPublishGroupId "org.wordpress"
    mavenPublishArtifactId "fluxc"
}
