default_platform(:android)
fastlane_require 'dotenv'

unless FastlaneCore::Helper.bundler?
  UI.user_error!('Please run fastlane via `bundle exec`')
end

# NOTE: When updating the `promo_config` keys of those locale, ensure it matches the list
# of locales enabled in `.circleci/config.yml` for the `raw-screenshots` job
ALL_LOCALES = [
  # First are the locales which are used for *both* downloading the `strings.xml` files from GlotPress *and* for generating the release notes XML files.
  { glotpress: "ar", android: "ar",    google_play: "ar",     promo_config: {} },
  { glotpress: "de", android: "de",    google_play: "de-DE",  promo_config: {} },
  { glotpress: "en-gb", android: "en-rGB", google_play: "en-US",  promo_config: {} },
  { glotpress: "es", android: "es",    google_play: "es-ES",  promo_config: {} },
  { glotpress: "fr", android: "fr-rCA",    google_play: "fr-CA",  promo_config: false },
  { glotpress: "fr", android: "fr",    google_play: "fr-FR",  promo_config: {} },
  { glotpress: "he", android: "he",    google_play: "iw-IL",  promo_config: {} },
  { glotpress: "id", android: "id",    google_play: "id",     promo_config: {} },
  { glotpress: "it", android: "it",    google_play: "it-IT",  promo_config: {} },
  { glotpress: "ja", android: "ja",    google_play: "ja-JP",  promo_config: {} },
  { glotpress: "ko", android: "ko",    google_play: "ko-KR",  promo_config: {} },
  { glotpress: "nl", android: "nl",    google_play: "nl-NL",  promo_config: {} },
  { glotpress: "pl", android: "pl",    google_play: "pl-PL",  promo_config: {} },
  { glotpress: "pt-br", android: "pt-rBR", google_play: "pt-BR",  promo_config: {} },
  { glotpress: "ru", android: "ru",    google_play: "ru-RU",  promo_config: {} },
  { glotpress: "sr", android: "sr",    google_play: "sr",     promo_config: {} },
  { glotpress: "sv", android: "sv",    google_play: "sv-SE",  promo_config: {} },
  { glotpress: "th", android: "th",    google_play: "th",     promo_config: {} },
  { glotpress: "tr", android: "tr",    google_play: "tr-TR",  promo_config: {} },
  { glotpress: "vi", android: "vi",    google_play: "vi",     promo_config: {} },
  { glotpress: "zh-cn", android: "zh-rCN", google_play: "zh-CN",  promo_config: {} },
  { glotpress: "zh-tw", android: "zh-rTW", google_play: "zh-TW",  promo_config: {} },
  # From this point are locales that are still used for downloading `strings.xml`… but not for release notes – and thus don't need a `google_play` key. See `RELEASE_NOTES_LOCALES` below.
  { glotpress: "az", android: "az", promo_config: false},
  { glotpress: "el", android: "el", promo_config: false},
  { glotpress: "es-mx", android: "es-rMX", promo_config: false},
  { glotpress: "es-cl", android: "es-rCL", promo_config: false},
  { glotpress: "gd", android: "gd", promo_config: false},
  { glotpress: "hi", android: "hi", promo_config: false },
  { glotpress: "hu", android: "hu", promo_config: false},
  { glotpress: "nb", android: "nb", promo_config: false},
  { glotpress: "pl", android: "pl", promo_config: false},
  { glotpress: "th", android: "th", promo_config: false},
  { glotpress: "uz", android: "uz", promo_config: false},
  { glotpress: "zh-tw", android: "zh-rHK", promo_config: false},
  { glotpress: "eu", android: "eu", promo_config: false},
  { glotpress: "ro", android: "ro", promo_config: false},
  { glotpress: "mk", android: "mk", promo_config: false},
  { glotpress: "en-au", android: "en-rAU", promo_config: false},
  { glotpress: "sr", android: "sr", promo_config: false},
  { glotpress: "sk", android: "sk", promo_config: false},
  { glotpress: "cy", android: "cy", promo_config: false},
  { glotpress: "da", android: "da", promo_config: false },
  { glotpress: "bg", android: "bg", promo_config: false },
  { glotpress: "sq", android: "sq", promo_config: false},
  { glotpress: "hr", android: "hr", promo_config: false},
  { glotpress: "cs", android: "cs", promo_config: false},
  { glotpress: "pt-br", android: "pt-rBR", promo_config: false},
  { glotpress: "en-ca", android: "en-rCA", promo_config: false },
  { glotpress: "ms", android: "ms", promo_config: false},
  { glotpress: "es-ve", android: "es-rVE", promo_config: false},
  { glotpress: "gl", android: "gl", promo_config: false},
  { glotpress: "is", android: "is"},
  { glotpress: "es-co", android: "es-rCO", promo_config: false },
  { glotpress: "kmr", android: "kmr", promo_config: false},
].freeze

RELEASE_NOTES_LOCALES = ALL_LOCALES
  .reject { |h| h[:google_play].nil? }
  .map { |h| [h[:glotpress], h[:google_play]] }
JP_RELEASE_NOTES_LOCALES = ALL_LOCALES
  .reject { |h| h[:google_play].nil? }
  .select { |h| %w[ar de-DE es-ES fr-FR iw-IL id it-IT ja-JP ko-KR nl-NL pt-BR ru-RU sv-SE tr-TR zh-CN zh-TW].include?(h[:google_play]) }
  .map { |h| [h[:glotpress], h[:google_play]] }

APP_SPECIFIC_VALUES = {
  wordpress: {
    metadata_dir: 'metadata',
    gp_url: 'https://translate.wordpress.org/projects/apps/android/release-notes/'
  },
  jetpack: {
    metadata_dir: 'jetpack_metadata',
    gp_url: 'https://translate.wordpress.com/projects/jetpack/apps/android/release-notes/'
  }
}.freeze

# Global app vars (TODO: move them to APP_SPECIFIC_VALUES)

WP_PACKAGE_NAME = "org.wordpress.android"
WP_PREFIX = "wpandroid"

JP_PACKAGE_NAME = "com.jetpack.android"
JP_PREFIX = "jpandroid"

UPLOAD_TO_PLAY_STORE_JSON_KEY = File.join(Dir.home, '.configure', 'wordpress-android', 'secrets', 'google-upload-credentials.json')

# Env file paths to load
USER_ENV_FILE_PATH = File.join(Dir.home, '.wpandroid-env.default')

before_all do |lane|
  # Check that the env file exists
  unless is_ci || File.file?(USER_ENV_FILE_PATH)
    UI.user_error!("#{USER_ENV_FILE_PATH} not found: Please copy fastlane/env/user.env-example to #{USER_ENV_FILE_PATH} and fill in the values")
  end

  # Ensure we use the latest version of the toolkit
  check_for_toolkit_updates unless is_ci || ENV['FASTLANE_SKIP_TOOLKIT_UPDATE_CHECK']
end

platform :android do
########################################################################
# Includes
########################################################################
import "./ScreenshotFastfile"

# Environment
########################################################################
Dotenv.load(USER_ENV_FILE_PATH)
ENV[GHHELPER_REPO="wordpress-mobile/WordPress-Android"]
ENV["PROJECT_ROOT_FOLDER"]=File.dirname(File.expand_path(__dir__)) + "/"
REPOSITORY_NAME="WordPress-Android"

########################################################################
# Release Lanes
########################################################################
#####################################################################################
  # code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane code_freeze [update_release_branch_version:<update flag>] [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane code_freeze
  # bundle exec fastlane code_freeze update_release_branch_version:false
  # bundle exec fastlane code_freeze skip_confirm:true
  #####################################################################################
  desc "Creates a new release branch from the current develop"
  lane :code_freeze do | options |
    # TODO: remove 'app' parameter entirely in toolkit. For now just use a dummy value to not break API until toolkit is updated.
    old_version = android_codefreeze_prechecks(options.merge({app: 'wp_jp'}))

    android_bump_version_release(app: 'wp_jp')
    new_version = android_get_app_version(app: 'wp_jp')

    # need to get prs list before version update to frozen tag
    get_prs_list(repository: GHHELPER_REPO, milestone: new_version, report_path:"#{File.expand_path('~')}/wpandroid_prs_list_#{old_version}_#{new_version}.txt")

    extract_release_notes_for_version(
      version: new_version,
      release_notes_file_path: "#{ENV["PROJECT_ROOT_FOLDER"]}RELEASE-NOTES.txt",
      extracted_notes_file_path: release_notes_path('wordpress')
    )
    # Jetpack Release notes are based on WP Release notes
    begin
      # FIXME: Move this logic to release-toolkit?
      FileUtils.cp(release_notes_path('wordpress'), release_notes_path('jetpack'))
      sh('git', 'add', release_notes_path('jetpack'))
      sh('git', 'commit', '-m', "Update draft release notes for Jetpack #{new_version}.")
    end
    cleanup_release_files(files: release_notes_short_paths)

    android_update_release_notes(new_version: new_version) # Adds empty section for next version
    setbranchprotection(repository:GHHELPER_REPO, branch: "release/#{new_version}")
    setfrozentag(repository:GHHELPER_REPO, milestone: new_version)

    localize_binary_deps()
    localize_libs()
    send_strings_for_translation()
    ensure_git_status_clean()

    UI.message("Jetpack release notes were based on the same ones as WordPress. Don't forget to check #{release_notes_path('jetpack')} and amend them as necessary if any item does not apply for Jetpack before sending them to Editorial.")
  end

  #####################################################################################
  # complete_code_freeze
  # -----------------------------------------------------------------------------------
  # This lane executes the initial steps planned on code freeze
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane complete_code_freeze [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane complete_code_freeze
  # bundle exec fastlane complete_code_freeze skip_confirm:true
  #####################################################################################
  desc "Trigger a release build for a given app after code freeze"
  lane :complete_code_freeze do | options |
    # TODO: remove 'app' parameter entirely in toolkit. For now just use a dummy value to not break API until toolkit is updated.
    android_completecodefreeze_prechecks(options.merge({app: 'wp_jp'}))
    new_version = android_get_app_version(app: 'wp_jp')
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # update_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the txt files in the WordPress/metadata/ and
  # WordPress/jetpack_metadata folders and updates the .po files that is then
  # picked by GlotPress for translations.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane update_appstore_strings version:<version>
  #
  # Example:
  # fastlane update_appstore_strings version:10.3
  #####################################################################################
  desc "Updates the PlayStoreStrings.po files for WP + JP"
  lane :update_appstore_strings do |options|
    update_wordpress_appstore_strings(options)
    update_jetpack_appstore_strings(options)
  end

  #####################################################################################
  # update_wordpress_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the txt files in the WordPress/metadata/ folder
  # and updates the .po file that is then picked by GlotPress for translations.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane update_wordpress_appstore_strings version:<version>
  #
  # Example:
  # fastlane update_wordpress_appstore_strings version:10.3
  #####################################################################################
  desc "Updates the PlayStoreStrings.po file for WordPress"
  lane :update_wordpress_appstore_strings do |options|
    metadata_folder = File.join(Dir.pwd, '..', 'WordPress', 'metadata')

    files = {
      release_note: File.join(metadata_folder, 'release_notes.txt'),
      release_note_short: File.join(metadata_folder, 'release_notes_short.txt'),
      play_store_promo: File.join(metadata_folder, 'short_description.txt'),
      play_store_desc: File.join(metadata_folder, 'full_description.txt'),
      play_store_app_title: File.join(metadata_folder, 'title.txt'),
      play_store_screenshot_1: File.join(metadata_folder, 'screenshot_1.txt'),
      play_store_screenshot_2: File.join(metadata_folder, 'screenshot_2.txt'),
      play_store_screenshot_3: File.join(metadata_folder, 'screenshot_3.txt'),
      play_store_screenshot_4: File.join(metadata_folder, 'screenshot_4.txt'),
      play_store_screenshot_5: File.join(metadata_folder, 'screenshot_5.txt'),
      play_store_screenshot_6: File.join(metadata_folder, 'screenshot_6.txt'),
      play_store_screenshot_7: File.join(metadata_folder, 'screenshot_7.txt'),

      enhanced_app_store_screenshot_1: File.join(metadata_folder, 'enhanced_screenshot_1.html'),
      enhanced_app_store_screenshot_2: File.join(metadata_folder, 'enhanced_screenshot_2.html'),
      enhanced_app_store_screenshot_3: File.join(metadata_folder, 'enhanced_screenshot_3.html'),
      enhanced_app_store_screenshot_4: File.join(metadata_folder, 'enhanced_screenshot_4.html'),
      enhanced_app_store_screenshot_5: File.join(metadata_folder, 'enhanced_screenshot_5.html'),
      enhanced_app_store_screenshot_6: File.join(metadata_folder, 'enhanced_screenshot_6.html'),
      enhanced_app_store_screenshot_7: File.join(metadata_folder, 'enhanced_screenshot_7.html'),
    }

    android_update_metadata_source(
      po_file_path: File.join(metadata_folder, 'PlayStoreStrings.po'),
      source_files: files,
      release_version: options[:version]
    )
  end

  #####################################################################################
  # update_jetpack_appstore_strings
  # -----------------------------------------------------------------------------------
  # This lane gets the data from the txt files in the WordPress/jetpack_metadata/ folder
  # and updates the .po file that is then picked by GlotPress for translations.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane update_jetpack_appstore_strings version:<version>
  #
  # Example:
  # fastlane update_jetpack_appstore_strings version:10.3
  #####################################################################################
  desc "Updates the PlayStoreStrings.po file for Jetpack"
  lane :update_jetpack_appstore_strings do |options|
    metadata_folder = File.join(Dir.pwd, '..', 'WordPress', 'jetpack_metadata')

    files = {
      release_note: File.join(metadata_folder, 'release_notes.txt'),
      release_note_short: File.join(metadata_folder, 'release_notes_short.txt'),
      'short-description': File.join(metadata_folder, 'short_description.txt'),
      'app-store-description': File.join(metadata_folder, 'full_description.txt'),
      'app-store-name': File.join(metadata_folder, 'title.txt'),
    }

    android_update_metadata_source(
      po_file_path: metadata_folder = File.join(metadata_folder, 'PlayStoreStrings.po'),
      source_files: files,
      release_version: options[:version]
    )
  end

  #####################################################################################
  # new_beta_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new beta release. It will update the
  # current release branch by default. If you want to update a different branch
  # (i.e. hotfix branch) pass the related version with the 'base_version' param
  # (example: base_version:10.6.1 will work on the 10.6.1 branch)
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_beta_release [skip_confirm:<skip confirm>] [base_version:<version>]
  #
  # Example:
  # bundle exec fastlane new_beta_release
  # bundle exec fastlane new_beta_release skip_confirm:true
  # bundle exec fastlane new_beta_release base_version:10.6.1
  #####################################################################################
  desc "Updates a release branch for a new beta release"
  lane :new_beta_release do |options|
    # TODO: remove 'app' parameter entirely in toolkit. For now just use a dummy value to not break API until toolkit is updated.
    android_betabuild_prechecks(options.merge({app: 'wp_jp'}))
    send_strings_for_translation()
    download_translations()
    android_bump_version_beta(app: 'wp_jp')
    new_version = android_get_app_version(app: 'wp_jp')
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # new_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane updates the release branch for a new hotfix release.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane new_hotfix_release [skip_confirm:<skip confirm>] [version_name:<x.y.z>] [version_code:<nnnn>]
  #
  # Example:
  # bundle exec fastlane new_hotfix_release version_name:10.6.1 version_code:1070
  #####################################################################################
  desc "Prepare a new hotfix branch cut from the previous tag, and bump the version"
  lane :new_hotfix_release do |options|
    hotfix_version = options[:version_name] || UI.input('Version number for the new hotfix?')
    previous_tag = android_hotfix_prechecks(version_name: hotfix_version, skip_confirm: options[:skip_confirm])
    # TODO: remove 'app' parameter entirely in toolkit. For now just use a dummy value to not break API until toolkit is updated.
    android_bump_version_hotfix(previous_version_name: previous_tag, version_name: hotfix_version, version_code: options[:version_code], app: 'wp_jp')
  end

  #####################################################################################
  # finalize_hotfix_release
  # -----------------------------------------------------------------------------------
  # This lane finalizes the hotfix branch.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_hotfix_release
  #
  # Example:
  # bundle exec fastlane finalize_hotfix_release
  #####################################################################################
  desc "Finalizes a hotfix release by triggering a release build"
  lane :finalize_hotfix_release do |options|
    # TODO: remove 'app' parameter entirely in toolkit. For now just use a dummy value to not break API until toolkit is updated.
    new_version = android_get_app_version(app: 'wp_jp')
    trigger_release_build(branch_to_build: "release/#{new_version}")
  end

  #####################################################################################
  # finalize_release
  # -----------------------------------------------------------------------------------
  # This lane finalize a release: updates store metadata and runs the release checks
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane finalize_release [skip_confirm:<skip confirm>]
  #
  # Example:
  # bundle exec fastlane finalize_release
  # bundle exec fastlane finalize_release skip_confirm:true
  #####################################################################################
  desc "Updates store metadata and runs the release checks"
  lane :finalize_release do | options |
    # TODO: remove 'app' parameter entirely in toolkit. For now just use a dummy value to not break API until toolkit is updated.
    UI.user_error!('Please use `finalize_hotfix_release` lane for hotfixes') if android_current_branch_is_hotfix(app: 'wp_jp')

    android_finalize_prechecks(options.merge({app: 'wp_jp'}))
    configure_apply(force: is_ci)

    UI.message('Checking app strings translation status...')
    check_translation_progress(
      glotpress_url: 'https://translate.wordpress.org/projects/apps/android/dev/',
      abort_on_violations: false
    )

    UI.message("Checking WordPress release notes strings translation status...")
    check_translation_progress(
      glotpress_url: APP_SPECIFIC_VALUES[:wordpress][:gp_url],
      abort_on_violations: false
    )

    UI.message("Checking Jetpack release notes strings translation status...")
    check_translation_progress(
      glotpress_url: APP_SPECIFIC_VALUES[:jetpack][:gp_url],
      abort_on_violations: false
    )

    download_translations()

    android_bump_version_final_release(app: 'wp_jp')
    version = android_get_release_version(app: 'wp_jp')
    download_metadata_strings(version: version["name"], build_number: version["code"])

    # Wrap up
    removebranchprotection(repository:GHHELPER_REPO, branch: "release/#{version["name"]}")
    setfrozentag(repository:GHHELPER_REPO, milestone: version["name"], freeze: false)
    create_new_milestone(repository: GHHELPER_REPO)
    close_milestone(repository:GHHELPER_REPO, milestone: version["name"])

    # Trigger release build
    trigger_release_build(branch_to_build: "release/#{version["name"]}")
  end

  #####################################################################################
  # build_and_upload_release
  # -----------------------------------------------------------------------------------
  # This lane builds the final release of the app and uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_release app:<wordpress|jetpack> [skip_confirm:<skip confirm>] [skip_prechecks:<skip prechecks>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_release app:wordpress
  # bundle exec fastlane build_and_upload_release app:wordpress skip_confirm:true
  # bundle exec fastlane build_and_upload_release app:jetpack skip_prechecks:true
  # bundle exec fastlane build_and_upload_release app:wordpress create_release:true
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_and_upload_release do |options|
    # TODO: remove 'app' parameter from this toolkit action. For now since it's not used anymore as JP and WP are being unified, use a dummy value to not break API
    android_build_prechecks(
      skip_confirm: options[:skip_confirm],
      alpha: false,
      beta: false,
      final: true,
      app: 'wp_jp'
    )
    android_build_preflight() unless options[:skip_prechecks]

    # Create the file names
    app = options[:app]
    version = android_get_release_version(app: 'wp_jp')
    build_bundle(version: version, app: app, flavor:"Vanilla", buildType: "Release")

    upload_build_to_play_store(version: version, track: "production", app: app)

    if (options[:create_release])
      create_gh_release(app: app, version: version)
    end
  end

  #####################################################################################
  # build_and_upload_pre_releases
  # -----------------------------------------------------------------------------------
  # This lane builds the app it for both internal and external distribution and uploads them
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_and_upload_pre_releases [skip_confirm:<skip confirm>] [create_release:<Create release on GH> ]
  #
  # Example:
  # bundle exec fastlane build_and_upload_pre_releases
  # bundle exec fastlane build_and_upload_pre_releases skip_confirm:true
  # bundle exec fastlane build_and_upload_beta create_release:true
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_and_upload_pre_releases do |options|
    # TODO: remove 'app' parameter from this toolkit action. For now since it's not used anymore as JP and WP are being unified, use a dummy value to not break API
    android_build_prechecks(
      skip_confirm: options[:skip_confirm],
      alpha: true,
      beta: true,
      final: false,
      app: 'wp_jp'
    )
    android_build_preflight() unless (options[:skip_prechecks])
    build_alpha(skip_prechecks: true, skip_confirm: options[:skip_confirm], upload_to_play_store: true, create_release: options[:create_release], app: options[:app])
    build_beta(skip_prechecks: true, skip_confirm: options[:skip_confirm], upload_to_play_store: true, create_release: options[:create_release], app: options[:app])
  end

  #####################################################################################
  # build_alpha
  # -----------------------------------------------------------------------------------
  # This lane builds the app it for internal testing and optionally uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_alpha app:<wordpress|jetpack> [skip_confirm:<true|false>] [upload_to_play_store:<true|false>] [create_release:<true|false>]
  #
  # Example:
  # bundle exec fastlane build_alpha app:wordpress create_release:true
  # bundle exec fastlane build_alpha app:wordpress skip_confirm:true upload_to_play_store:true
  # bundle exec fastlane build_alpha app:jetpack
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_alpha do |options|
    # TODO: remove 'app' parameter from this toolkit action. For now since it's not used anymore as JP and WP are being unified, use a dummy value to not break API
    android_build_prechecks(skip_confirm: options[:skip_confirm], alpha: true, app: 'wp_jp') unless (options[:skip_prechecks])
    android_build_preflight() unless (options[:skip_prechecks])

    # Create the file names
    app = options[:app]
    version = android_get_alpha_version(app: 'wp_jp')
    build_bundle(version: version, app: app, flavor:"Zalpha", buildType: "Release")

    if (options[:upload_to_play_store]) then
       upload_build_to_play_store(version: version, track: "alpha", app: app)
    end

    if (options[:create_release])
      create_gh_release(app: app, version: version, prerelease: true)
    end
  end

  #####################################################################################
  # build_beta
  # -----------------------------------------------------------------------------------
  # This lane builds the app it for internal testing and optionally uploads it
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_beta app:<wordpress|jetpack> [skip_confirm:<true|false>] [upload_to_play_store:<true|false>] [create_release:<true|false>]
  #
  # Example:
  # bundle exec fastlane build_beta app:wordpress create_release:true
  # bundle exec fastlane build_beta app:wordpress skip_confirm:true upload_to_play_store:true
  # bundle exec fastlane build_beta app:jetpack create_release:true
  #####################################################################################
  desc "Builds and updates for distribution"
  lane :build_beta do |options|
    # TODO: remove 'app' parameter from this toolkit action. For now since it's not used anymore as JP and WP are being unified, use a dummy value to not break API
    android_build_prechecks(skip_confirm: options[:skip_confirm], beta: true, app: 'wp_jp') unless (options[:skip_prechecks])
    android_build_preflight() unless (options[:skip_prechecks])

    # Create the file names
    app = options[:app]
    version = android_get_release_version(app: 'wp_jp')
    build_bundle(version: version, app: app, flavor:"Vanilla", buildType: "Release")

    if (options[:upload_to_play_store]) then
       upload_build_to_play_store(version: version, track: "beta", app: app)
    end

    if (options[:create_release])
      create_gh_release(app: app, version: version, prerelease: true)
    end
  end

  #####################################################################################
  # build_internal
  # -----------------------------------------------------------------------------------
  # This lane builds the app for restricted internal testing, and optionally uploads it to PlayStore's Internal track
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_internal app:<wordpress|jetpack>] [skip_confirm:<true|false>] [upload_to_play_store:<true|false>] [create_release:<true|false>]
  #
  # Example:
  # bundle exec fastlane build_internal app:wordpress
  # bundle exec fastlane build_internal app:wordpress skip_confirm:true upload_to_play_store:true
  # bundle exec fastlane build_internal app:jetpack create_release:true
  #####################################################################################
  desc "Builds and updates for internal testing"
  lane :build_internal do |options|
    # TODO: remove 'app' parameter from this toolkit action. For now since it's not used anymore as JP and WP are being unified, use a dummy value to not break API
    android_build_prechecks(skip_confirm: options[:skip_confirm], app: 'wp_jp') unless (options[:skip_prechecks])
    android_build_preflight() unless (options[:skip_prechecks])

    # Create the file names
    app = options[:app]
    version = android_get_release_version(app: 'wp_jp')
    build_bundle(version: version, app: app, flavor:"Zalpha", buildType: "Debug")

    if (options[:upload_to_play_store]) then
       upload_build_to_play_store(version: version, track: "internal", app: app)
    end

    if (options[:create_release])
      create_gh_release(app: app, version: version, prerelease: true)
    end
  end

  #####################################################################################
  # upload_build_to_play_store
  # -----------------------------------------------------------------------------------
  # This lane uploads the build to Play Store for the given version to the given track
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane upload_build_to_play_store version:<version> track:<track>
  #
  # Example:
  # bundle exec fastlane upload_build_to_play_store version:15.0 track:production
  # bundle exec fastlane upload_build_to_play_store version:alpha-228 track:alpha
  # bundle exec fastlane upload_build_to_play_store version:15.0-rc-1 track:beta
  #####################################################################################
  desc "Upload Build to Play Store"
  lane :upload_build_to_play_store do |options|

    app = options[:app]
    package_name = app.downcase == "jetpack" ? JP_PACKAGE_NAME : WP_PACKAGE_NAME

    version = options[:version]

    if version.nil?
      UI.message("No version available for #{options[:track]} track for #{app}")
      next
    end

    aab_file_path = bundle_file_path(app, version)

    if File.exists? aab_file_path then
      upload_to_play_store(
        package_name: package_name,
        aab: aab_file_path,
        track: options[:track],
        release_status: 'draft',
        skip_upload_metadata: true,
        skip_upload_changelogs: true,
        skip_upload_images: true,
        skip_upload_screenshots: true,
        json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
      )
    else
      UI.error("Unable to find a build artifact at #{aab_file_path}")
    end
  end

  #####################################################################################
  # trigger_release_build
  # -----------------------------------------------------------------------------------
  # This lane triggers a stable release build on CI
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane trigger_release_build branch_to_build:<branch_name>
  #
  #####################################################################################
  lane :trigger_release_build do | options |
    circleci_trigger_job(
      circle_ci_token: ENV["CIRCLE_CI_AUTH_TOKEN"],
      repository: REPOSITORY_NAME,
      branch: options[:branch_to_build],
      job_params: { "release_build" => true }
    )
  end

  #####################################################################################
  # upload_and_replace_screenshots_in_play_store
  # -----------------------------------------------------------------------------------
  # This lane uploads the screenshots in /metadata/android/{locale}/images to Play
  # Store and replaces the existing ones.
  # If a locale doesn't have any screenshots, it'll be skipped.
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane upload_and_replace_screenshots_in_play_store
  #
  # Example:
  # bundle exec fastlane upload_and_replace_screenshots_in_play_store
  #####################################################################################
  desc "Upload Screenshots to Play Store and Replaces the existing ones"
  lane :upload_and_replace_screenshots_in_play_store do | options |
    upload_to_play_store(
      package_name: 'org.wordpress.android',
      skip_upload_apk: true,
      skip_upload_aab: true,
      skip_upload_metadata: true,
      skip_upload_changelogs: true,
      skip_upload_images: true,
      skip_upload_screenshots: false,
      json_key: UPLOAD_TO_PLAY_STORE_JSON_KEY
    )
  end

  #####################################################################################
  # download_metadata_strings
  # -----------------------------------------------------------------------------------
  # This lane downloads the translated metadata (release notes, app store strings, title, etc.)
  # from GlotPress and updates the local files
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane download_metadata_strings build_number:<build_number> version:<version>
  #
  # Example:
  # fastlane download_metadata_strings build_number:573 version:10.3
  #####################################################################################
  desc "Downloads translated metadata from GlotPress"
  lane :download_metadata_strings do |options|
    download_wordpress_metadata_strings(options)
    download_jetpack_metadata_strings(options)
  end

  desc "Downloads WordPress's translated metadata from GlotPress"
  lane :download_wordpress_metadata_strings do |options|
    app_values = APP_SPECIFIC_VALUES[:wordpress]
    values = options[:version].split('.')
    files = {
      "release_note_#{values[0]}#{values[1]}" => {desc: "changelogs/#{options[:build_number]}.txt", max_size: 500, alternate_key:"release_note_short_#{values[0]}#{values[1]}"},
      play_store_promo: {desc:"short_description.txt", max_size: 80},
      play_store_desc: {desc:"full_description.txt", max_size: 0},
      play_store_app_title: {desc:"title.txt", max_size: 50}
    }

    delete_old_changelogs(app: 'wordpress', build: options[:build_number])
    download_path = File.join(Dir.pwd, app_values[:metadata_dir], 'android')
    # The case for the source locale (en-US) is pulled in a hacky way, by having an {en-gb => en-US} mapping as part of the RELEASE_NOTES_LOCALES,
    # which is then treated in a special way by gp_downloadmetadata by specifying a `source_locale: 'en-US'` to process it differently from the rest.
    gp_downloadmetadata(
      project_url: app_values[:gp_url],
      target_files: files,
      locales: RELEASE_NOTES_LOCALES,
      source_locale: "en-US",
      download_path: download_path
    )

    android_create_xml_release_notes(download_path: download_path, build_number: "#{options[:build_number]}", locales: RELEASE_NOTES_LOCALES)
    sh("git add #{download_path} && git commit -m \"Update WordPress metadata translations for #{options[:version]}\" && git push origin HEAD")
  end

  desc "Downloads Jetpack's translated metadata from GlotPress"
  lane :download_jetpack_metadata_strings do |options|
    UI.message("Hey")
    app_values = APP_SPECIFIC_VALUES[:jetpack]
    values = options[:version].split('.')
    files = {
      "release_note_#{values[0]}#{values[1]}" => {desc: "changelogs/#{options[:build_number]}.txt", max_size: 500, alternate_key:"release_note_short_#{values[0]}#{values[1]}"},
      'short-description': {desc:"short_description.txt", max_size: 80},
      'app-store-description': {desc:"full_description.txt", max_size: 0},
      'app-store-name': {desc:"title.txt", max_size: 50}
    }

    delete_old_changelogs(app: 'jetpack', build: options[:build_number])
    download_path = File.join(Dir.pwd, app_values[:metadata_dir], 'android')
    gp_downloadmetadata(
      project_url: app_values[:gp_url],
      target_files: files,
      locales: JP_RELEASE_NOTES_LOCALES,
      download_path: download_path
    )

    # For WordPress, the en-US release notes come from using the source keys (instead of translations) downloaded from GlotPress' en-gb locale (which is unused otherwise).
    # But for Jetpack, we don't have an unused locale like en-gb in the GP release notes project, so copy from source instead as a fallback
    metadata_source_dir = File.join(Dir.pwd, '..', 'WordPress', 'jetpack_metadata')
    FileUtils.cp(File.join(metadata_source_dir, 'release_notes.txt'), File.join(download_path, 'en-US', 'changelogs', "#{options[:build_number]}.txt"))
    FileUtils.cp(
      ['title.txt', 'short_description.txt', 'full_description.txt'].map { |f| File.join(metadata_source_dir, f) },
      File.join(download_path, 'en-US')
    )

    locales_including_enUS = [['en-gb', 'en-US']] + JP_RELEASE_NOTES_LOCALES # first item (GlotPress locale) unused for this action; second param = google_play locale
    android_create_xml_release_notes(download_path: download_path, build_number: "#{options[:build_number]}", locales: locales_including_enUS)
    sh("git add #{download_path} && git commit -m \"Update Jetpack metadata translations for #{options[:version]}\" && git push origin HEAD")
  end

########################################################################
# Dependencies handling lanes
########################################################################
  main_strings_path = "./WordPress/src/main/res/values/strings.xml"
  update_strings_path = "./fastlane/resources/values/"
  libraries_strings_path = [
    {library: "Image Editor", strings_path: "./libs/image-editor/ImageEditor/src/main/res/values/strings.xml", exclusions: []}
  ]

  binary_imported_libraries = [
    {
      name: "Gutenberg Native",
      import_key: "gutenbergMobileVersion",
      repository: "wordpress-mobile/gutenberg-mobile",
      strings_file_path: "bundle/android/strings.xml",
      github_release_prefix: "",
      exclusions: [],
      merge_tool: File.join(ENV["PROJECT_ROOT_FOLDER"], 'tools', 'merge_strings_xml.py')
    },
    {
      name: "Login Library",
      import_key: "wordPressLoginVersion",
      repository: "wordpress-mobile/WordPress-Login-Flow-Android",
      strings_file_path: "WordPressLoginFlow/src/main/res/values/strings.xml",
      github_release_prefix: "",
      exclusions: ["default_web_client_id"]
    },
    {
      name: "Stories Library",
      import_key: "storiesVersion",
      repository: "Automattic/stories-android",
      strings_file_path: "stories/src/main/res/values/strings.xml",
      github_release_prefix: "",
      exclusions: []
    },
  ]

  private_lane :send_strings_for_translation do | options |
    sh("cd .. && mkdir -p #{update_strings_path} && cp #{main_strings_path} #{update_strings_path} && git add #{update_strings_path}strings.xml")
    sh("git diff-index --quiet HEAD || git commit -m \"Send strings to translation.\"")
    sh("git push origin HEAD")
  end

  private_lane :commit_strings do | options |
    if (options[:auto_commit]) then
       sh("cd .. && git add #{main_strings_path}")
       sh("git commit -m 'Update strings for translation'")
       sh("git push origin HEAD")
    else
      UI.important("Your #{main_strings_path} has changed.")
      UI.input("Please, review the changes, commit them and press return to continue.")
    end
  end


  desc "Merge libraries strings files into the main app one"
  lane :localize_libs do | options |
    if (an_localize_libs(app_strings_path: main_strings_path, libs_strings_path: libraries_strings_path)) then
      commit_strings(options)
    end
  end

  desc "Import strings from binary dependencies"
  lane :localize_binary_deps do | options |
    binary_imported_libraries.each do  | lib |
      download_path = android_download_file_by_version(
        library_name: lib[:name],
        import_key: lib[:import_key],
        repository: lib[:repository],
        file_path: lib[:strings_file_path],
        github_release_prefix: lib[:github_release_prefix])

      if download_path.nil?
        error_message = "Can't download strings file for #{lib[:name]}.\r\n"
        error_message += "Strings for this library won't get translated.\r\n"
        error_message += "Do you want to continue anyway?"
        UI.user_error! "Abort." unless UI.confirm(error_message)
      else
        UI.message("Strings.xml file for #{lib[:name]} downloaded to #{download_path}.")
        if lib.key?(:merge_tool)
          sh(lib[:merge_tool], lib[:name], download_path)
        else
          lib_to_merge = [ {
            library: lib[:name],
            strings_path: download_path,
            exclusions: lib[:exclusions]
          }]
          an_localize_libs(app_strings_path: main_strings_path, libs_strings_path: lib_to_merge)
        end
        File.delete(download_path) if File.exist?(download_path)
      end
    end

    is_repo_clean = ("git status --porcelain").empty?
    unless is_repo_clean then
      commit_strings(options)
    end
  end

########################################################################
# Helper Lanes
########################################################################
  desc "Get a list of pull request from `start_tag` to the current state"
  lane :get_pullrequests_list do | options |
    get_prs_list(repository:GHHELPER_REPO, milestone:"#{options[:milestone]}", report_path:"#{File.expand_path('~')}/wpandroid_prs_list.txt")
  end

  #####################################################################################
  # build_bundle
  # -----------------------------------------------------------------------------------
  # This lane builds an app bundle
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane build_bundle [skip_confirm:<skip confirm>]
  #####################################################################################
  desc "Builds an app bundle"
  lane :build_bundle do | options |
    # Create the file names
    version=options[:version]
    app = options[:app]

    if version.nil?
      UI.message("Version specified for #{app} bundle is nil. Skipping ahead")
      next
    end

    prefix = app.downcase == "jetpack" ? JP_PREFIX : WP_PREFIX
    name="#{prefix}-#{version["name"]}.aab"

    aab_file="org.wordpress.android-#{app}-#{options[:flavor]}-#{options[:buildType]}.aab".downcase
    output_dir="WordPress/build/outputs/bundle/"
    build_dir="build/"
    logfile_path="#{build_dir}build.log"

    # Intermediate Variables
    bundle_path = "#{output_dir}#{app}#{options[:flavor].capitalize}#{options[:buildType].capitalize}/#{aab_file}"

    # Build
    Dir.chdir("..") do
      sh("mkdir -p #{build_dir}")

      UI.message("Cleaning branch...")
      sh("echo \"Cleaning branch\" >> #{logfile_path}")
      sh("./gradlew clean >> #{logfile_path} 2>&1")

      sh("mkdir -p #{build_dir}")
      if options[:skip_lint].nil?
        UI.message("Running lint...")
        sh("echo \"Running lint...\" >> #{logfile_path}")
        sh("./gradlew lint#{app}#{options[:flavor]}#{options[:buildType]} >> #{logfile_path} 2>&1") unless is_ci
      else
        UI.message("Skipping lint...")
      end

      UI.message("Building #{version["name"]} / #{version["code"]} - #{aab_file}...")
      sh("echo \"Building #{version["name"]} / #{version["code"]} - #{aab_file}...\" >> #{logfile_path}")
      sh("./gradlew bundle#{app}#{options[:flavor]}#{options[:buildType]} >> #{logfile_path} 2>&1")

      UI.crash!("Unable to find a bundle at #{bundle_path}") unless File.file?(bundle_path)

      sh("cp -v #{bundle_path} #{build_dir}#{name} | tee -a #{logfile_path}")
      UI.message("Bundle ready: #{name}")
      sh("echo \"Bundle ready: #{name}\" >> #{logfile_path}")
    end
    "#{build_dir}#{name}"
  end

  #####################################################################################
  # download_translations
  # -----------------------------------------------------------------------------------
  # This lane downloads the string translations from GlotPress
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane download_translations
  #####################################################################################
  lane :download_translations do
    # For now WordPress and Jetpack use the same GlotPress project and share the same `strings.xml`
    # (the Jetpack-dedicated one, https://translate.wordpress.com/projects/jetpack/apps/android/, is empty anyway for now).
    android_download_translations(
      res_dir: File.join('WordPress', 'src', 'main', 'res'),
      glotpress_url: 'https://translate.wordpress.org/projects/apps/android/dev/',
      locales: ALL_LOCALES,
      lint_task: "lintWordpressVanillaRelease" # TODO: Should we adapt this?
    )
  end

  #####################################################################################
  # create_gh_release
  # -----------------------------------------------------------------------------------
  # This lane creates a GitHub release for the current version
  #   - Attaching the existing .aab files in `build/` as the release assets
  #   - Using the WP & JP release_notes.txt as description
  #   - If `prerelease:<true|false>`` is not provided, the pre-release status will be inferred from the version name
  # -----------------------------------------------------------------------------------
  # Usage:
  # bundle exec fastlane create_gh_release [app:<wordpress|jetpack>] [version:<Hash{name,code}>] [prerelease:<true|false>]
  #
  # Examples:
  # bundle exec fastlane create_gh_release     # Guesses prerelease status based on version name. Includes existing assets for WPAlpha+WPBeta+JPBeta
  # bundle exec fastlane create_gh_release app:wordpress prerelease:true                        # Includes existing assets for WPAlpha+WPBeta
  # bundle exec fastlane create_gh_release version:{name:12.3-rc-4} prerelease:true             # Includes existing assets for WPBeta+JPBeta 12.3-rc-4
  # bundle exec fastlane create_gh_release app:jetpack version:{name:12.3-rc-4} prerelease:true # Includes only existing asset for JPBeta 12.3-rc-4
  #####################################################################################
  lane :create_gh_release do |options|
    apps = options[:app].nil? ? ['wordpress', 'jetpack'] : [options[:app]]
    versions = options[:version].nil? ? [android_get_alpha_version(app: 'wp_jp'), android_get_release_version(app: 'wp_jp')] : [options[:version]]

    release_assets = apps.flat_map do |app|
      versions.flat_map { |vers| bundle_file_path(app, vers) }
    end.select { |f| File.exist?(f) }

    release_title = versions.last['name']
    set_prerelease_flag = options[:prerelease].nil? ? /-rc-|alpha-/.match?(release_title) : options[:prerelease]

    UI.message("Creating release for #{release_title} with the following assets: #{release_assets.inspect}")

    app_titles = { 'wordpress' => 'WordPress', 'jetpack' => 'Jetpack' }
    tmp_file = File.absolute_path('unified-release-notes.txt')
    unified_notes = apps.map do |app|
      notes = File.read(release_notes_path(app))
      "\#\# #{app_titles[app]}\n\n#{notes}"
    end.join("\n\n")
    File.write(tmp_file, unified_notes)

    create_release(
      repository: GHHELPER_REPO,
      version: release_title,
      release_notes_file_path: tmp_file,
      prerelease: set_prerelease_flag,
      release_assets: release_assets.join(',')
    )

    FileUtils.rm(tmp_file)
  end

#####################################################################################
# Private lanes
#####################################################################################

  private_lane :delete_old_changelogs do |options|
    app = options[:app] || 'wordpress'
    app_values = APP_SPECIFIC_VALUES[app.to_sym]
    Dir.glob(File.join(app_values[:metadata_dir], 'android', '*', 'changelogs', '*')).each do |file|
      File.delete(file) if Integer(File.basename(file, ".*")) < Integer(options[:build]) rescue puts "Cannot delete file #{file}"
    end
  end

  private_lane :cleanup_release_files do | options |
    files = options[:files]

    files.each do | f |
      File.open(f, "w") {}
      sh("git add #{f}")
    end

    sh("git diff-index --quiet HEAD || git commit -m \"Clean up release files.\"")
  end

  #####################################################################################
  # Utils
  #####################################################################################
  def release_notes_path(app)
    paths = {
      wordpress: "#{ENV["PROJECT_ROOT_FOLDER"]}WordPress/metadata/release_notes.txt",
      jetpack: "#{ENV["PROJECT_ROOT_FOLDER"]}WordPress/jetpack_metadata/release_notes.txt"
    }
    paths[app.to_sym] || paths[:wordpress]
  end

  def release_notes_short_paths
    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    [
      File.join(project_root, "WordPress", "metadata", 'release_notes_short.txt'),
      File.join(project_root, "WordPress", "jetpack_metadata", 'release_notes_short.txt')
    ]
  end

  def bundle_file_path(app, version)
    prefix = app.downcase == "jetpack" ? JP_PREFIX : WP_PREFIX
    project_root = File.dirname(File.expand_path(File.dirname(__FILE__)))
    File.join(project_root, "build", "#{prefix}-#{version["name"]}.aab")
  end
end
