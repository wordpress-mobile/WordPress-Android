# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
########################################################################
# Sreenshot Lanes
########################################################################
  #####################################################################################
  # screenshots
  # -----------------------------------------------------------------------------------
  # This lane takes screenshots for the WordPress app across the three device types:
  # phone, sevenInch and tenInch. If device serials are not provided these avds will be
  # used: fastlane_screenshots_phone, fastlane_screenshots_seven_inch,
  # fastlane_screenshots_ten_inch
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane screenshots phone_serial:<serial> sevenInch_serial:<serial> tenInch_serial:<serial>
  #
  # Example:
  # fastlane screenshots
  # fastlane screenshots phone_serial:emulator-5444 sevenInch_serial:emulator-5446 tenInch_serial:emulator-5448
  #####################################################################################
  desc "Build and capture screenshots"
  lane :screenshots do |options|
    gradle(task: "assembleVanillaDebug assembleVanillaDebugAndroidTest")
    take_screenshots(options)
  end

  desc "Capture screenshots"
  lane :take_screenshots do |options|

  	rebuild_screenshot_devices

    screenshot_devices = [
      {
        screenshot_type: 'phone',
        device_name: 'Pixel_2_XL_API_28',
        device_serial: options[:phone_serial],
      },
      {
        screenshot_type: 'tenInch',
        device_name: 'Nexus_9_API_28',
        device_serial: options[:tenInch_serial],
      }
    ]

    # By default, clear previous screenshots
    should_clear_previous_screenshots = true

    # Allow creating screenshots for just one device type
    if options[:device] != nil
      screenshot_devices.keep_if { |device|
        device[:screenshot_type].casecmp(options[:device]) == 0
      }

      # Don't clear, because we might just be fixing one device type
      should_clear_previous_screenshots = false
    end

    locales = SUPPORTED_LOCALES
      .select { |hsh| hsh[:promo_config] != false }
      .map { |hsh| hsh[:google_play] }

    puts locales

    # Allow creating screenshots for just one locale
    if options[:locale] != nil
      locales.keep_if { |locale|
        locale.casecmp(options[:locale]) == 0
      }

      # Don't clear, because we might just be fixing one locale
      should_clear_previous_screenshots = false
    end

    screenshot_options = {
      output_directory: "fastlane/metadata/android",
      app_apk_path: "WordPress/build/outputs/apk/vanilla/debug/WordPress-vanilla-debug.apk",
      tests_apk_path: "WordPress/build/outputs/apk/androidTest/vanilla/debug/WordPress-vanilla-debug-androidTest.apk",
      use_tests_in_classes: "org.wordpress.android.ui.screenshots.WPScreenshotTest",
      reinstall_app: false,
      clear_previous_screenshots: should_clear_previous_screenshots,
      locales: locales,
    }

    take_android_emulator_screenshots(devices: screenshot_devices, screenshot_options: screenshot_options)
    fix_obsolete_locales_for_screenshots(locales: [{source_id:'in', target_id:'id'}], output_directory: "metadata/android")
  end

  #####################################################################################
  # download_promo_strings
  # -----------------------------------------------------------------------------------
  # This lane download the translated promo strings from the translation system
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane download_promo_strings 
  #
  # Example:
  # fastlane download_promo_strings
  #####################################################################################
  desc "Downloads translated promo strings from the translation system"
  lane :download_promo_strings do |options| 
    files = {
      "play_store_screenshot_1" => {desc: "play_store_screenshot_2.txt"},
      "play_store_screenshot_2" => {desc: "play_store_screenshot_1.txt"},
      "play_store_screenshot_3" => {desc: "play_store_screenshot_3.txt"},
      "play_store_screenshot_4" => {desc: "play_store_screenshot_5.txt"},
      "play_store_screenshot_5" => {desc: "play_store_screenshot_4.txt"},

      "enhanced_play_store_screenshot-1" => {desc: "play_store_screenshot_1.html"},
      "enhanced_play_store_screenshot-2" => {desc: "play_store_screenshot_2.html"},
      "enhanced_play_store_screenshot-3" => {desc: "play_store_screenshot_3.html"},
      "enhanced_play_store_screenshot-4" => {desc: "play_store_screenshot_4.html"},
      "enhanced_play_store_screenshot-5" => {desc: "play_store_screenshot_5.html"},
      "enhanced_play_store_screenshot-6" => {desc: "play_store_screenshot_6.html"},
    }

    locales = SUPPORTED_LOCALES
      .select { |hsh| hsh[:promo_config] != false }
      .map {| hsh | [ hsh[:glotpress], hsh[:google_play] ]}

    gp_downloadmetadata(project_url: "https://translate.wordpress.org/projects/apps/android/release-notes/", 
      target_files: files, 
      locales: locales,
      source_locale: "en-US",
      download_path: File.join(Dir.pwd, "/playstoreres/metadata"))
  end 

  #####################################################################################
  # create_promo_screenshots
  # -----------------------------------------------------------------------------------
  # This lane download creates the promo screenshot from the original ones that
  # are taken by the screenshot lane
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane create_promo_screenshots 
  #
  # Example:
  # fastlane create_promo_screenshots
  #####################################################################################
  desc "Creates promo screenshots"
  lane :create_promo_screenshots do |options| 
  
    # Create a copy of the files to work with – this ensures that if we're doing multiple
    # screenshot generation tasks close together, we can keep reusing the same source files
    original_screenshot_directory = File.join(Dir.pwd, "metadata/android/")
    repaired_screenshot_directory = File.join(Dir.pwd, "metadata/tmp")
    FileUtils.rm_rf(repaired_screenshot_directory)
    FileUtils.copy_entry(original_screenshot_directory, repaired_screenshot_directory)
    
    # Remove the timestamps from filenames to make them easier to work with
    Dir.glob(repaired_screenshot_directory + "/**/**")
    .select{ |entry|
      entry.end_with? ".png"
    }
    .each { |entry|
      newfilename = File.dirname(entry) + "/" + File.basename(entry).split("_")[0] + File.extname(entry)
      File.rename( entry, newfilename.downcase )
    }

    locales = SUPPORTED_LOCALES
      .select { |hsh| hsh[:promo_config] != false }
      .map { |hsh| hsh[:google_play] }

    # Remove locales we're not interested in
    Pathname(repaired_screenshot_directory)
        .children
        .select(&:directory?)
        .select { |dir|
        !locales.include? File.basename(dir)
    }
    .each { |dir|
        FileUtils.rm_rf(dir)
    }

    # Run screenshots generator tool 
    promo_screenshots(
      orig_folder: repaired_screenshot_directory,
      metadata_folder: repaired_screenshot_directory,
      output_folder: File.join(Dir.pwd, "/promo_screenshots"),
      force: options[:force],
    )

    # Clean up the temp directory
    FileUtils.rm_rf(repaired_screenshot_directory)
  end 


  #####################################################################################
  # rebuild_screenshot_devices
  # -----------------------------------------------------------------------------------
  # This lane rebuilds all of the emulators used for generating screenshots. Beware – running
  # this action will overwrite the following emulators:
  #     - Nexus 9 API 28
  #     - Pixel 2 XL API 28
  # It will not overwrite any other devices.
  # -----------------------------------------------------------------------------------
  # Usage:
  # fastlane rebuild_screenshot_devices
  #
  # Example:
  # fastlane rebuild_screenshot_devices
  #####################################################################################
  desc "Rebuild screenshot devices"
  lane :rebuild_screenshot_devices do |options|

    emulators = [
        Dir.pwd + "/emulators/Nexus_9_API_28.ini",
        Dir.pwd + "/emulators/Pixel_2_XL_API_28.ini",
    ]

    emulators.each do |emulator_configuration|
        sh("helpers/copy-device.sh '#{emulator_configuration}'")
    end
  end


  #####################################################################################
  # Private lanes
  #####################################################################################
  #####################################################################################
  # fix_obsolete_locales_for_screenshots
  # -----------------------------------------------------------------------------------
  # This lane copies screenshots from the obsolete locale folder to the expected one
  # -----------------------------------------------------------------------------------
  #####################################################################################
  private_lane :fix_obsolete_locales_for_screenshots do | options |
    options[:locales].each do | locale |
      UI.message ("Copying #{locale[:source_id]} to #{locale[:target_id]}...")
      source_folder = File.join(options[:output_directory], locale[:source_id])
      dest_folder = File.join(options[:output_directory], locale[:target_id])

      puts source_folder
      puts dest_folder

      FileUtils.mkdir_p(dest_folder)

      FileUtils.copy_entry(source_folder, dest_folder) if File.directory?(source_folder)
      UI.message ("Done.")
    end
  end

end
