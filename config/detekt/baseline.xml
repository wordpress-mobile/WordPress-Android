<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ComplexCondition:AllTimeStatsUseCase.kt$AllTimeStatsUseCase$!hasPosts &amp;&amp; !hasViews &amp;&amp; !hasVisitors &amp;&amp; !hasViewsBestDayTotal</ID>
    <ID>ComplexCondition:FollowersUseCase.kt$FollowersUseCase$wpComModel.followers.size &gt;= VIEW_ALL_PAGE_SIZE &amp;&amp; uiState.selectedTab == 0 || emailModel.followers.size &gt;= VIEW_ALL_PAGE_SIZE &amp;&amp; uiState.selectedTab == 1</ID>
    <ID>ComplexCondition:FollowersUseCase.kt$FollowersUseCase$wpComModel.hasMore &amp;&amp; uiState.selectedTab == 0 || emailModel.hasMore &amp;&amp; uiState.selectedTab == 1</ID>
    <ID>ComplexCondition:GifPickerActivity.kt$GifPickerActivity$isVisible &amp;&amp; selectionBar.visibility == View.VISIBLE || !isVisible &amp;&amp; selectionBar.visibility != View.VISIBLE</ID>
    <ID>ComplexCondition:MinifiedWidgetUpdater.kt$MinifiedWidgetUpdater$networkAvailable &amp;&amp; hasAccessToken &amp;&amp; siteModel != null &amp;&amp; dataType != null</ID>
    <ID>ComplexCondition:NullCheckExtensions.kt$value1 != null &amp;&amp; value2 != null &amp;&amp; value3 != null &amp;&amp; value4 != null</ID>
    <ID>ComplexCondition:QuickStartUtils.kt$QuickStartUtils.Companion$quickStartStore.getQuickStartCompleted(siteId) || isEveryQuickStartTaskDone(quickStartStore) || quickStartStore.hasDoneTask(siteId, task) || !isQuickStartAvailableForTheSite(site)</ID>
    <ID>ComplexCondition:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$activity != null &amp;&amp; requestCode == READER_FILE_DOWNLOAD_PERMISSION_REQUEST_CODE &amp;&amp; grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED</ID>
    <ID>ComplexCondition:ReaderPostDetailFragment.kt$ReaderPostDetailFragment.ShowPostTask$discoverData != null &amp;&amp; discoverData.discoverType == ReaderPostDiscoverData.DiscoverType.EDITOR_PICK &amp;&amp; discoverData.blogId != 0L &amp;&amp; discoverData.postId != 0L</ID>
    <ID>ComplexCondition:ScanAndBackupSource.kt$ScanAndBackupSource$site != null &amp;&amp; site.id == siteId &amp;&amp; (scanScreenFeatureConfig.isEnabled() || backupScreenFeatureConfig.isEnabled())</ID>
    <ID>ComplexCondition:SiteListItemBuilder.kt$SiteListItemBuilder$!TextUtils.isEmpty(planShortName) &amp;&amp; site.hasCapabilityManageOptions &amp;&amp; !site.isWpForTeamsSite &amp;&amp; (site.isWPCom || site.isAutomatedTransfer)</ID>
    <ID>ComplexCondition:TodayStatsUseCase.kt$TodayStatsUseCase$!hasViews &amp;&amp; !hasVisitors &amp;&amp; !hasLikes &amp;&amp; !hasComments</ID>
    <ID>ComplexMethod:ActivityLogViewModel.kt$ActivityLogViewModel$@VisibleForTesting fun reloadEvents( done: Boolean = isDone, restoreEvent: RestoreEvent = currentRestoreEvent, backupDownloadEvent: BackupDownloadEvent = currentBackupDownloadEvent )</ID>
    <ID>ComplexMethod:BarChartViewHolder.kt$BarChartViewHolder$private fun BarChart.draw( item: BarChartItem, labelStart: TextView, labelEnd: TextView ): BarCount</ID>
    <ID>ComplexMethod:BlockDiffCallback.kt$BlockDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ComplexMethod:BlockListAdapter.kt$BlockListAdapter$override fun onBindViewHolder(holder: BlockListItemViewHolder, position: Int, payloads: List&lt;Any&gt;)</ID>
    <ID>ComplexMethod:BlockListAdapter.kt$BlockListAdapter$override fun onCreateViewHolder(parent: ViewGroup, itemType: Int): BlockListItemViewHolder</ID>
    <ID>ComplexMethod:CreatePageListItemActionsUseCase.kt$CreatePageListItemActionsUseCase$fun setupPageActions( listType: PageListType, uploadUiState: PostUploadUiState, siteModel: SiteModel, remoteId: Long ): Set&lt;Action&gt;</ID>
    <ID>ComplexMethod:CreatePageListItemLabelsUseCase.kt$CreatePageListItemLabelsUseCase$private fun getLabels( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, hasUnhandledConflicts: Boolean, hasAutoSave: Boolean ): List&lt;UiString&gt;</ID>
    <ID>ComplexMethod:DomainRegistrationDetailsFragment.kt$DomainRegistrationDetailsFragment$private fun setupObservers()</ID>
    <ID>ComplexMethod:EditorTracker.kt$EditorTracker$@JvmOverloads fun trackEditorEvent( event: TrackableEvent, editorName: String, properties: Map&lt;String, String&gt; = mapOf() )</ID>
    <ID>ComplexMethod:FormattableContentClickHandler.kt$FormattableContentClickHandler$fun onClick(activity: FragmentActivity, clickedSpan: FormattableRange)</ID>
    <ID>ComplexMethod:HomepageSettingsDialog.kt$HomepageSettingsDialog$override fun onCreateDialog(savedInstanceState: Bundle?): Dialog</ID>
    <ID>ComplexMethod:ImagePlaceholderManager.kt$ImagePlaceholderManager$fun getErrorResource(imgType: ImageType): Int?</ID>
    <ID>ComplexMethod:ImagePlaceholderManager.kt$ImagePlaceholderManager$fun getPlaceholderResource(imgType: ImageType): Int?</ID>
    <ID>ComplexMethod:ImprovedMySiteFragment.kt$ImprovedMySiteFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>ComplexMethod:ImprovedMySiteFragment.kt$ImprovedMySiteFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:MediaPickerFragment.kt$MediaPickerFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:MediaPickerViewModel.kt$MediaPickerViewModel$private fun buildUiModel( domainModel: DomainModel?, selectedIds: List&lt;Identifier&gt;?, softAskRequest: SoftAskRequest?, isSearching: Boolean? ): PhotoListUiModel</ID>
    <ID>ComplexMethod:MySiteAdapterDiffCallback.kt$MySiteAdapterDiffCallback$override fun areItemsTheSame(oldItemPosition: Int, newItemPosition: Int): Boolean</ID>
    <ID>ComplexMethod:MySiteFragment.kt$MySiteFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>ComplexMethod:MySiteFragment.kt$MySiteFragment$private fun refreshSelectedSiteDetails(site: SiteModel?)</ID>
    <ID>ComplexMethod:MySiteViewModel.kt$MySiteViewModel$private fun onItemClick(action: ListItemAction)</ID>
    <ID>ComplexMethod:NoticonUtils.kt$NoticonUtils$fun noticonToGridicon(noticon: String): Int</ID>
    <ID>ComplexMethod:PagesFragment.kt$PagesFragment$private fun setupObservers(activity: FragmentActivity)</ID>
    <ID>ComplexMethod:PhotoPickerFragment.kt$PhotoPickerFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>ComplexMethod:PostActionHandler.kt$PostActionHandler$fun handlePostButton(buttonType: PostListButtonType, post: PostModel, hasAutoSave: Boolean)</ID>
    <ID>ComplexMethod:PostListActionTracker.kt$fun trackPostListAction(site: SiteModel, buttonType: PostListButtonType, postData: PostModel, statsEvent: Stat)</ID>
    <ID>ComplexMethod:PostListDialogHelper.kt$PostListDialogHelper$fun onPositiveClickedForBasicDialog( instanceTag: String, trashPostWithLocalChanges: (Int) -&gt; Unit, trashPostWithUnsavedChanges: (Int) -&gt; Unit, deletePost: (Int) -&gt; Unit, publishPost: (Int) -&gt; Unit, updateConflictedPostWithRemoteVersion: (Int) -&gt; Unit, editRestoredAutoSavePost: (Int) -&gt; Unit, moveTrashedPostToDraft: (Int) -&gt; Unit, resolveConflictsAndEditPost: (Int) -&gt; Unit )</ID>
    <ID>ComplexMethod:PostListItemUiStateHelper.kt$PostListItemUiStateHelper$private fun createButtonTypes( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, siteHasCapabilitiesToPublish: Boolean, statsSupported: Boolean ): List&lt;PostListButtonType&gt;</ID>
    <ID>ComplexMethod:PostListItemUiStateHelper.kt$PostListItemUiStateHelper$private fun getStatuses( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, hasUnhandledConflicts: Boolean, hasAutoSave: Boolean ): List&lt;UiString&gt;</ID>
    <ID>ComplexMethod:PostPageListLabelColorUseCase.kt$PostPageListLabelColorUseCase$@ColorRes private fun getLabelColor( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, hasUnhandledConflicts: Boolean, hasAutoSave: Boolean ): Int?</ID>
    <ID>ComplexMethod:ReaderDiscoverFragment.kt$ReaderDiscoverFragment$private fun initViewModel()</ID>
    <ID>ComplexMethod:ReaderPostBookmarkUseCase.kt$ReaderPostBookmarkUseCase$private fun trackEvent(bookmarked: Boolean, isBookmarkList: Boolean, fromPostDetails: Boolean)</ID>
    <ID>ComplexMethod:ReaderPostDetailFragment.kt$ReaderPostDetailFragment.ShowPostTask$override fun onPostExecute(result: Boolean)</ID>
    <ID>ComplexMethod:ReferrersUseCase.kt$ReferrersUseCase$override fun buildUiModel(domainModel: ReferrersModel, uiState: SelectedGroup): List&lt;BlockListItem&gt;</ID>
    <ID>ComplexMethod:StatsFragment.kt$StatsFragment$private fun setupObservers(activity: FragmentActivity)</ID>
    <ID>ComplexMethod:StatsNavigator.kt$StatsNavigator$fun navigate(activity: FragmentActivity, target: NavigationTarget)</ID>
    <ID>ComplexMethod:StatsViewAllFragment.kt$StatsViewAllFragment$private fun setupObservers(activity: FragmentActivity)</ID>
    <ID>ComplexMethod:SystemNotificationsTracker.kt$SystemNotificationsTracker$private fun NotificationType.toTypeValue(): String</ID>
    <ID>ComplexMethod:UiModelMapper.kt$UiModelMapper$fun mapInsights( useCaseModels: List&lt;UseCaseModel&gt;, showError: (Int) -&gt; Unit ): UiModel</ID>
    <ID>ComplexMethod:UiModelMapper.kt$UiModelMapper$private fun mapStatsWithOverview( overViewType: StatsType, useCaseModels: List&lt;UseCaseModel&gt;, showError: (Int) -&gt; Unit ): UiModel</ID>
    <ID>ComplexMethod:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$private fun setListeners()</ID>
    <ID>ConstructorParameterNaming:MainFabUiState.kt$MainFabUiState$@StringRes val CreateContentMessageId: Int</ID>
    <ID>ConstructorParameterNaming:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.SavedState$`in`: Parcel</ID>
    <ID>EmptyFunctionBlock:AllTimeWidgetListProvider.kt$AllTimeWidgetListProvider${ }</ID>
    <ID>EmptyFunctionBlock:CommentFullScreenDialogFragment.kt$CommentFullScreenDialogFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:DomainRegistrationDetailsFragment.kt$DomainRegistrationDetailsFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:DomainSuggestionsFragment.kt$DomainSuggestionsFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:EditPostPublishSettingsFragment.kt$EditPostPublishSettingsFragment${}</ID>
    <ID>EmptyFunctionBlock:GlideMShotsLoader.kt$GlideMShotsLoader.Factory${}</ID>
    <ID>EmptyFunctionBlock:HomePagePickerViewHolder.kt$HomePagePickerViewHolder.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:ImageManager.kt$ImageManager.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:LayoutViewHolder.kt$LayoutViewHolder.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:MySiteFragment.kt$MySiteFragment${}</ID>
    <ID>EmptyFunctionBlock:NotificationsListFragment.kt$NotificationsListFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:NotificationsListFragmentPage.kt$NotificationsListFragmentPage.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:PagesFragment.kt$PagesFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:PagesFragment.kt$PagesFragment.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:PostsListActivity.kt$PostsListActivity.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:PrepublishingAddCategoryFragment.kt$PrepublishingAddCategoryFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:QuickStartFocusPoint.kt$QuickStartFocusPoint.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:ReaderDiscoverDataProvider.kt$ReaderDiscoverDataProvider${ }</ID>
    <ID>EmptyFunctionBlock:ScanHistoryFragment.kt$ScanHistoryFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SearchInputWithHeader.kt$SearchInputWithHeader.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:SettingsUsernameChangerFragment.kt$SettingsUsernameChangerFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SiteCreationSegmentViewHolder.kt$SiteCreationSegmentViewHolder.SegmentsItemViewHolder.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:SiteCreationSegmentViewHolder.kt$SiteCreationSegmentViewHolder.SegmentsProgressViewHolder${}</ID>
    <ID>EmptyFunctionBlock:SiteCreationService.kt$SiteCreationService${ }</ID>
    <ID>EmptyFunctionBlock:StatsFragment.kt$SelectedTabListener${ }</ID>
    <ID>EmptyFunctionBlock:StatsViewAllFragment.kt$StatsViewAllFragment.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:StoryTitleHeaderView.kt$StoryTitleHeaderView.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:SuggestionActivity.kt$SuggestionActivity.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:TabsViewHolder.kt$TabsViewHolder.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:ThreatLoadingSkeletonViewHolder.kt$ThreatLoadingSkeletonViewHolder${}</ID>
    <ID>EmptyFunctionBlock:TodayWidgetListProvider.kt$TodayWidgetListProvider${ }</ID>
    <ID>EmptyFunctionBlock:ViewsWidgetListProvider.kt$ViewsWidgetListProvider${ }</ID>
    <ID>EmptyFunctionBlock:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.&lt;no name provided&gt;${ }</ID>
    <ID>EmptyFunctionBlock:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.&lt;no name provided&gt;${}</ID>
    <ID>EmptyFunctionBlock:WPTextViewDrawableCallback.kt$WPTextViewDrawableCallback${}</ID>
    <ID>EmptyFunctionBlock:WidgetBlockListProvider.kt$WidgetBlockListProvider${ }</ID>
    <ID>EmptyFunctionBlock:WordPressGlideModule.kt$WordPressGlideModule${}</ID>
    <ID>EmptySecondaryConstructor:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.SavedState${}</ID>
    <ID>FunctionNaming:WPMainActivityViewModel.kt$WPMainActivityViewModel$// create_post_page_fab_tooltip_stories_feature_flag_on private fun getCreateContentMessageId_StoriesFlagOn(hasFullAccessToContent: Boolean): Int</ID>
    <ID>FunctionNaming:WPMainActivityViewModel.kt$WPMainActivityViewModel$private fun getCreateContentMessageId_StoriesFlagOff(hasFullAccessToContent: Boolean): Int</ID>
    <ID>FunctionParameterNaming:WizardManager.kt$WizardManager$T: WizardStep</ID>
    <ID>LargeClass:MySiteFragment.kt$MySiteFragment : FragmentOnScrollToTopListenerBasicDialogPositiveClickInterfaceBasicDialogNegativeClickInterfaceBasicDialogOnDismissByOutsideTouchInterfacePromoDialogClickInterfaceOnConfirmListenerOnDismissListenerCallback</ID>
    <ID>LargeClass:PagesViewModel.kt$PagesViewModel : ScopedViewModel</ID>
    <ID>LargeClass:ReaderPostDetailFragment.kt$ReaderPostDetailFragment : ViewPagerFragmentOnActivityBackPressedListenerReaderCustomViewListenerReaderWebViewPageFinishedListenerReaderWebViewUrlClickListenerPrivateAtCookieProgressDialogOnDismissListenerAutoHideToolbarListener</ID>
    <ID>LongMethod:ActivityLogDetailFragment.kt$ActivityLogDetailFragment$override fun onActivityCreated(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:ActivityLogListFragment.kt$ActivityLogListFragment$private fun setupObservers()</ID>
    <ID>LongMethod:AuthorsUseCase.kt$AuthorsUseCase$override fun buildUiModel(domainModel: AuthorsModel, uiState: SelectedAuthor): List&lt;BlockListItem&gt;</ID>
    <ID>LongMethod:BarChartViewHolder.kt$BarChartViewHolder$private fun BarChart.draw( item: BarChartItem, labelStart: TextView, labelEnd: TextView ): BarCount</ID>
    <ID>LongMethod:ClicksUseCase.kt$ClicksUseCase$override fun buildUiModel(domainModel: ClicksModel, uiState: SelectedClicksGroup): List&lt;BlockListItem&gt;</ID>
    <ID>LongMethod:DomainRegistrationDetailsFragment.kt$DomainRegistrationDetailsFragment$private fun setupObservers()</ID>
    <ID>LongMethod:HomepageSettingsDialog.kt$HomepageSettingsDialog$override fun onCreateDialog(savedInstanceState: Bundle?): Dialog</ID>
    <ID>LongMethod:ImprovedMySiteFragment.kt$ImprovedMySiteFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>LongMethod:ImprovedMySiteFragment.kt$ImprovedMySiteFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:JetpackRemoteInstallFragment.kt$JetpackRemoteInstallFragment$override fun onActivityCreated(savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:MapViewHolder.kt$MapViewHolder$@SuppressLint("SetJavaScriptEnabled") fun bind(item: MapItem)</ID>
    <ID>LongMethod:MediaPickerActivity.kt$MediaPickerActivity$override fun onActivityResult( requestCode: Int, resultCode: Int, data: Intent? )</ID>
    <ID>LongMethod:MediaPickerFragment.kt$MediaPickerFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:MediaPickerViewModel.kt$MediaPickerViewModel$private fun buildUiModel( domainModel: DomainModel?, selectedIds: List&lt;Identifier&gt;?, softAskRequest: SoftAskRequest?, isSearching: Boolean? ): PhotoListUiModel</ID>
    <ID>LongMethod:MySiteFragment.kt$MySiteFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>LongMethod:MySiteFragment.kt$MySiteFragment$private fun refreshSelectedSiteDetails(site: SiteModel?)</ID>
    <ID>LongMethod:MySiteFragment.kt$MySiteFragment$private fun setupClickListeners()</ID>
    <ID>LongMethod:OverviewMapper.kt$OverviewMapper$fun buildChart( dates: List&lt;PeriodData&gt;, statsGranularity: StatsGranularity, onBarSelected: (String?) -&gt; Unit, onBarChartDrawn: (visibleBarCount: Int) -&gt; Unit, selectedType: Int, selectedItemPeriod: String ): List&lt;BlockListItem&gt;</ID>
    <ID>LongMethod:PagesFragment.kt$PagesFragment$private fun setupObservers(activity: FragmentActivity)</ID>
    <ID>LongMethod:PhotoPickerFragment.kt$PhotoPickerFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:PostListItemUiStateHelper.kt$PostListItemUiStateHelper$fun createPostListItemUiState( authorFilterSelection: AuthorFilterSelection, post: PostModel, site: SiteModel, unhandledConflicts: Boolean, hasAutoSave: Boolean, capabilitiesToPublish: Boolean, statsSupported: Boolean, featuredImageUrl: String?, formattedDate: String, performingCriticalAction: Boolean, isSearch: Boolean, uploadStatusTracker: PostModelUploadStatusTracker, onAction: (PostModel, PostListButtonType, AnalyticsTracker.Stat) -&gt; Unit ): PostListItemUiState</ID>
    <ID>LongMethod:PostsListActivity.kt$PostsListActivity$private fun initViewModel(initPreviewState: PostListRemotePreviewState, currentBottomSheetPostId: LocalId)</ID>
    <ID>LongMethod:PrepublishingHomeViewModel.kt$PrepublishingHomeViewModel$private fun setupHomeUiState( editPostRepository: EditPostRepository, site: SiteModel, isStoryPost: Boolean )</ID>
    <ID>LongMethod:PublishSettingsFragment.kt$PublishSettingsFragment$override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View?</ID>
    <ID>LongMethod:ReaderDiscoverFragment.kt$ReaderDiscoverFragment$private fun initViewModel()</ID>
    <ID>LongMethod:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$private fun initViewModel()</ID>
    <ID>LongMethod:ReaderPostDetailFragment.kt$ReaderPostDetailFragment.ShowPostTask$override fun onPostExecute(result: Boolean)</ID>
    <ID>LongMethod:ReaderPostMoreButtonUiStateBuilder.kt$ReaderPostMoreButtonUiStateBuilder$fun buildMoreMenuItemsBlocking( post: ReaderPost, onButtonClicked: (Long, Long, ReaderPostCardActionType) -&gt; Unit ): MutableList&lt;SecondaryAction&gt;</ID>
    <ID>LongMethod:ReferrersUseCase.kt$ReferrersUseCase$override fun buildUiModel(domainModel: ReferrersModel, uiState: SelectedGroup): List&lt;BlockListItem&gt;</ID>
    <ID>LongMethod:SearchListViewModel.kt$SearchListViewModel$private fun PageModel.toPageItem(areActionsEnabled: Boolean): PageItem</ID>
    <ID>LongMethod:StatsFragment.kt$StatsFragment$private fun setupObservers(activity: FragmentActivity)</ID>
    <ID>LongMethod:StatsListFragment.kt$StatsListFragment$private fun setupObservers(activity: FragmentActivity)</ID>
    <ID>LongMethod:StatsMinifiedWidgetConfigureFragment.kt$StatsMinifiedWidgetConfigureFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:StatsNavigator.kt$StatsNavigator$fun navigate(activity: FragmentActivity, target: NavigationTarget)</ID>
    <ID>LongMethod:StatsViewAllFragment.kt$StatsViewAllFragment$private fun setupObservers(activity: FragmentActivity)</ID>
    <ID>LongMethod:StatsWidgetConfigureFragment.kt$StatsWidgetConfigureFragment$override fun onViewCreated(view: View, savedInstanceState: Bundle?)</ID>
    <ID>LongMethod:SuggestionActivity.kt$SuggestionActivity$private fun initializeActivity(siteModel: SiteModel, suggestionType: SuggestionType)</ID>
    <ID>LongParameterList:ActivityLogViewModel.kt$ActivityLogViewModel$( private val activityLogStore: ActivityLogStore, private val postRestoreUseCase: PostRestoreUseCase, private val getRestoreStatusUseCase: GetRestoreStatusUseCase, private val getBackupDownloadStatusUseCase: GetBackupDownloadStatusUseCase, private val resourceProvider: ResourceProvider, private val activityLogFiltersFeatureConfig: ActivityLogFiltersFeatureConfig, private val backupDownloadFeatureConfig: BackupDownloadFeatureConfig, private val dateUtils: DateUtils, private val activityLogTracker: ActivityLogTracker, private val jetpackCapabilitiesUseCase: JetpackCapabilitiesUseCase, private val restoreFeatureConfig: RestoreFeatureConfig )</ID>
    <ID>LongParameterList:AddLocalMediaToPostUseCase.kt$AddLocalMediaToPostUseCase$( uriList: List&lt;Uri&gt;, site: SiteModel, freshlyTaken: Boolean, editorMediaListener: EditorMediaListener, doUploadAfterAdding: Boolean = true, trackEvent: Boolean = true )</ID>
    <ID>LongParameterList:AllTimeStatsUseCase.kt$AllTimeStatsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val allTimeStore: AllTimeInsightsStore, private val statsSiteProvider: StatsSiteProvider, private val statsDateFormatter: StatsDateFormatter, private val statsWidgetUpdaters: StatsWidgetUpdaters, private val statsUtils: StatsUtils, private val popupMenuHandler: ItemPopupMenuHandler )</ID>
    <ID>LongParameterList:AllTimeWidgetUpdater.kt$AllTimeWidgetUpdater$( private val appPrefsWrapper: AppPrefsWrapper, private val siteStore: SiteStore, private val accountStore: AccountStore, private val networkUtilsWrapper: NetworkUtilsWrapper, private val resourceProvider: ResourceProvider, private val widgetUtils: WidgetUtils, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:AnnualSiteStatsUseCase.kt$AnnualSiteStatsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val mostPopularStore: MostPopularInsightsStore, private val statsSiteProvider: StatsSiteProvider, private val selectedDateProvider: SelectedDateProvider, private val annualStatsMapper: AnnualStatsMapper, private val localeManagerWrapper: LocaleManagerWrapper, private val popupMenuHandler: ItemPopupMenuHandler, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:AnnualSiteStatsUseCase.kt$AnnualSiteStatsUseCase.AnnualSiteStatsUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val mostPopularStore: MostPopularInsightsStore, private val statsSiteProvider: StatsSiteProvider, private val annualStatsMapper: AnnualStatsMapper, private val localeManagerWrapper: LocaleManagerWrapper, private val selectedDateProvider: SelectedDateProvider, private val popupMenuHandler: ItemPopupMenuHandler )</ID>
    <ID>LongParameterList:AuthorsUseCase.kt$AuthorsUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val authorsStore: AuthorsStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:AuthorsUseCase.kt$AuthorsUseCase.AuthorsUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val authorsStore: AuthorsStore, private val statsSiteProvider: StatsSiteProvider, private val selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val statsUtils: StatsUtils, private val contentDescriptionHelper: ContentDescriptionHelper )</ID>
    <ID>LongParameterList:BackupDownloadViewModel.kt$BackupDownloadViewModel$( private val wizardManager: WizardManager&lt;BackupDownloadStep&gt;, private val availableItemsProvider: JetpackAvailableItemsProvider, private val getActivityLogItemUseCase: GetActivityLogItemUseCase, private val stateListItemBuilder: BackupDownloadStateListItemBuilder, private val postBackupDownloadUseCase: PostBackupDownloadUseCase, private val getBackupDownloadStatusUseCase: GetBackupDownloadStatusUseCase, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:BasicFragmentDialog.kt$BasicFragmentDialog$( tag: String, title: CharSequence?, message: CharSequence, positiveButtonLabel: CharSequence, negativeButtonLabel: CharSequence? = null, cancelButtonLabel: CharSequence? = null )</ID>
    <ID>LongParameterList:ClicksUseCase.kt$ClicksUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: ClicksStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:ClicksUseCase.kt$ClicksUseCase.ClicksUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: ClicksStore, private val statsSiteProvider: StatsSiteProvider, private val selectedDateProvider: SelectedDateProvider, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val analyticsTracker: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:CommentsUseCase.kt$CommentsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val commentsStore: CommentsStore, private val statsSiteProvider: StatsSiteProvider, private val popupMenuHandler: ItemPopupMenuHandler, private val statsUtils: StatsUtils, private val contentDescriptionHelper: ContentDescriptionHelper )</ID>
    <ID>LongParameterList:CountryViewsUseCase.kt$CountryViewsUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: CountryViewsStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:CountryViewsUseCase.kt$CountryViewsUseCase.CountryViewsUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: CountryViewsStore, private val statsSiteProvider: StatsSiteProvider, private val selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val statsUtils: StatsUtils, private val contentDescriptionHelper: ContentDescriptionHelper )</ID>
    <ID>LongParameterList:CreatePageListItemLabelsUseCase.kt$CreatePageListItemLabelsUseCase$( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, hasUnhandledConflicts: Boolean, hasAutoSave: Boolean )</ID>
    <ID>LongParameterList:EditorMedia.kt$EditorMedia$( private val updateMediaModelUseCase: UpdateMediaModelUseCase, private val getMediaModelUseCase: GetMediaModelUseCase, private val dispatcher: Dispatcher, private val mediaUtilsWrapper: MediaUtilsWrapper, private val networkUtilsWrapper: NetworkUtilsWrapper, private val addLocalMediaToPostUseCase: AddLocalMediaToPostUseCase, private val addExistingMediaToPostUseCase: AddExistingMediaToPostUseCase, private val retryFailedMediaUploadUseCase: RetryFailedMediaUploadUseCase, private val cleanUpMediaToPostAssociationUseCase: CleanUpMediaToPostAssociationUseCase, private val removeMediaUseCase: RemoveMediaUseCase, private val reattachUploadingMediaUseCase: ReattachUploadingMediaUseCase, private val analyticsUtilsWrapper: AnalyticsUtilsWrapper, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:FeaturedImageHelper.kt$FeaturedImageHelper$( private val uploadStore: UploadStore, private val mediaStore: MediaStore, private val uploadServiceFacade: UploadServiceFacade, private val resourceProvider: ResourceProvider, private val readerUtilsWrapper: ReaderUtilsWrapper, private val fluxCUtilsWrapper: FluxCUtilsWrapper, private val siteUtilsWrapper: SiteUtilsWrapper, private val dispatcher: Dispatcher, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:FileDownloadsUseCase.kt$FileDownloadsUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: FileDownloadsStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val localeManagerWrapper: LocaleManagerWrapper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:FileDownloadsUseCase.kt$FileDownloadsUseCase.FileDownloadsUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: FileDownloadsStore, private val selectedDateProvider: SelectedDateProvider, private val statsSiteProvider: StatsSiteProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val localeManagerWrapper: LocaleManagerWrapper )</ID>
    <ID>LongParameterList:FollowerTotalsUseCase.kt$FollowerTotalsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val followersStore: FollowersStore, private val publicizeStore: PublicizeStore, private val statsSiteProvider: StatsSiteProvider, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val popupMenuHandler: ItemPopupMenuHandler )</ID>
    <ID>LongParameterList:FollowersUseCase.kt$FollowersUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val followersStore: FollowersStore, private val statsSiteProvider: StatsSiteProvider, private val statsUtilsWrapper: StatsUtilsWrapper, private val resourceProvider: ResourceProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val popupMenuHandler: ItemPopupMenuHandler, private val contentDescriptionHelper: ContentDescriptionHelper, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:FollowersUseCase.kt$FollowersUseCase.FollowersUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val followersStore: FollowersStore, private val statsSiteProvider: StatsSiteProvider, private val statsUtilsWrapper: StatsUtilsWrapper, private val resourceProvider: ResourceProvider, private val popupMenuHandler: ItemPopupMenuHandler, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper )</ID>
    <ID>LongParameterList:GetDiscoverCardsUseCase.kt$GetDiscoverCardsUseCase$( private val parseDiscoverCardsJsonUseCase: ParseDiscoverCardsJsonUseCase, private val readerDiscoverCardsTableWrapper: ReaderDiscoverCardsTableWrapper, private val readerPostTableWrapper: ReaderPostTableWrapper, private val readerBlogTableWrapper: ReaderBlogTableWrapper, private val appLogWrapper: AppLogWrapper, private val appPrefsWrapper: AppPrefsWrapper, @Named(IO_THREAD) private val ioDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:GifMediaInsertUseCase.kt$GifMediaInsertUseCase$( private val context: Context, private val site: SiteModel, private val dispatcher: Dispatcher, private val ioDispatcher: CoroutineDispatcher, private val wpMediaUtilsWrapper: WPMediaUtilsWrapper, private val fluxCUtilsWrapper: FluxCUtilsWrapper, private val mimeTypeMapUtilsWrapper: MimeTypeMapUtilsWrapper )</ID>
    <ID>LongParameterList:GifMediaViewHolder.kt$GifMediaViewHolder.Companion$( imageManager: ImageManager, onClickListener: (GifMediaViewModel?) -&gt; Unit, onLongClickListener: (GifMediaViewModel) -&gt; Unit, parent: ViewGroup, thumbnailViewDimensions: ThumbnailViewDimensions, isMultiSelectEnabled: Boolean )</ID>
    <ID>LongParameterList:GranularStatefulUseCase.kt$GranularStatefulUseCase$( type: StatsType, mainDispatcher: CoroutineDispatcher, backgroundDispatcher: CoroutineDispatcher, val statsSiteProvider: StatsSiteProvider, val selectedDateProvider: SelectedDateProvider, val statsGranularity: StatsGranularity, defaultUiState: UI_STATE )</ID>
    <ID>LongParameterList:HistoryViewModel.kt$HistoryViewModel$( private val dispatcher: Dispatcher, private val resourceProvider: ResourceProvider, private val networkUtils: NetworkUtilsWrapper, private val postStore: PostStore, @Named(UI_THREAD) uiDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val connectionStatus: LiveData&lt;ConnectionStatus&gt; )</ID>
    <ID>LongParameterList:ImageManager.kt$ImageManager$( awt: AppWidgetTarget, context: Context, imageType: ImageType, imgUrl: String = "", scaleType: ScaleType = CENTER, width: Int? = null, height: Int? = null )</ID>
    <ID>LongParameterList:ImageManager.kt$ImageManager$( imageView: ImageView, imageType: ImageType, imgUri: Uri, scaleType: ScaleType = CENTER, thumbnailUrl: String? = null, requestListener: RequestListener&lt;Drawable&gt; )</ID>
    <ID>LongParameterList:ImageManager.kt$ImageManager$( imageView: ImageView, imageType: ImageType, imgUrl: String, scaleType: ScaleType = CENTER, thumbnailUrl: String? = null, requestListener: RequestListener&lt;Drawable&gt; )</ID>
    <ID>LongParameterList:InsightsManagementViewModel.kt$InsightsManagementViewModel$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val defaultDispatcher: CoroutineDispatcher, @Named(INSIGHTS_USE_CASE) val insightsUseCase: BaseListUseCase, private val siteProvider: StatsSiteProvider, private val statsStore: StatsStore, private val insightsManagementMapper: InsightsManagementMapper, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:JetpackRemoteInstallViewState.kt$JetpackRemoteInstallViewState$( val type: Type, @StringRes val titleResource: Int, @StringRes val messageResource: Int, @DrawableRes val icon: Int, @ColorRes val iconTint: Int? = null, @StringRes val buttonResource: Int? = null, open val onClick: () -&gt; Unit = {}, val progressBarVisible: Boolean = false )</ID>
    <ID>LongParameterList:LatestPostSummaryUseCase.kt$LatestPostSummaryUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val latestPostStore: LatestPostInsightsStore, private val statsSiteProvider: StatsSiteProvider, private val latestPostSummaryMapper: LatestPostSummaryMapper, private val analyticsTracker: AnalyticsTrackerWrapper, private val popupMenuHandler: ItemPopupMenuHandler, private val statsUtils: StatsUtils, private val contentDescriptionHelper: ContentDescriptionHelper )</ID>
    <ID>LongParameterList:LiveDataUtils.kt$( sourceA: LiveData&lt;S&gt;, sourceB: LiveData&lt;T&gt;, sourceC: LiveData&lt;U&gt;, sourceD: LiveData&lt;V&gt;, distinct: Boolean = false, merger: (S?, T?, U?, V?) -&gt; W? )</ID>
    <ID>LongParameterList:LiveDataUtils.kt$( sourceA: LiveData&lt;S&gt;, sourceB: LiveData&lt;T&gt;, sourceC: LiveData&lt;U&gt;, sourceD: LiveData&lt;V&gt;, sourceE: LiveData&lt;W&gt;, distinct: Boolean = false, merger: (S?, T?, U?, V?, W?) -&gt; X? )</ID>
    <ID>LongParameterList:MeGravatarLoader.kt$MeGravatarLoader$( newAvatarUploaded: Boolean, avatarUrl: String, injectFilePath: String?, imageView: ImageView, imageType: ImageType, listener: RequestListener&lt;Drawable&gt;? = null )</ID>
    <ID>LongParameterList:MediaLibraryDataSource.kt$MediaLibraryDataSource$( private val mediaStore: MediaStore, private val dispatcher: Dispatcher, @param:Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val networkUtilsWrapper: NetworkUtilsWrapper, private val dateTimeUtilsWrapper: DateTimeUtilsWrapper, private val siteModel: SiteModel, private val mediaTypes: Set&lt;MediaType&gt; )</ID>
    <ID>LongParameterList:MediaPickerViewModel.kt$MediaPickerViewModel$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val mediaLoaderFactory: MediaLoaderFactory, private val mediaInsertHandlerFactory: MediaInsertHandlerFactory, private val mediaPickerTracker: MediaPickerTracker, private val permissionsHandler: PermissionsHandler, private val localeManagerWrapper: LocaleManagerWrapper, private val mediaUtilsWrapper: MediaUtilsWrapper, private val mediaStore: MediaStore, private val resourceProvider: ResourceProvider )</ID>
    <ID>LongParameterList:MediaThumbnailViewUtils.kt$MediaThumbnailViewUtils$( container: View, imgThumbnail: ImageView, fileName: String, isSelected: Boolean, clickAction: ClickAction, toggleAction: ToggleAction, animateSelection: Boolean )</ID>
    <ID>LongParameterList:MediaThumbnailViewUtils.kt$MediaThumbnailViewUtils$( imgThumbnail: ImageView, url: String, isSelected: Boolean, clickAction: ClickAction, toggleAction: ToggleAction, animateSelection: Boolean )</ID>
    <ID>LongParameterList:MinifiedWidgetUpdater.kt$MinifiedWidgetUpdater$( @Named(BG_THREAD) private val defaultDispatcher: CoroutineDispatcher, private val appPrefsWrapper: AppPrefsWrapper, private val siteStore: SiteStore, private val accountStore: AccountStore, private val networkUtilsWrapper: NetworkUtilsWrapper, private val resourceProvider: ResourceProvider, private val statsUtils: StatsUtils, private val todayInsightsStore: TodayInsightsStore, private val widgetUtils: WidgetUtils, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:MinifiedWidgetUpdater.kt$MinifiedWidgetUpdater$( appWidgetManager: AppWidgetManager, appWidgetId: Int, site: SiteModel, views: RemoteViews, dataType: DataType, isWideView: Boolean )</ID>
    <ID>LongParameterList:MinifiedWidgetUpdater.kt$MinifiedWidgetUpdater$( appWidgetManager: AppWidgetManager, appWidgetId: Int, views: RemoteViews, site: SiteModel, dataType: DataType, isWideView: Boolean )</ID>
    <ID>LongParameterList:ModalLayoutPickerViewModel.kt$ModalLayoutPickerViewModel$( private val dispatcher: Dispatcher, private val siteStore: SiteStore, private val appPrefsWrapper: AppPrefsWrapper, private val supportedBlocksProvider: SupportedBlocksProvider, private val thumbDimensionProvider: ThumbDimensionProvider, private val networkUtils: NetworkUtilsWrapper, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:MostPopularInsightsUseCase.kt$MostPopularInsightsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val mostPopularStore: MostPopularInsightsStore, private val statsSiteProvider: StatsSiteProvider, private val dateUtils: DateUtils, private val resourceProvider: ResourceProvider, private val popupMenuHandler: ItemPopupMenuHandler )</ID>
    <ID>LongParameterList:MySiteViewModel.kt$MySiteViewModel$( private val networkUtilsWrapper: NetworkUtilsWrapper, @param:Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @param:Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper, private val siteInfoBlockBuilder: SiteInfoBlockBuilder, private val siteItemsBuilder: SiteItemsBuilder, private val accountStore: AccountStore, private val selectedSiteRepository: SelectedSiteRepository, private val wpMediaUtilsWrapper: WPMediaUtilsWrapper, private val mediaUtilsWrapper: MediaUtilsWrapper, private val fluxCUtilsWrapper: FluxCUtilsWrapper, private val contextProvider: ContextProvider, private val siteIconUploadHandler: SiteIconUploadHandler, private val siteStoriesHandler: SiteStoriesHandler, private val domainRegistrationHandler: DomainRegistrationHandler, scanAndBackupSource: ScanAndBackupSource, private val displayUtilsWrapper: DisplayUtilsWrapper, private val quickStartRepository: QuickStartRepository, private val quickStartItemBuilder: QuickStartItemBuilder, private val currentAvatarSource: CurrentAvatarSource, private val dynamicCardsSource: DynamicCardsSource )</ID>
    <ID>LongParameterList:NotificationsListFragment.kt$NotificationsListFragment.Companion$( activity: Activity?, noteId: String?, shouldShowKeyboard: Boolean, replyText: String?, filter: FILTERS?, isTappedFromPushNotification: Boolean )</ID>
    <ID>LongParameterList:NotificationsListFragmentPage.kt$NotificationsListFragmentPage.Companion$( activity: Activity?, noteId: String?, shouldShowKeyboard: Boolean, replyText: String?, filter: FILTERS?, isTappedFromPushNotification: Boolean )</ID>
    <ID>LongParameterList:OverviewMapper.kt$OverviewMapper$( dates: List&lt;PeriodData&gt;, statsGranularity: StatsGranularity, onBarSelected: (String?) -&gt; Unit, onBarChartDrawn: (visibleBarCount: Int) -&gt; Unit, selectedType: Int, selectedItemPeriod: String )</ID>
    <ID>LongParameterList:OverviewMapper.kt$OverviewMapper$( selectedItem: PeriodData, previousItem: PeriodData?, selectedPosition: Int, isLast: Boolean, startValue: Int = MILLION, statsGranularity: StatsGranularity = DAYS )</ID>
    <ID>LongParameterList:OverviewUseCase.kt$OverviewUseCase$( private val statsGranularity: StatsGranularity, private val visitsAndViewsStore: VisitsAndViewsStore, private val selectedDateProvider: SelectedDateProvider, private val statsSiteProvider: StatsSiteProvider, private val statsDateFormatter: StatsDateFormatter, private val overviewMapper: OverviewMapper, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val analyticsTracker: AnalyticsTrackerWrapper, private val statsWidgetUpdaters: StatsWidgetUpdaters, private val localeManagerWrapper: LocaleManagerWrapper, private val resourceProvider: ResourceProvider )</ID>
    <ID>LongParameterList:OverviewUseCase.kt$OverviewUseCase.OverviewUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val statsSiteProvider: StatsSiteProvider, private val selectedDateProvider: SelectedDateProvider, private val statsDateFormatter: StatsDateFormatter, private val overviewMapper: OverviewMapper, private val visitsAndViewsStore: VisitsAndViewsStore, private val analyticsTracker: AnalyticsTrackerWrapper, private val statsWidgetUpdaters: StatsWidgetUpdaters, private val localeManagerWrapper: LocaleManagerWrapper, private val resourceProvider: ResourceProvider )</ID>
    <ID>LongParameterList:PageItem.kt$PageItem.Page$( open val remoteId: Long, open val localId: Int, open val title: String, open val subtitle: Int? = null, open val icon: Int? = null, open val date: Date, open val labels: List&lt;UiString&gt;, @ColorRes open val labelsColor: Int?, open var indent: Int, open var imageUrl: String?, open val actions: Set&lt;Action&gt;, open var actionsEnabled: Boolean, open val tapActionEnabled: Boolean, open val progressBarUiState: ProgressBarUiState, open val showOverlay: Boolean, open val author: String?, open var showQuickStartFocusPoint: Boolean )</ID>
    <ID>LongParameterList:PageItemViewHolder.kt$PageItemViewHolder.PageViewHolder$( parentView: ViewGroup, private val onMenuAction: (PageItem.Action, Page) -&gt; Boolean, private val onItemTapped: (Page) -&gt; Unit, private val imageManager: ImageManager? = null, private val isSitePhotonCapable: Boolean = false, private val isPrivateAtSite: Boolean = false, private val uiHelper: UiHelpers )</ID>
    <ID>LongParameterList:PageListAdapter.kt$PageListAdapter$( private val onMenuAction: (PageItem.Action, Page) -&gt; Boolean, private val onItemTapped: (Page) -&gt; Unit, private val onEmptyActionButtonTapped: () -&gt; Unit, private val isSitePhotonCapable: Boolean, private val isPrivateAtSite: Boolean, private val imageManager: ImageManager, private val uiHelpers: UiHelpers )</ID>
    <ID>LongParameterList:PageListEventListener.kt$PageListEventListener$( private val dispatcher: Dispatcher, private val bgDispatcher: CoroutineDispatcher, private val postStore: PostStore, private val eventBusWrapper: EventBusWrapper, private val siteStore: SiteStore, private val site: SiteModel, private val handleRemoteAutoSave: (LocalId, Boolean) -&gt; Unit, private val handlePostUploadFinished: (RemoteId, Boolean, Boolean) -&gt; Unit, private val invalidateUploadStatus: (List&lt;LocalId&gt;) -&gt; Unit, private val handleHomepageSettingsChange: (SiteModel) -&gt; Unit )</ID>
    <ID>LongParameterList:PageListEventListener.kt$PageListEventListener.Factory$( dispatcher: Dispatcher, bgDispatcher: CoroutineDispatcher, postStore: PostStore, eventBusWrapper: EventBusWrapper, siteStore: SiteStore, site: SiteModel, invalidateUploadStatus: (List&lt;LocalId&gt;) -&gt; Unit, handleRemoteAutoSave: (LocalId, Boolean) -&gt; Unit, handlePostUploadFinished: (RemoteId, Boolean, Boolean) -&gt; Unit, handleHomepageSettingsChange: (SiteModel) -&gt; Unit )</ID>
    <ID>LongParameterList:PageListViewModel.kt$PageListViewModel$( private val createPageListItemLabelsUseCase: CreatePageListItemLabelsUseCase, private val postModelUploadUiStateUseCase: PostModelUploadUiStateUseCase, private val pageListItemActionsUseCase: CreatePageListItemActionsUseCase, private val pageItemProgressUiStateUseCase: PageItemProgressUiStateUseCase, private val mediaStore: MediaStore, private val dispatcher: Dispatcher, private val localeManagerWrapper: LocaleManagerWrapper, private val accountStore: AccountStore, private val quickStartStore: QuickStartStore, @Named(BG_THREAD) private val coroutineDispatcher: CoroutineDispatcher, private val mySiteImprovementsFeatureConfig: MySiteImprovementsFeatureConfig, private val quickStartRepository: QuickStartRepository )</ID>
    <ID>LongParameterList:PagesViewModel.kt$PagesViewModel$( private val pageStore: PageStore, private val postStore: PostStore, private val dispatcher: Dispatcher, private val actionPerfomer: ActionPerformer, private val networkUtils: NetworkUtilsWrapper, private val eventBusWrapper: EventBusWrapper, private val siteStore: SiteStore, private val previewStateHelper: PreviewStateHelper, private val uploadStarter: UploadStarter, private val analyticsTracker: AnalyticsTrackerWrapper, private val autoSaveConflictResolver: AutoSaveConflictResolver, val uploadStatusTracker: PostModelUploadStatusTracker, private val pageListEventListenerFactory: PageListEventListener.Factory, private val siteOptionsStore: SiteOptionsStore, private val appLogWrapper: AppLogWrapper, private val accountStore: AccountStore, private val prefs: AppPrefsWrapper, @Named(UI_THREAD) private val uiDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val defaultDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:PhotoPickerUiItem.kt$PhotoPickerUiItem$( val type: Type, open val id: Long, open val uri: UriWrapper? = null, open val isSelected: Boolean = false, open val selectedOrder: Int? = null, open val showOrderCounter: Boolean = false, open val toggleAction: ToggleAction, open val clickAction: ClickAction )</ID>
    <ID>LongParameterList:PhotoPickerViewModel.kt$PhotoPickerViewModel$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val deviceMediaListBuilder: DeviceMediaListBuilder, private val analyticsUtilsWrapper: AnalyticsUtilsWrapper, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper, private val permissionsHandler: PermissionsHandler, private val tenorFeatureConfig: TenorFeatureConfig, private val resourceProvider: ResourceProvider, private val copyMediaToAppStorageUseCase: CopyMediaToAppStorageUseCase, private val getMediaModelUseCase: GetMediaModelUseCase )</ID>
    <ID>LongParameterList:PostActionHandler.kt$PostActionHandler$( private val dispatcher: Dispatcher, private val site: SiteModel, private val postStore: PostStore, private val postListDialogHelper: PostListDialogHelper, private val doesPostHaveUnhandledConflict: (PostModel) -&gt; Boolean, private val hasUnhandledAutoSave: (PostModel) -&gt; Boolean, private val triggerPostListAction: (PostListAction) -&gt; Unit, private val triggerPostUploadAction: (PostUploadAction) -&gt; Unit, private val triggerPublishAction: (PostModel) -&gt; Unit, private val invalidateList: () -&gt; Unit, private val checkNetworkConnection: () -&gt; Boolean, private val showSnackbar: (SnackbarMessageHolder) -&gt; Unit, private val showToast: (ToastMessageHolder) -&gt; Unit, private val triggerPreviewStateUpdate: (PostListRemotePreviewState, PostInfoType) -&gt; Unit, private val copyPost: (SiteModel, PostModel, Boolean) -&gt; Unit )</ID>
    <ID>LongParameterList:PostAverageViewsPerDayUseCase.kt$PostAverageViewsPerDayUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val statsSiteProvider: StatsSiteProvider, private val statsPostProvider: StatsPostProvider, private val postDetailStore: PostDetailStore, private val postDetailMapper: PostDetailMapper, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:PostConflictResolver.kt$PostConflictResolver$( private val dispatcher: Dispatcher, private val site: SiteModel, private val getPostByLocalPostId: (Int) -&gt; PostModel?, private val invalidateList: () -&gt; Unit, private val checkNetworkConnection: () -&gt; Boolean, private val showSnackbar: (SnackbarMessageHolder) -&gt; Unit, private val showToast: (ToastMessageHolder) -&gt; Unit )</ID>
    <ID>LongParameterList:PostDayViewsUseCase.kt$PostDayViewsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val postDayViewsMapper: PostDayViewsMapper, private val statsDateFormatter: StatsDateFormatter, private val selectedDateProvider: SelectedDateProvider, private val statsSiteProvider: StatsSiteProvider, private val statsPostProvider: StatsPostProvider, private val postDetailStore: PostDetailStore, private val resourceProvider: ResourceProvider )</ID>
    <ID>LongParameterList:PostListDialogHelper.kt$PostListDialogHelper$( instanceTag: String, trashPostWithLocalChanges: (Int) -&gt; Unit, trashPostWithUnsavedChanges: (Int) -&gt; Unit, deletePost: (Int) -&gt; Unit, publishPost: (Int) -&gt; Unit, updateConflictedPostWithRemoteVersion: (Int) -&gt; Unit, editRestoredAutoSavePost: (Int) -&gt; Unit, moveTrashedPostToDraft: (Int) -&gt; Unit, resolveConflictsAndEditPost: (Int) -&gt; Unit )</ID>
    <ID>LongParameterList:PostListEmptyUiState.kt$( postListType: PostListType, isNetworkAvailable: Boolean, isLoadingData: Boolean, isListEmpty: Boolean, isSearchPromptRequired: Boolean, error: ListError?, fetchFirstPage: () -&gt; Unit, newPost: () -&gt; Unit )</ID>
    <ID>LongParameterList:PostListEventListener.kt$PostListEventListener$( private val lifecycle: Lifecycle, private val dispatcher: Dispatcher, private val bgDispatcher: CoroutineDispatcher, private val postStore: PostStore, private val site: SiteModel, private val postActionHandler: PostActionHandler, private val handlePostUpdatedWithoutError: () -&gt; Unit, private val handlePostUploadedWithoutError: (LocalId) -&gt; Unit, private val triggerPostUploadAction: (PostUploadAction) -&gt; Unit, private val invalidateUploadStatus: (List&lt;Int&gt;) -&gt; Unit, private val invalidateFeaturedMedia: (List&lt;Long&gt;) -&gt; Unit, private val triggerPreviewStateUpdate: (PostListRemotePreviewState, PostInfoType) -&gt; Unit, private val isRemotePreviewingFromPostsList: () -&gt; Boolean, private val hasRemoteAutoSavePreviewError: () -&gt; Boolean )</ID>
    <ID>LongParameterList:PostListEventListener.kt$PostListEventListener.Factory$( lifecycle: Lifecycle, dispatcher: Dispatcher, bgDispatcher: CoroutineDispatcher, postStore: PostStore, site: SiteModel, postActionHandler: PostActionHandler, handlePostUpdatedWithoutError: () -&gt; Unit, handlePostUploadedWithoutError: (LocalId) -&gt; Unit, triggerPostUploadAction: (PostUploadAction) -&gt; Unit, invalidateUploadStatus: (List&lt;Int&gt;) -&gt; Unit, invalidateFeaturedMedia: (List&lt;Long&gt;) -&gt; Unit, triggerPreviewStateUpdate: (PostListRemotePreviewState, PostInfoType) -&gt; Unit, isRemotePreviewingFromPostsList: () -&gt; Boolean, hasRemoteAutoSavePreviewError: () -&gt; Boolean )</ID>
    <ID>LongParameterList:PostListItemUiStateHelper.kt$PostListItemUiStateHelper$( authorFilterSelection: AuthorFilterSelection, post: PostModel, site: SiteModel, unhandledConflicts: Boolean, hasAutoSave: Boolean, capabilitiesToPublish: Boolean, statsSupported: Boolean, featuredImageUrl: String?, formattedDate: String, performingCriticalAction: Boolean, isSearch: Boolean, uploadStatusTracker: PostModelUploadStatusTracker, onAction: (PostModel, PostListButtonType, AnalyticsTracker.Stat) -&gt; Unit )</ID>
    <ID>LongParameterList:PostListItemUiStateHelper.kt$PostListItemUiStateHelper$( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, hasUnhandledConflicts: Boolean, hasAutoSave: Boolean )</ID>
    <ID>LongParameterList:PostListItemUiStateHelper.kt$PostListItemUiStateHelper$( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, siteHasCapabilitiesToPublish: Boolean, statsSupported: Boolean )</ID>
    <ID>LongParameterList:PostListMainViewModel.kt$PostListMainViewModel$( private val dispatcher: Dispatcher, private val postStore: PostStore, private val accountStore: AccountStore, uploadActionUseCase: UploadActionUseCase, uploadStore: UploadStore, mediaStore: MediaStore, private val networkUtilsWrapper: NetworkUtilsWrapper, private val prefs: AppPrefsWrapper, private val postListEventListenerFactory: PostListEventListener.Factory, private val previewStateHelper: PreviewStateHelper, private val analyticsTracker: AnalyticsTrackerWrapper, private val savePostToDbUseCase: SavePostToDbUseCase, private val wpStoriesFeatureConfig: WPStoriesFeatureConfig, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val uploadStarter: UploadStarter )</ID>
    <ID>LongParameterList:PostListViewModel.kt$PostListViewModel$( private val dispatcher: Dispatcher, private val listStore: ListStore, private val postStore: PostStore, private val accountStore: AccountStore, private val listItemUiStateHelper: PostListItemUiStateHelper, private val networkUtilsWrapper: NetworkUtilsWrapper, private val uploadStarter: UploadStarter, private val readerUtilsWrapper: ReaderUtilsWrapper, private val uploadUtilsWrapper: UploadUtilsWrapper, @Named(UI_THREAD) private val uiDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, connectionStatus: LiveData&lt;ConnectionStatus&gt; )</ID>
    <ID>LongParameterList:PostListViewModelConnector.kt$PostListViewModelConnector$( val site: SiteModel, val postListType: PostListType, val postActionHandler: PostActionHandler, val doesPostHaveUnhandledConflict: (PostModel) -&gt; Boolean, val hasAutoSave: (PostModel) -&gt; Boolean, val postFetcher: PostFetcher, val uploadStatusTracker: PostModelUploadStatusTracker, private val getFeaturedImageUrl: (site: SiteModel, featuredImageId: Long) -&gt; String? )</ID>
    <ID>LongParameterList:PostMonthsAndYearsUseCase.kt$PostMonthsAndYearsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val statsSiteProvider: StatsSiteProvider, private val statsPostProvider: StatsPostProvider, private val postDetailStore: PostDetailStore, private val postDetailMapper: PostDetailMapper, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:PostPageListLabelColorUseCase.kt$PostPageListLabelColorUseCase$( postStatus: PostStatus, isLocalDraft: Boolean, isLocallyChanged: Boolean, uploadUiState: PostUploadUiState, hasUnhandledConflicts: Boolean, hasAutoSave: Boolean )</ID>
    <ID>LongParameterList:PostRecentWeeksUseCase.kt$PostRecentWeeksUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val statsSiteProvider: StatsSiteProvider, private val statsPostProvider: StatsPostProvider, private val postDetailStore: PostDetailStore, private val postDetailMapper: PostDetailMapper, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:PostsAndPagesUseCase.kt$PostsAndPagesUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val postsAndPageViewsStore: PostAndPageViewsStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:PostsAndPagesUseCase.kt$PostsAndPagesUseCase.PostsAndPagesUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val postsAndPageViewsStore: PostAndPageViewsStore, private val selectedDateProvider: SelectedDateProvider, private val statsSiteProvider: StatsSiteProvider, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val analyticsTracker: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:PrepublishingHomeViewModel.kt$PrepublishingHomeViewModel$( private val getPostTagsUseCase: GetPostTagsUseCase, private val postSettingsUtils: PostSettingsUtils, private val getButtonUiStateUseCase: GetButtonUiStateUseCase, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper, private val storyRepositoryWrapper: StoryRepositoryWrapper, private val updateStoryPostTitleUseCase: UpdateStoryPostTitleUseCase, private val getCategoriesUseCase: GetCategoriesUseCase, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:PromoDialog.kt$PromoDialog$( tag: String, title: String, message: String, positiveButtonLabel: String, @DrawableRes drawableResId: Int = UNDEFINED_RES_ID, negativeButtonLabel: String = "", linkLabel: String = "", neutralButtonLabel: String = "" )</ID>
    <ID>LongParameterList:PublicizeUseCase.kt$PublicizeUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val publicizeStore: PublicizeStore, private val statsSiteProvider: StatsSiteProvider, private val mapper: ServiceMapper, private val analyticsTracker: AnalyticsTrackerWrapper, private val popupMenuHandler: ItemPopupMenuHandler, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:PublicizeUseCase.kt$PublicizeUseCase.PublicizeUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val publicizeStore: PublicizeStore, private val statsSiteProvider: StatsSiteProvider, private val mapper: ServiceMapper, private val analyticsTracker: AnalyticsTrackerWrapper, private val popupMenuHandler: ItemPopupMenuHandler )</ID>
    <ID>LongParameterList:QuickStartRepository.kt$QuickStartRepository$( @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val quickStartStore: QuickStartStore, private val quickStartUtils: QuickStartUtilsWrapper, private val selectedSiteRepository: SelectedSiteRepository, private val resourceProvider: ResourceProvider, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper, private val dispatcher: Dispatcher, private val eventBus: EventBusWrapper, private val appPrefsWrapper: AppPrefsWrapper )</ID>
    <ID>LongParameterList:QuickStartUtils.kt$QuickStartUtils.Companion$( quickStartStore: QuickStartStore, task: QuickStartTask, dispatcher: Dispatcher, site: SiteModel, quickStartEvent: QuickStartEvent? = null, context: Context? )</ID>
    <ID>LongParameterList:ReaderDiscoverDataProvider.kt$ReaderDiscoverDataProvider$( @Named(IO_THREAD) private val ioDispatcher: CoroutineDispatcher, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, private val eventBusWrapper: EventBusWrapper, private val readerTagWrapper: ReaderTagWrapper, private val getDiscoverCardsUseCase: GetDiscoverCardsUseCase, private val shouldAutoUpdateTagUseCase: ShouldAutoUpdateTagUseCase, private val fetchDiscoverCardsUseCase: FetchDiscoverCardsUseCase )</ID>
    <ID>LongParameterList:ReaderDiscoverViewModel.kt$ReaderDiscoverViewModel$( private val postUiStateBuilder: ReaderPostUiStateBuilder, private val readerPostMoreButtonUiStateBuilder: ReaderPostMoreButtonUiStateBuilder, private val readerPostCardActionsHandler: ReaderPostCardActionsHandler, private val readerDiscoverDataProvider: ReaderDiscoverDataProvider, private val reblogUseCase: ReblogUseCase, private val readerUtilsWrapper: ReaderUtilsWrapper, private val appPrefsWrapper: AppPrefsWrapper, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper, displayUtilsWrapper: DisplayUtilsWrapper, private val getFollowedTagsUseCase: GetFollowedTagsUseCase, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(IO_THREAD) private val ioDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:ReaderPostCardActionsHandler.kt$ReaderPostCardActionsHandler$( private val analyticsTrackerWrapper: AnalyticsTrackerWrapper, private val reblogUseCase: ReblogUseCase, private val bookmarkUseCase: ReaderPostBookmarkUseCase, private val followUseCase: ReaderSiteFollowUseCase, private val blockBlogUseCase: BlockBlogUseCase, private val likeUseCase: PostLikeUseCase, private val siteNotificationsUseCase: ReaderSiteNotificationsUseCase, private val undoBlockBlogUseCase: UndoBlockBlogUseCase, private val fetchSiteUseCase: ReaderFetchSiteUseCase, private val appPrefsWrapper: AppPrefsWrapper, private val dispatcher: Dispatcher, private val resourceProvider: ResourceProvider, private val htmlMessageUtils: HtmlMessageUtils, private val appRatingDialogWrapper: AppRatingDialogWrapper, private val seenStatusToggleUseCase: ReaderSeenStatusToggleUseCase, private val readerBlogTableWrapper: ReaderBlogTableWrapper, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:ReaderPostDetailFragment.kt$ReaderPostDetailFragment.Companion$( isFeed: Boolean, blogId: Long, postId: Long, directOperation: DirectOperation?, commentId: Int, interceptedUri: String?, postListType: ReaderPostListType?, postSlugsResolutionUnderway: Boolean )</ID>
    <ID>LongParameterList:ReaderPostDetailUiStateBuilder.kt$ReaderPostDetailUiStateBuilder$( post: ReaderPost, moreMenuItems: List&lt;SecondaryAction&gt;? = null, onButtonClicked: (Long, Long, ReaderPostCardActionType) -&gt; Unit, onBlogSectionClicked: (Long, Long) -&gt; Unit, onFollowClicked: () -&gt; Unit, onTagItemClicked: (String) -&gt; Unit )</ID>
    <ID>LongParameterList:ReaderPostDetailViewModel.kt$ReaderPostDetailViewModel$( private val readerPostCardActionsHandler: ReaderPostCardActionsHandler, private val readerUtilsWrapper: ReaderUtilsWrapper, private val readerPostTableWrapper: ReaderPostTableWrapper, private val readerPostMoreButtonUiStateBuilder: ReaderPostMoreButtonUiStateBuilder, private val postDetailUiStateBuilder: ReaderPostDetailUiStateBuilder, private val reblogUseCase: ReblogUseCase, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(IO_THREAD) private val ioDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:ReaderPostUiStateBuilder.kt$ReaderPostUiStateBuilder$( post: ReaderPost, isDiscover: Boolean = false, photonWidth: Int, photonHeight: Int, postListType: ReaderPostListType, onButtonClicked: (Long, Long, ReaderPostCardActionType) -&gt; Unit, onItemClicked: (Long, Long) -&gt; Unit, onItemRendered: (ReaderCardUiState) -&gt; Unit, onDiscoverSectionClicked: (Long, Long) -&gt; Unit, onMoreButtonClicked: (ReaderPostUiState) -&gt; Unit, onMoreDismissed: (ReaderPostUiState) -&gt; Unit, onVideoOverlayClicked: (Long, Long) -&gt; Unit, onPostHeaderViewClicked: (Long, Long) -&gt; Unit, onTagItemClicked: (String) -&gt; Unit, moreMenuItems: List&lt;SecondaryAction&gt;? = null )</ID>
    <ID>LongParameterList:ReaderPostUiStateBuilder.kt$ReaderPostUiStateBuilder$( private val accountStore: AccountStore, private val urlUtilsWrapper: UrlUtilsWrapper, private val gravatarUtilsWrapper: GravatarUtilsWrapper, private val dateTimeUtilsWrapper: DateTimeUtilsWrapper, private val readerImageScannerProvider: ReaderImageScannerProvider, private val readerUtilsWrapper: ReaderUtilsWrapper, private val readerPostTagsUiStateBuilder: ReaderPostTagsUiStateBuilder, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:ReaderTagRepository.kt$ReaderTagRepository$( @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, @Named(IO_THREAD) private val ioDispatcher: CoroutineDispatcher, private val readerUtilsWrapper: ReaderUtilsWrapper, private val fetchInterestTagUseCase: FetchInterestTagsUseCase, private val followInterestTagsUseCase: FollowInterestTagsUseCase, private val fetchFollowedTagUseCase: FetchFollowedTagsUseCase, private val getFollowedTagsUseCase: GetFollowedTagsUseCase, private val shouldAutoUpdateTagUseCase: ShouldAutoUpdateTagUseCase, private val readerTagTableWrapper: ReaderTagTableWrapper )</ID>
    <ID>LongParameterList:ReaderViewModel.kt$ReaderViewModel$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val appPrefsWrapper: AppPrefsWrapper, private val dateProvider: DateProvider, private val loadReaderTabsUseCase: LoadReaderTabsUseCase, private val readerTracker: ReaderTracker, private val accountStore: AccountStore // todo: annnmarie removed this private val getFollowedTagsUseCase: GetFollowedTagsUseCase )</ID>
    <ID>LongParameterList:ReferrersUseCase.kt$ReferrersUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val referrersStore: ReferrersStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode, private val popupMenuHandler: ReferrerPopupMenuHandler )</ID>
    <ID>LongParameterList:ReferrersUseCase.kt$ReferrersUseCase.ReferrersUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val referrersStore: ReferrersStore, private val statsSiteProvider: StatsSiteProvider, private val selectedDateProvider: SelectedDateProvider, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val analyticsTracker: AnalyticsTrackerWrapper, private val popupMenuHandler: ReferrerPopupMenuHandler )</ID>
    <ID>LongParameterList:RestoreViewModel.kt$RestoreViewModel$( private val wizardManager: WizardManager&lt;RestoreStep&gt;, private val availableItemsProvider: JetpackAvailableItemsProvider, private val getActivityLogItemUseCase: GetActivityLogItemUseCase, private val stateListItemBuilder: RestoreStateListItemBuilder, private val postRestoreUseCase: PostRestoreUseCase, private val getRestoreStatusUseCase: GetRestoreStatusUseCase, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:ScanStateListItemsBuilder.kt$ScanStateListItemsBuilder$( model: ScanStateModel, site: SiteModel, fixingThreatIds: List&lt;Long&gt;, onScanButtonClicked: () -&gt; Unit, onFixAllButtonClicked: () -&gt; Unit, onThreatItemClicked: (threatId: Long) -&gt; Unit, onHelpClicked: () -&gt; Unit )</ID>
    <ID>LongParameterList:ScanStateListItemsBuilder.kt$ScanStateListItemsBuilder$( threats: List&lt;ThreatModel&gt;, site: SiteModel, onScanButtonClicked: () -&gt; Unit, onFixAllButtonClicked: () -&gt; Unit, onThreatItemClicked: (threatId: Long) -&gt; Unit, onHelpClicked: () -&gt; Unit )</ID>
    <ID>LongParameterList:ScanViewModel.kt$ScanViewModel$( private val scanStateListItemsBuilder: ScanStateListItemsBuilder, private val fetchScanStateUseCase: FetchScanStateUseCase, private val startScanUseCase: StartScanUseCase, private val fixThreatsUseCase: FixThreatsUseCase, private val fetchFixThreatsStatusUseCase: FetchFixThreatsStatusUseCase, private val scanStore: ScanStore, private val scanTracker: ScanTracker, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:SearchTermsUseCase.kt$SearchTermsUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: SearchTermsStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:SearchTermsUseCase.kt$SearchTermsUseCase.SearchTermsUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: SearchTermsStore, private val selectedDateProvider: SelectedDateProvider, private val statsSiteProvider: StatsSiteProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val statsUtils: StatsUtils, private val contentDescriptionHelper: ContentDescriptionHelper )</ID>
    <ID>LongParameterList:SiteCreationDomainsViewModel.kt$SiteCreationDomainsViewModel$( private val networkUtils: NetworkUtilsWrapper, private val dispatcher: Dispatcher, private val domainSanitizer: SiteCreationDomainSanitizer, private val fetchDomainsUseCase: FetchDomainsUseCase, private val tracker: SiteCreationTracker, private val homePagePickerFeatureConfig: HomePagePickerFeatureConfig, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:SiteInfoBlockBuilder.kt$SiteInfoBlockBuilder$( site: SiteModel, showSiteIconProgressBar: Boolean, titleClick: () -&gt; Unit, iconClick: () -&gt; Unit, urlClick: () -&gt; Unit, switchSiteClick: () -&gt; Unit, showUpdateSiteTitleFocusPoint: Boolean, showUploadSiteIconFocusPoint: Boolean )</ID>
    <ID>LongParameterList:SiteItemsBuilder.kt$SiteItemsBuilder$( site: SiteModel, onClick: (ListItemAction) -&gt; Unit, isBackupAvailable: Boolean = false, isScanAvailable: Boolean = false, showViewSiteFocusPoint: Boolean = false, showEnablePostSharingFocusPoint: Boolean = false, showExplorePlansFocusPoint: Boolean = false )</ID>
    <ID>LongParameterList:SitePreviewViewModel.kt$SitePreviewViewModel$( private val dispatcher: Dispatcher, private val siteStore: SiteStore, private val quickStartStore: QuickStartStore, private val fetchWpComSiteUseCase: FetchWpComSiteUseCase, private val networkUtils: NetworkUtilsWrapper, private val urlUtils: UrlUtilsWrapper, private val tracker: SiteCreationTracker, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:SiteSettingsInterfaceWrapper.kt$SiteSettingsInterfaceWrapper.Factory$( site: SiteModel, onSaveError: ((error: Exception?) -&gt; Unit)? = null, onFetchError: ((error: Exception?) -&gt; Unit)? = null, onSettingsUpdated: (() -&gt; Unit)? = null, onSettingsSaved: (() -&gt; Unit)? = null, onCredentialsValidated: ((error: Exception?) -&gt; Unit)? = null )</ID>
    <ID>LongParameterList:StatsDetailActivity.kt$StatsDetailActivity.Companion$( context: Context, site: SiteModel, postId: Long, postType: String, postTitle: String, postUrl: String? )</ID>
    <ID>LongParameterList:StatsModule.kt$StatsModule$( allTimeStatsUseCase: AllTimeStatsUseCase, latestPostSummaryUseCase: LatestPostSummaryUseCase, todayStatsUseCase: TodayStatsUseCase, followersUseCaseFactory: FollowersUseCaseFactory, commentsUseCase: CommentsUseCase, mostPopularInsightsUseCase: MostPopularInsightsUseCase, tagsAndCategoriesUseCaseFactory: TagsAndCategoriesUseCaseFactory, publicizeUseCaseFactory: PublicizeUseCaseFactory, postingActivityUseCase: PostingActivityUseCase, followerTotalsUseCase: FollowerTotalsUseCase, annualSiteStatsUseCaseFactory: AnnualSiteStatsUseCaseFactory, managementControlUseCase: ManagementControlUseCase, managementNewsCardUseCase: ManagementNewsCardUseCase )</ID>
    <ID>LongParameterList:StatsModule.kt$StatsModule$( followersUseCaseFactory: FollowersUseCaseFactory, tagsAndCategoriesUseCaseFactory: TagsAndCategoriesUseCaseFactory, publicizeUseCaseFactory: PublicizeUseCaseFactory, postMonthsAndYearsUseCaseFactory: PostMonthsAndYearsUseCaseFactory, postAverageViewsPerDayUseCaseFactory: PostAverageViewsPerDayUseCaseFactory, postRecentWeeksUseCaseFactory: PostRecentWeeksUseCaseFactory, annualSiteStatsUseCaseFactory: AnnualSiteStatsUseCaseFactory )</ID>
    <ID>LongParameterList:StatsModule.kt$StatsModule$( postsAndPagesUseCaseFactory: PostsAndPagesUseCaseFactory, referrersUseCaseFactory: ReferrersUseCaseFactory, clicksUseCaseFactory: ClicksUseCaseFactory, countryViewsUseCaseFactory: CountryViewsUseCaseFactory, videoPlaysUseCaseFactory: VideoPlaysUseCaseFactory, searchTermsUseCaseFactory: SearchTermsUseCaseFactory, authorsUseCaseFactory: AuthorsUseCaseFactory, overviewUseCaseFactory: OverviewUseCaseFactory, fileDownloadsUseCaseFactory: FileDownloadsUseCaseFactory )</ID>
    <ID>LongParameterList:StatsModule.kt$StatsModule$( statsStore: StatsStore, @Named(BG_THREAD) bgDispatcher: CoroutineDispatcher, @Named(UI_THREAD) mainDispatcher: CoroutineDispatcher, statsSiteProvider: StatsSiteProvider, @Named(BLOCK_DETAIL_USE_CASES) useCases: List&lt;@JvmSuppressWildcards BaseStatsUseCase&lt;*, *&gt;&gt;, uiModelMapper: UiModelMapper )</ID>
    <ID>LongParameterList:StatsModule.kt$StatsModule$( statsStore: StatsStore, @Named(BG_THREAD) bgDispatcher: CoroutineDispatcher, @Named(UI_THREAD) mainDispatcher: CoroutineDispatcher, statsSiteProvider: StatsSiteProvider, @Named(BLOCK_INSIGHTS_USE_CASES) useCases: List&lt;@JvmSuppressWildcards BaseStatsUseCase&lt;*, *&gt;&gt;, uiModelMapper: UiModelMapper )</ID>
    <ID>LongParameterList:StatsModule.kt$StatsModule$( statsStore: StatsStore, @Named(BG_THREAD) bgDispatcher: CoroutineDispatcher, @Named(UI_THREAD) mainDispatcher: CoroutineDispatcher, statsSiteProvider: StatsSiteProvider, @Named(GRANULAR_USE_CASE_FACTORIES) useCasesFactories: List&lt;@JvmSuppressWildcards GranularUseCaseFactory&gt;, uiModelMapper: UiModelMapper )</ID>
    <ID>LongParameterList:StatsViewAllActivity.kt$StatsViewAllActivity.Companion$( context: Context, statsType: StatsViewType, granularity: StatsGranularity? = null, selectedDate: SelectedDate? = null, selectedTab: Int? = null, localSiteId: Int )</ID>
    <ID>LongParameterList:StatsViewModel.kt$StatsViewModel$( @Named(LIST_STATS_USE_CASES) private val listUseCases: Map&lt;StatsSection, BaseListUseCase&gt;, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, private val selectedDateProvider: SelectedDateProvider, private val statsSectionManager: SelectedSectionManager, private val analyticsTracker: AnalyticsTrackerWrapper, private val networkUtilsWrapper: NetworkUtilsWrapper, private val statsSiteProvider: StatsSiteProvider, newsCardHandler: NewsCardHandler )</ID>
    <ID>LongParameterList:StorePostViewModel.kt$StorePostViewModel$( @Named(UI_THREAD) private val uiCoroutineDispatcher: CoroutineDispatcher, private val siteStore: SiteStore, private val postUtils: PostUtilsWrapper, private val uploadService: UploadServiceFacade, private val savePostToDbUseCase: SavePostToDbUseCase, private val networkUtils: NetworkUtilsWrapper, private val dispatcher: Dispatcher )</ID>
    <ID>LongParameterList:StoriesEventListener.kt$StoriesEventListener$( private val dispatcher: Dispatcher, private val mediaStore: MediaStore, private val eventBusWrapper: EventBusWrapper, private val editorMedia: EditorMedia, private val loadStoryFromStoriesPrefsUseCase: LoadStoryFromStoriesPrefsUseCase, private val storiesPrefs: StoriesPrefs, private val storyRepositoryWrapper: StoryRepositoryWrapper )</ID>
    <ID>LongParameterList:StoryMediaSaveUploadBridge.kt$StoryMediaSaveUploadBridge$( private val addLocalMediaToPostUseCase: AddLocalMediaToPostUseCase, private val savePostToDbUseCase: SavePostToDbUseCase, private val storiesPrefs: StoriesPrefs, private val uploadService: UploadServiceFacade, private val networkUtils: NetworkUtilsWrapper, private val postUtils: PostUtilsWrapper, private val eventBusWrapper: EventBusWrapper, private val storyRepositoryWrapper: StoryRepositoryWrapper, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:SubFilterViewModel.kt$SubFilterViewModel$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, private val appPrefsWrapper: AppPrefsWrapper, private val subfilterListItemMapper: SubfilterListItemMapper, private val eventBusWrapper: EventBusWrapper, private val accountStore: AccountStore, private val readerTracker: ReaderTracker )</ID>
    <ID>LongParameterList:TagsAndCategoriesUseCase.kt$TagsAndCategoriesUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val tagsStore: TagsStore, private val statsSiteProvider: StatsSiteProvider, private val resourceProvider: ResourceProvider, private val statsUtils: StatsUtils, private val analyticsTracker: AnalyticsTrackerWrapper, private val popupMenuHandler: ItemPopupMenuHandler, private val contentDescriptionHelper: ContentDescriptionHelper, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:TagsAndCategoriesUseCase.kt$TagsAndCategoriesUseCase.TagsAndCategoriesUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val tagsStore: TagsStore, private val statsSiteProvider: StatsSiteProvider, private val resourceProvider: ResourceProvider, private val statsUtils: StatsUtils, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val popupMenuHandler: ItemPopupMenuHandler )</ID>
    <ID>LongParameterList:ThreatDetailsViewModel.kt$ThreatDetailsViewModel$( private val getThreatModelUseCase: GetThreatModelUseCase, private val ignoreThreatUseCase: IgnoreThreatUseCase, private val fixThreatsUseCase: FixThreatsUseCase, private val selectedSiteRepository: SelectedSiteRepository, private val builder: ThreatDetailsListItemsBuilder, private val htmlMessageUtils: HtmlMessageUtils, private val resourceProvider: ResourceProvider, private val scanTracker: ScanTracker )</ID>
    <ID>LongParameterList:ThumbnailViewUtils.kt$ThumbnailViewUtils$( imgThumbnail: ImageView, url: String, isSelected: Boolean, clickAction: ClickAction, toggleAction: ToggleAction, animateSelection: Boolean )</ID>
    <ID>LongParameterList:TodayStatsUseCase.kt$TodayStatsUseCase$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val todayStore: TodayInsightsStore, private val statsSiteProvider: StatsSiteProvider, private val statsWidgetUpdaters: StatsWidgetUpdaters, private val statsUtils: StatsUtils, private val popupMenuHandler: ItemPopupMenuHandler )</ID>
    <ID>LongParameterList:TodayWidgetUpdater.kt$TodayWidgetUpdater$( private val appPrefsWrapper: AppPrefsWrapper, private val siteStore: SiteStore, private val accountStore: AccountStore, private val networkUtilsWrapper: NetworkUtilsWrapper, private val resourceProvider: ResourceProvider, private val widgetUtils: WidgetUtils, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:UploadStarter.kt$UploadStarter$( /** * The Application context */ private val context: Context, private val dispatcher: Dispatcher, private val postStore: PostStore, private val pageStore: PageStore, private val siteStore: SiteStore, private val uploadActionUseCase: UploadActionUseCase, private val tracker: AnalyticsTrackerWrapper, @Named(BG_THREAD) private val bgDispatcher: CoroutineDispatcher, @Named(IO_THREAD) private val ioDispatcher: CoroutineDispatcher, private val uploadServiceFacade: UploadServiceFacade, private val networkUtilsWrapper: NetworkUtilsWrapper, private val connectionStatus: LiveData&lt;ConnectionStatus&gt; )</ID>
    <ID>LongParameterList:UploadUtilsWrapper.kt$UploadUtilsWrapper$( activity: Activity, snackbarAttachView: View, data: Intent, post: PostModel, site: SiteModel, uploadAction: UploadAction, publishPostListener: OnClickListener? )</ID>
    <ID>LongParameterList:UploadUtilsWrapper.kt$UploadUtilsWrapper$( activity: Activity?, snackbarAttachView: View?, isError: Boolean, isFirstTimePublish: Boolean, post: PostModel?, errorMessage: String?, site: SiteModel? )</ID>
    <ID>LongParameterList:UploadUtilsWrapper.kt$UploadUtilsWrapper$( activity: Activity?, snackbarAttachView: View?, isError: Boolean, mediaList: List&lt;MediaModel?&gt;?, site: SiteModel?, messageForUser: String? )</ID>
    <ID>LongParameterList:VideoPlaysUseCase.kt$VideoPlaysUseCase$( statsGranularity: StatsGranularity, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: VideoPlaysStore, statsSiteProvider: StatsSiteProvider, selectedDateProvider: SelectedDateProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val contentDescriptionHelper: ContentDescriptionHelper, private val statsUtils: StatsUtils, private val useCaseMode: UseCaseMode )</ID>
    <ID>LongParameterList:VideoPlaysUseCase.kt$VideoPlaysUseCase.VideoPlaysUseCaseFactory$( @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher, @Named(BG_THREAD) private val backgroundDispatcher: CoroutineDispatcher, private val store: VideoPlaysStore, private val selectedDateProvider: SelectedDateProvider, private val statsSiteProvider: StatsSiteProvider, private val analyticsTracker: AnalyticsTrackerWrapper, private val statsUtils: StatsUtils, private val contentDescriptionHelper: ContentDescriptionHelper )</ID>
    <ID>LongParameterList:ViewsWidgetUpdater.kt$ViewsWidgetUpdater$( private val appPrefsWrapper: AppPrefsWrapper, private val siteStore: SiteStore, private val accountStore: AccountStore, private val networkUtilsWrapper: NetworkUtilsWrapper, private val resourceProvider: ResourceProvider, private val widgetUtils: WidgetUtils, private val analyticsTrackerWrapper: AnalyticsTrackerWrapper )</ID>
    <ID>LongParameterList:WPMainActivityViewModel.kt$WPMainActivityViewModel$( private val featureAnnouncementProvider: FeatureAnnouncementProvider, private val buildConfigWrapper: BuildConfigWrapper, private val appPrefsWrapper: AppPrefsWrapper, private val analyticsTracker: AnalyticsTrackerWrapper, private val wpStoriesFeatureConfig: WPStoriesFeatureConfig, private val mySiteImprovementsFeatureConfig: MySiteImprovementsFeatureConfig, private val quickStartRepository: QuickStartRepository, @Named(UI_THREAD) private val mainDispatcher: CoroutineDispatcher )</ID>
    <ID>LongParameterList:WidgetUtils.kt$WidgetUtils$( appWidgetManager: AppWidgetManager, views: RemoteViews, appWidgetId: Int, networkAvailable: Boolean, hasAccessToken: Boolean, resourceProvider: ResourceProvider, context: Context, widgetType: Class&lt;*&gt; )</ID>
    <ID>LongParameterList:WidgetUtils.kt$WidgetUtils$( appWidgetManager: AppWidgetManager, views: RemoteViews, context: Context, appWidgetId: Int, colorMode: Color, siteId: Int, widgetType: WidgetType, isWideView: Boolean )</ID>
    <ID>LongParameterList:ZendeskHelper.kt$( context: Context, allSites: List&lt;SiteModel&gt;?, origin: Origin?, selectedSite: SiteModel? = null, extraTags: List&lt;String&gt;? = null, zendeskPlanFieldHelper: ZendeskPlanFieldHelper )</ID>
    <ID>LoopWithTooManyJumpStatements:BackupDownloadProgressChecker.kt$BackupDownloadProgressChecker$while (coroutineContext.isActive) { val downloadStatusForSite = activityLogStore.getBackupDownloadStatusForSite(site) if (downloadStatusForSite != null &amp;&amp; downloadStatusForSite.downloadId == downloadId) { if (downloadStatusForSite.progress == null) { result = OnBackupDownloadStatusFetched(FETCH_BACKUP_DOWNLOAD_STATE) break } } result = activityLogStore.fetchBackupDownloadState( FetchBackupDownloadStatePayload( site ) ) if (result.isError) { break } delay(checkDelay) }</ID>
    <ID>LoopWithTooManyJumpStatements:RemoveMediaUseCase.kt$RemoveMediaUseCase$for (mediaId in mediaIds) { if (!TextUtils.isEmpty(mediaId)) { // make sure the MediaModel exists val mediaModel = try { mediaStore.getMediaWithLocalId(Integer.valueOf(mediaId)) ?: continue } catch (e: NumberFormatException) { AppLog.e(AppLog.T.MEDIA, "Invalid media id: $mediaId") continue } // also make sure it's not being uploaded anywhere else (maybe on some other Post, // simultaneously) if (mediaModel.uploadState != null &amp;&amp; mediaUtils.isLocalFile(mediaModel.uploadState.toLowerCase(Locale.ROOT)) &amp;&amp; !uploadService.isPendingOrInProgressMediaUpload(mediaModel)) { dispatcher.dispatch(MediaActionBuilder.newRemoveMediaAction(mediaModel)) } } }</ID>
    <ID>LoopWithTooManyJumpStatements:RewindProgressChecker.kt$RewindProgressChecker$while (coroutineContext.isActive) { val rewindStatusForSite = activityLogStore.getRewindStatusForSite(site) val rewind = rewindStatusForSite?.rewind if (rewind != null &amp;&amp; rewind.restoreId == restoreId) { if (rewind.status == FINISHED) { result = OnRewindStatusFetched(FETCH_REWIND_STATE) break } else if (rewind.status == FAILED) { result = OnRewindStatusFetched(RewindStatusError(GENERIC_ERROR, rewind.reason), FETCH_REWIND_STATE) break } } result = activityLogStore.fetchActivitiesRewind(FetchRewindStatePayload(site)) if (result.isError) { break } delay(checkDelay) }</ID>
    <ID>MagicNumber:ActivityViewHolder.kt$ActivityViewHolder$3</ID>
    <ID>MagicNumber:ActivityViewHolder.kt$ActivityViewHolder$50</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$10</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$100</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$100F</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$10f</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$24</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$25</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$255</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$4</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$5</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$50</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$51</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$8f</ID>
    <ID>MagicNumber:BaseStatsUseCase.kt$BaseStatsUseCase$50</ID>
    <ID>MagicNumber:ColorUnderlineSpan.kt$ColorUnderlineSpan$5f</ID>
    <ID>MagicNumber:ColorUtils.kt$ColorUtils$255</ID>
    <ID>MagicNumber:DateTimeUtilsWrapper.kt$DateTimeUtilsWrapper$1000</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$3</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$4</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$5</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$50</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$6</ID>
    <ID>MagicNumber:DesignPreviewFragment.kt$DesignPreviewFragment$100</ID>
    <ID>MagicNumber:DesignPreviewFragment.kt$DesignPreviewFragment.&lt;no name provided&gt;$250</ID>
    <ID>MagicNumber:DeviceMediaLoader.kt$DeviceMediaLoader$1000</ID>
    <ID>MagicNumber:EditorPhotoPicker.kt$EditorPhotoPicker$0.5f</ID>
    <ID>MagicNumber:EncryptedLogWriter.kt$EncryptedLogWriter$108</ID>
    <ID>MagicNumber:EncryptedLogWriter.kt$EncryptedLogWriter$32</ID>
    <ID>MagicNumber:ExpandableItemViewHolder.kt$ExpandableItemViewHolder$180</ID>
    <ID>MagicNumber:ExpandableItemViewHolder.kt$ExpandableItemViewHolder$180F</ID>
    <ID>MagicNumber:ExpandableItemViewHolder.kt$ExpandableItemViewHolder$200</ID>
    <ID>MagicNumber:FeatureAnnouncementViewModel.kt$FeatureAnnouncementViewModel$1000</ID>
    <ID>MagicNumber:GifPickerActivity.kt$GifPickerActivity$0.75</ID>
    <ID>MagicNumber:GifPickerActivity.kt$GifPickerActivity$3</ID>
    <ID>MagicNumber:GifPickerActivity.kt$GifPickerActivity$4</ID>
    <ID>MagicNumber:ImprovedMySiteFragment.kt$ImprovedMySiteFragment$100</ID>
    <ID>MagicNumber:LargeValueFormatter.kt$LargeValueFormatter$3</ID>
    <ID>MagicNumber:LargeValueFormatter.kt$LargeValueFormatter$5</ID>
    <ID>MagicNumber:LatestPostSummaryMapper.kt$LatestPostSummaryMapper$30</ID>
    <ID>MagicNumber:LoginPrologueFragment.kt$LoginPrologueFragment.&lt;no name provided&gt;$0.25f</ID>
    <ID>MagicNumber:LoginPrologueFragment.kt$LoginPrologueFragment.&lt;no name provided&gt;$0.5f</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$0xffffff</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$100</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$5</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$8</ID>
    <ID>MagicNumber:MediaPickerViewModel.kt$MediaPickerViewModel$100</ID>
    <ID>MagicNumber:MediaPickerViewModel.kt$MediaPickerViewModel$300</ID>
    <ID>MagicNumber:MySiteFragment.kt$MySiteFragment$0.5</ID>
    <ID>MagicNumber:MySiteFragment.kt$MySiteFragment$100</ID>
    <ID>MagicNumber:MySiteFragment.kt$MySiteFragment$4</ID>
    <ID>MagicNumber:MySiteFragment.kt$MySiteFragment$600</ID>
    <ID>MagicNumber:MySiteViewModel.kt$MySiteViewModel$600</ID>
    <ID>MagicNumber:NotificationsListFragmentPage.kt$NotificationsListFragmentPage$1000L</ID>
    <ID>MagicNumber:OverviewMapper.kt$OverviewMapper$100</ID>
    <ID>MagicNumber:OverviewUseCase.kt$OverviewUseCase$86400000.0</ID>
    <ID>MagicNumber:PageItemViewHolder.kt$PageItemViewHolder.PageViewHolder$16</ID>
    <ID>MagicNumber:PageParentAdapter.kt$PageParentAdapter$200</ID>
    <ID>MagicNumber:PageParentFragment.kt$PageParentFragment$8</ID>
    <ID>MagicNumber:PageParentSearchAdapter.kt$PageParentSearchAdapter$200</ID>
    <ID>MagicNumber:PagesFragment.kt$PagesFragment$8</ID>
    <ID>MagicNumber:PluginBrowserViewModel.kt$PluginBrowserViewModel$250</ID>
    <ID>MagicNumber:PostDayViewsMapper.kt$PostDayViewsMapper$100</ID>
    <ID>MagicNumber:PostListItemViewHolder.kt$PostListItemViewHolder.Standard$1000</ID>
    <ID>MagicNumber:PostModelUploadStatusTracker.kt$PostModelUploadStatusTracker$100</ID>
    <ID>MagicNumber:PostingActivityUseCase.kt$PostingActivityUseCase$2</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$10</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$10000</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$60</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$6000</ID>
    <ID>MagicNumber:QuickStartCardViewHolder.kt$QuickStartCardViewHolder$600</ID>
    <ID>MagicNumber:QuickStartItemBuilder.kt$QuickStartItemBuilder$100</ID>
    <ID>MagicNumber:ReaderCommentListViewModel.kt$ReaderCommentListViewModel$300</ID>
    <ID>MagicNumber:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$200</ID>
    <ID>MagicNumber:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$300</ID>
    <ID>MagicNumber:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$401</ID>
    <ID>MagicNumber:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$403</ID>
    <ID>MagicNumber:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$404</ID>
    <ID>MagicNumber:ReaderTagRepository.kt$ReaderTagRepository$5</ID>
    <ID>MagicNumber:RequestThrottler.kt$RequestThrottler$1000L</ID>
    <ID>MagicNumber:RequestThrottler.kt$RequestThrottler$60</ID>
    <ID>MagicNumber:SaveInitialPostUseCase.kt$SaveInitialPostUseCase$1000</ID>
    <ID>MagicNumber:SearchInputWithHeader.kt$SearchInputWithHeader$200</ID>
    <ID>MagicNumber:SiteCreationMainVM.kt$SiteCreationMainVM$3</ID>
    <ID>MagicNumber:StatsDateFormatter.kt$StatsDateFormatter$31</ID>
    <ID>MagicNumber:StatsDateFormatter.kt$StatsDateFormatter$6</ID>
    <ID>MagicNumber:StatsDateFormatter.kt$StatsDateFormatter$60</ID>
    <ID>MagicNumber:StatsFragment.kt$StatsFragment$100</ID>
    <ID>MagicNumber:StatsFragment.kt$StatsFragment$3</ID>
    <ID>MagicNumber:StatsFragment.kt$StatsFragment$4</ID>
    <ID>MagicNumber:StatsSiteProvider.kt$StatsSiteProvider$3</ID>
    <ID>MagicNumber:StatsUtils.kt$100</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$10</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$10.0</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$100</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000_000_000_000L</ID>
    <ID>MagicNumber:StatsViewAllFragment.kt$StatsViewAllFragment$100</ID>
    <ID>MagicNumber:UiHelpers.kt$UiHelpers.Companion$0.8</ID>
    <ID>MagicNumber:UploadWorker.kt$6</ID>
    <ID>MagicNumber:UploadWorker.kt$8</ID>
    <ID>MagicNumber:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$255</ID>
    <ID>MagicNumber:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$255f</ID>
    <ID>MagicNumber:WPTooltipView.kt$WPTooltipView$400</ID>
    <ID>MagicNumber:WPTooltipView.kt$WPTooltipView$90f</ID>
    <ID>MagicNumber:WPWebView.kt$21</ID>
    <ID>MagicNumber:WPWebView.kt$22</ID>
    <ID>MagicNumber:WidgetUtils.kt$WidgetUtils$300</ID>
    <ID>MaxLineLength:AppConfig.kt$AppConfig$*</ID>
    <ID>MaxLineLength:EncryptedLogWriter.kt$EncryptedLogWriter$*</ID>
    <ID>MaxLineLength:FeatureAnnouncementViewModel.kt$FeatureAnnouncementViewModel$?:</ID>
    <ID>MaxLineLength:GifPickerActivity.kt$GifPickerActivity$// Update the "Add" and "Preview" labels to include the number of items. For example, "Add 7" and "Preview 7".</ID>
    <ID>MaxLineLength:GifPickerActivity.kt$GifPickerActivity$// We do not change to labels back to the original text if the number of items go back to zero because that</ID>
    <ID>MaxLineLength:GifPickerActivity.kt$GifPickerActivity$// causes a weird UX. The selection bar is animated to disappear at that time and it looks weird if the labels</ID>
    <ID>MaxLineLength:ImageManager.kt$ImageManager$*</ID>
    <ID>MaxLineLength:MySiteFragment.kt$MySiteFragment$private</ID>
    <ID>MaxLineLength:ReaderPostListViewModel.kt$ReaderPostListViewModel$// TODO this is related to tracking time spent in reader - we should move it to the parent but also keep it here for !isTopLevel :(</ID>
    <ID>MaxLineLength:ReaderUtilsWrapper.kt$ReaderUtilsWrapper$*</ID>
    <ID>MaxLineLength:SaveStoryGutenbergBlockUseCase.kt$SaveStoryGutenbergBlockUseCase.&lt;no name provided&gt;$// now replace matching localMediaId with remoteMediaId in the mediaFileObjects, obtain the URLs and replace</ID>
    <ID>MaxLineLength:SiteStoriesHandler.kt$SiteStoriesHandler$// TODO add NotificationType.MEDIA_SAVE_ERROR param later when integrating with WPAndroid</ID>
    <ID>MaxLineLength:StoryComposerActivity.kt$StoryComposerActivity$// if the frame.id is populated and is not a temporary id, this should be an actual MediaModel mediaId so,</ID>
    <ID>MaxLineLength:StoryMediaSaveUploadBridge.kt$StoryMediaSaveUploadBridge.&lt;no name provided&gt;$// WARNING: don't remove this, we need to call the listener no matter what, so save &amp; upload actually happen</ID>
    <ID>MaxLineLength:StoryMediaSaveUploadBridge.kt$StoryMediaSaveUploadBridge.&lt;no name provided&gt;$// here we change the ids on the actual StoryFrameItems, and also update the flattened / composed image</ID>
    <ID>MaxLineLength:TenorProvider.kt$TenorProvider$*</ID>
    <ID>MaxLineLength:WPWebViewUsageCategory.kt$WPWebViewUsageCategory$*</ID>
    <ID>MaxLineLength:XPostsCapabilityChecker.kt$XPostsCapabilityChecker$// suggestions, but because the response will almost always be empty, it's not an expensive call.</ID>
    <ID>MemberNameEqualsClassName:ActivityLogTypeFilterViewModel.kt$ActivityLogTypeFilterViewModel.Action$lateinit var action: (() -&gt; Unit)</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.activitylog.list.EventItemViewHolder.kt:33</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.activitylog.list.EventItemViewHolder.kt:35</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.pages.PageItemViewHolder.kt:252</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.pages.PageItemViewHolder.kt:254</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.pages.PageItemViewHolder.kt:84</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.pages.PageItemViewHolder.kt:86</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.pages.PagesFragment.kt:290</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.posts.PostDatePickerDialogFragment.kt:51</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.posts.PostDatePickerDialogFragment.kt:53</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.posts.PostsListActivity.kt:295</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.posts.PrepublishingHomeViewModel.kt:138</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.posts.prepublishing.visibility.usecases.UpdatePostStatusUseCase.kt:25</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.ReaderPostDetailFragment.kt:1002</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.ReaderPostDetailFragment.kt:1004</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.ReaderPostDetailFragment.kt:874</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.ReaderPostDetailFragment.kt:876</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.ReaderPostDetailFragment.kt:880</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.ReaderPostDetailFragment.kt:882</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.repository.usecases.FetchDiscoverCardsUseCase.kt:26</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.repository.usecases.FetchDiscoverCardsUseCase.kt:28</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.subfilter.SubFilterViewModel.kt:251</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.subfilter.SubFilterViewModel.kt:253</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.usecases.ReaderCommentsFollowUseCase.kt:103</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.reader.usecases.ReaderCommentsFollowUseCase.kt:105</ID>
    <ID>MultiLineIfElse:org.wordpress.android.ui.sitecreation.theme.HomePagePickerViewHolder.kt:37</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.SitePickerViewModel.kt:54</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.SitePickerViewModel.kt:56</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.WPMainActivityViewModel.kt:263</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.WPMainActivityViewModel.kt:265</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.WPMainActivityViewModel.kt:271</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.WPMainActivityViewModel.kt:273</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.WPMainActivityViewModel.kt:278</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.main.WPMainActivityViewModel.kt:280</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.mlp.ModalLayoutPickerViewModel.kt:140</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:309</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:343</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:354</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:376</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:389</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:408</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:419</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:438</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:462</ID>
    <ID>MultiLineIfElse:org.wordpress.android.viewmodel.pages.PageListViewModel.kt:464</ID>
    <ID>NestedBlockDepth:AllTimeWidgetBlockListViewModel.kt$AllTimeWidgetBlockListViewModel$override fun onDataSetChanged(context: Context)</ID>
    <ID>NestedBlockDepth:AllTimeWidgetListViewModel.kt$AllTimeWidgetListViewModel$fun onDataSetChanged(onError: (appWidgetId: Int) -&gt; Unit)</ID>
    <ID>NestedBlockDepth:CreatePageListItemActionsUseCase.kt$CreatePageListItemActionsUseCase$fun setupPageActions( listType: PageListType, uploadUiState: PostUploadUiState, siteModel: SiteModel, remoteId: Long ): Set&lt;Action&gt;</ID>
    <ID>NestedBlockDepth:LoadStoryFromStoriesPrefsUseCase.kt$LoadStoryFromStoriesPrefsUseCase$private fun loadOrReCreateStoryFromStoriesPrefs(site: SiteModel, mediaIds: ArrayList&lt;String&gt;): ReCreateStoryResult</ID>
    <ID>NestedBlockDepth:MeFragment.kt$MeFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>NestedBlockDepth:MediaPickerActivity.kt$MediaPickerActivity$override fun onActivityResult( requestCode: Int, resultCode: Int, data: Intent? )</ID>
    <ID>NestedBlockDepth:MySiteFragment.kt$MySiteFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>NestedBlockDepth:PublicizeErrorDialogFragment.kt$PublicizeErrorDialogFragment$override fun onCreateDialog(savedInstanceState: Bundle?): Dialog</ID>
    <ID>NestedBlockDepth:PublishNotificationReceiverViewModel.kt$PublishNotificationReceiverViewModel$fun loadNotification(notificationId: Int): NotificationUiModel?</ID>
    <ID>NestedBlockDepth:ReaderDiscoverLogic.kt$ReaderDiscoverLogic$private fun createSimplifiedRecommendedBlogsCardJson(originalCardJson: JSONObject): JSONObject</ID>
    <ID>NestedBlockDepth:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$private fun onRequestFailure(statusCode: Int)</ID>
    <ID>NestedBlockDepth:StoriesPrefs.kt$StoriesPrefs$private fun checkSlideOriginalBackgroundMediaExists(storyFrameItem: StoryFrameItem?): Boolean</ID>
    <ID>NestedBlockDepth:StoryComposerActivity.kt$StoryComposerActivity$override fun onStorySaveButtonPressed()</ID>
    <ID>NestedBlockDepth:StoryComposerActivity.kt$StoryComposerActivity$private fun buildStoryMediaFileDataListFromStoryFrameIndexes( storyIndex: StoryIndex ): ArrayList&lt;StoryMediaFileData&gt;</ID>
    <ID>NestedBlockDepth:ThreatDetailsListItemsBuilder.kt$ThreatDetailsListItemsBuilder$private fun buildActionButtons( threatModel: ThreatModel, onFixThreatButtonClicked: () -&gt; Unit, onGetFreeEstimateButtonClicked: () -&gt; Unit, onIgnoreThreatButtonClicked: () -&gt; Unit )</ID>
    <ID>NestedBlockDepth:TodayWidgetBlockListViewModel.kt$TodayWidgetBlockListViewModel$override fun onDataSetChanged(context: Context)</ID>
    <ID>NestedBlockDepth:TodayWidgetListViewModel.kt$TodayWidgetListViewModel$fun onDataSetChanged(onError: (appWidgetId: Int) -&gt; Unit)</ID>
    <ID>NestedBlockDepth:ViewsWidgetListViewModel.kt$ViewsWidgetListViewModel$fun onDataSetChanged(onError: (appWidgetId: Int) -&gt; Unit)</ID>
    <ID>NestedBlockDepth:WPMainActivityViewModel.kt$WPMainActivityViewModel$private fun onCreateActionClicked(actionType: ActionType)</ID>
    <ID>ProtectedMemberInFinalClass:PageParentFragment.kt$PageParentFragment$protected var job: Job = Job()</ID>
    <ID>ProtectedMemberInFinalClass:PageParentSearchFragment.kt$PageParentSearchFragment$protected var job: Job = Job()</ID>
    <ID>ReturnCount:AppConfig.kt$AppConfig$ fun isEnabled(feature: FeatureConfig): Boolean</ID>
    <ID>ReturnCount:BarChartViewHolder.kt$BarChartViewHolder$private fun roundUp(input: Float): Float</ID>
    <ID>ReturnCount:BlockDiffCallback.kt$BlockDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ReturnCount:DomainPhoneNumberUtils.kt$DomainPhoneNumberUtils.Companion$fun getPhoneNumberPrefixFromFullPhoneNumber(phoneNumber: String?): String?</ID>
    <ID>ReturnCount:DomainPhoneNumberUtils.kt$DomainPhoneNumberUtils.Companion$fun getPhoneNumberWithoutPrefix(phoneNumber: String?): String?</ID>
    <ID>ReturnCount:DomainRegistrationHandler.kt$DomainRegistrationHandler$override fun buildSource(coroutineScope: CoroutineScope, siteId: Int): LiveData&lt;DomainCreditAvailable&gt;</ID>
    <ID>ReturnCount:FeatureAnnouncementListAdapter.kt$FeatureAnnouncementListAdapter$override fun getItemCount(): Int</ID>
    <ID>ReturnCount:FeaturedImageHelper.kt$FeaturedImageHelper$fun createCurrentFeaturedImageState(site: SiteModel, post: PostImmutableModel): FeaturedImageData</ID>
    <ID>ReturnCount:FeaturedImageHelper.kt$FeaturedImageHelper$fun queueFeaturedImageForUpload( localPostId: Int, site: SiteModel, uri: Uri, mimeType: String? ): EnqueueFeaturedImageResult</ID>
    <ID>ReturnCount:FollowedBlogsProvider.kt$FollowedBlogsProvider$fun getAllFollowedBlogs(query: String?): List&lt;PreferenceModel&gt;</ID>
    <ID>ReturnCount:ImageManager.kt$ImageManager$ private fun Context?.isAvailable(): Boolean</ID>
    <ID>ReturnCount:ImprovedMySiteFragment.kt$ImprovedMySiteFragment$override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?)</ID>
    <ID>ReturnCount:LoadStoryFromStoriesPrefsUseCase.kt$LoadStoryFromStoriesPrefsUseCase$fun areAllStorySlidesEditable(site: SiteModel, mediaIds: ArrayList&lt;String&gt;): Boolean</ID>
    <ID>ReturnCount:MediaPickerAdapterDiffCallback.kt$MediaPickerAdapterDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ReturnCount:MySiteFragment.kt$MySiteFragment$private fun startSiteIconUpload(filePath: String)</ID>
    <ID>ReturnCount:MySiteViewModel.kt$MySiteViewModel$private fun startSiteIconUpload(filePath: String)</ID>
    <ID>ReturnCount:PageListViewModel.kt$PageListViewModel$private fun getFeaturedImageUrl(featuredImageId: Long): String?</ID>
    <ID>ReturnCount:PageParentFragment.kt$PageParentFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:ParseDiscoverCardsJsonUseCase.kt$ParseDiscoverCardsJsonUseCase$fun parseInterestCard(interestCardJson: JSONObject?): ReaderTagList</ID>
    <ID>ReturnCount:PhotoPickerAdapterDiffCallback.kt$PhotoPickerAdapterDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ReturnCount:PostListAdapter.kt$&lt;no name provided&gt;$override fun areContentsTheSame(oldItem: PostListItemType, newItem: PostListItemType): Boolean</ID>
    <ID>ReturnCount:PostListAdapter.kt$&lt;no name provided&gt;$override fun areItemsTheSame(oldItem: PostListItemType, newItem: PostListItemType): Boolean</ID>
    <ID>ReturnCount:PostListFeaturedImageTracker.kt$PostListFeaturedImageTracker$fun getFeaturedImageUrl(site: SiteModel, featuredImageId: Long): String?</ID>
    <ID>ReturnCount:PostsListActivity.kt$PostsListActivity$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:PublishNotificationReceiverViewModel.kt$PublishNotificationReceiverViewModel$fun loadNotification(notificationId: Int): NotificationUiModel?</ID>
    <ID>ReturnCount:QuickStartUtils.kt$QuickStartUtils.Companion$ @JvmStatic fun getNextUncompletedQuickStartTask( quickStartStore: QuickStartStore, siteId: Long, taskType: QuickStartTaskType ): QuickStartTask?</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$/* * returns True if the passed URL should be opened in the external browser app */ private fun shouldOpenExternal(url: String): Boolean</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$private fun doLikePost()</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$private fun showPhotoViewer( imageUrl: String, sourceView: View, startX: Int, startY: Int ): Boolean</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment.ShowPostTask$override fun doInBackground(vararg params: Void): Boolean?</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment.ShowPostTask$override fun onPostExecute(result: Boolean)</ID>
    <ID>ReturnCount:ReaderSeenStatusToggleUseCase.kt$ReaderSeenStatusToggleUseCase$private suspend fun markPostAsSeen(post: ReaderPost, actionSource: ReaderPostSeenToggleSource): PostSeenState</ID>
    <ID>ReturnCount:ReaderSeenStatusToggleUseCase.kt$ReaderSeenStatusToggleUseCase$private suspend fun markPostAsUnseen(post: ReaderPost, actionSource: ReaderPostSeenToggleSource): PostSeenState</ID>
    <ID>ReturnCount:ReaderSiteNotificationsUseCase.kt$ReaderSiteNotificationsUseCase$suspend fun toggleNotification(blogId: Long): SiteNotificationState</ID>
    <ID>ReturnCount:RemotePreviewLogicHelper.kt$RemotePreviewLogicHelper$fun runPostPreviewLogic( activity: Activity, site: SiteModel, post: PostImmutableModel, helperFunctions: RemotePreviewHelperFunctions ): PreviewLogicOperationResult</ID>
    <ID>ReturnCount:StoriesMediaPickerResultHandler.kt$StoriesMediaPickerResultHandler$@Deprecated("Use rather the other handle method and the live data navigation.") fun handleMediaPickerResultForStories( data: Intent, activity: Activity?, selectedSite: SiteModel?, source: PagePostCreationSourcesDetail ): Boolean</ID>
    <ID>ReturnCount:StoriesMediaPickerResultHandler.kt$StoriesMediaPickerResultHandler$private fun buildNavigationAction( data: Intent, selectedSite: SiteModel, source: PagePostCreationSourcesDetail ): SiteNavigationAction?</ID>
    <ID>ReturnCount:StoriesPrefs.kt$StoriesPrefs$private fun checkSlideOriginalBackgroundMediaExists(storyFrameItem: StoryFrameItem?): Boolean</ID>
    <ID>ReturnCount:StoriesPrefs.kt$StoriesPrefs$private fun isUriAccessible(uri: Uri): Boolean</ID>
    <ID>ReturnCount:UploadActionUseCase.kt$UploadActionUseCase$fun getAutoUploadAction(post: PostImmutableModel, site: SiteModel): UploadAction</ID>
    <ID>ReturnCount:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$private fun endsWithDelimiter(string: String): Boolean</ID>
    <ID>ReturnCount:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$private fun removeDelimiterFromItemIfPresent(item: String?): String?</ID>
    <ID>ReturnCount:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$private fun removeLastEnteredItem(): Boolean</ID>
    <ID>SpreadOperator:PageListEventListener.kt$PageListEventListener$(*event.mediaList.map { LocalId(it.localPostId) }.toTypedArray())</ID>
    <ID>SpreadOperator:PageListEventListener.kt$PageListEventListener$(*postsToRefresh.map { LocalId(it.id) }.toTypedArray())</ID>
    <ID>SpreadOperator:PageListViewModel.kt$PageListViewModel$(*event.mediaList.map { it.mediaId }.toLongArray())</ID>
    <ID>SpreadOperator:PostListEventListener.kt$PostListEventListener$(*event.mediaList.map { it.localPostId }.toIntArray())</ID>
    <ID>SpreadOperator:PostListEventListener.kt$PostListEventListener$(*event.mediaList.map { it.mediaId }.toLongArray())</ID>
    <ID>SpreadOperator:PostListEventListener.kt$PostListEventListener$(*postsToRefresh.map { it.id }.toIntArray())</ID>
    <ID>SpreadOperator:UiHelpers.kt$UiHelpers$( uiString.stringRes, *uiString.params.map { value -&gt; getTextOfUiString( context, value ) }.toTypedArray() )</ID>
    <ID>ThrowsCount:PageListDialogHelper.kt$PageListDialogHelper$fun onNegativeClickedForBasicDialog( instanceTag: String, editPage: (RemoteId, LoadAutoSaveRevision) -&gt; Unit, copyPage: (RemoteId) -&gt; Unit )</ID>
    <ID>ThrowsCount:PageListDialogHelper.kt$PageListDialogHelper$fun onPositiveClickedForBasicDialog( instanceTag: String, deletePage: (RemoteId) -&gt; Unit, editPage: (RemoteId, LoadAutoSaveRevision) -&gt; Unit, editPageFirst: (RemoteId) -&gt; Unit )</ID>
    <ID>TooGenericExceptionCaught:BaseStatsUseCase.kt$BaseStatsUseCase$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ColorUnderlineSpan.kt$ColorUnderlineSpan$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GifMediaInsertUseCase.kt$GifMediaInsertUseCase$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GifPickerViewModel.kt$GifPickerViewModel$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MediaPickerActivity.kt$MediaPickerActivity$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:UploadStarter.kt$UploadStarter$e: Exception</ID>
    <ID>TooGenericExceptionThrown:ActionableEmptyView.kt$ActionableEmptyView$throw RuntimeException("$context: ActionableEmptyView must have a title (aevTitle)")</ID>
    <ID>TooGenericExceptionThrown:ActivityLogDetailFragment.kt$ActivityLogDetailFragment$throw Throwable("Couldn't initialize Activity Log view model")</ID>
    <ID>TooGenericExceptionThrown:BackupDownloadFragment.kt$BackupDownloadFragment$throw Throwable("Couldn't initialize ${this.javaClass.simpleName} view model")</ID>
    <ID>TooGenericExceptionThrown:BaseListUseCase.kt$BaseListUseCase$throw RuntimeException("Duplicate stats type in a use case")</ID>
    <ID>TooGenericExceptionThrown:BasicFragmentDialog.kt$BasicFragmentDialog$throw RuntimeException("Hosting activity must implement BasicDialogNegativeClickInterface")</ID>
    <ID>TooGenericExceptionThrown:BasicFragmentDialog.kt$BasicFragmentDialog$throw RuntimeException("Hosting activity must implement BasicDialogPositiveClickInterface")</ID>
    <ID>TooGenericExceptionThrown:GifMediaFetcher.kt$GifMediaFetcher$throw Exception("Failed to download the image.")</ID>
    <ID>TooGenericExceptionThrown:GifMediaInsertUseCase.kt$GifMediaInsertUseCase$throw Exception("Failed to download the image.")</ID>
    <ID>TooGenericExceptionThrown:LoginPrologueFragment.kt$LoginPrologueFragment$throw RuntimeException("$context must implement LoginPrologueListener")</ID>
    <ID>TooGenericExceptionThrown:PageListAdapter.kt$PageListAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PageParentAdapter.kt$PageParentAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PageParentSearchAdapter.kt$PageParentSearchAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PageSearchAdapter.kt$PageSearchAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PostSettingsTagsFragment.kt$PostSettingsTagsFragment$throw RuntimeException("$context must implement TagsSelectedListener")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingBottomSheetFragment.kt$PrepublishingBottomSheetFragment$throw RuntimeException("$context must implement PrepublishingBottomSheetListener")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingCategoriesFragment.kt$PrepublishingCategoriesFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingHomeFragment.kt$PrepublishingHomeFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingTagsFragment.kt$PrepublishingTagsFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:PublishSettingsFragment.kt$PublishSettingsFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:ReaderTracker.kt$ReaderTab.Companion$throw RuntimeException("Unexpected ReaderTab id")</ID>
    <ID>TooGenericExceptionThrown:RestoreFragment.kt$RestoreFragment$throw Throwable("Couldn't initialize ${this.javaClass.simpleName} view model")</ID>
    <ID>TooGenericExceptionThrown:RestoreViewModel.kt$RestoreViewModel$throw Throwable("Unexpected restoreRequestResult ${this.javaClass.simpleName}")</ID>
    <ID>TooGenericExceptionThrown:StatsDateFormatter.kt$StatsDateFormatter$throw RuntimeException("Unexpected date format")</ID>
    <ID>TooGenericExceptionThrown:ThreatDetailsFragment.kt$ThreatDetailsFragment$throw RuntimeException("ThreatDetailsFragment - missing siteModel extras.")</ID>
    <ID>TooManyFunctions:ActivityLogListActivity.kt$ActivityLogListActivity : LocaleAwareActivityBasicDialogPositiveClickInterfaceBasicDialogNegativeClickInterface</ID>
    <ID>TooManyFunctions:ActivityLogListFragment.kt$ActivityLogListFragment : Fragment</ID>
    <ID>TooManyFunctions:ActivityLogTypeFilterFragment.kt$ActivityLogTypeFilterFragment : DialogFragment</ID>
    <ID>TooManyFunctions:ActivityLogViewModel.kt$ActivityLogViewModel : ViewModel</ID>
    <ID>TooManyFunctions:AppPrefsWrapper.kt$AppPrefsWrapper</ID>
    <ID>TooManyFunctions:BackupDownloadFragment.kt$BackupDownloadFragment : Fragment</ID>
    <ID>TooManyFunctions:BackupDownloadStateListItemBuilder.kt$BackupDownloadStateListItemBuilder</ID>
    <ID>TooManyFunctions:BackupDownloadViewModel.kt$BackupDownloadViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:BarChartViewHolder.kt$BarChartViewHolder : BlockListItemViewHolder</ID>
    <ID>TooManyFunctions:BaseStatsUseCase.kt$BaseStatsUseCase&lt;DOMAIN_MODEL, UI_STATE&gt; : CoroutineScope</ID>
    <ID>TooManyFunctions:DomainRegistrationDetailsFragment.kt$DomainRegistrationDetailsFragment : Fragment</ID>
    <ID>TooManyFunctions:DomainRegistrationDetailsViewModel.kt$DomainRegistrationDetailsViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:EditPostRepository.kt$EditPostRepository : CoroutineScope</ID>
    <ID>TooManyFunctions:EditorMedia.kt$EditorMedia : CoroutineScope</ID>
    <ID>TooManyFunctions:FollowerTotalsUseCase.kt$FollowerTotalsUseCase : StatelessUseCase</ID>
    <ID>TooManyFunctions:FollowersUseCase.kt$FollowersUseCase : BaseStatsUseCase</ID>
    <ID>TooManyFunctions:FormattableContentUtils.kt$org.wordpress.android.util.FormattableContentUtils.kt</ID>
    <ID>TooManyFunctions:GifPickerActivity.kt$GifPickerActivity : LocaleAwareActivity</ID>
    <ID>TooManyFunctions:HomePagePickerViewModel.kt$HomePagePickerViewModel : ViewModelCoroutineScopePreviewModeHandler</ID>
    <ID>TooManyFunctions:HomepageSettingsViewModel.kt$HomepageSettingsViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:ImageManager.kt$ImageManager</ID>
    <ID>TooManyFunctions:ImprovedMySiteFragment.kt$ImprovedMySiteFragment : FragmentCallback</ID>
    <ID>TooManyFunctions:LatestPostSummaryUseCase.kt$LatestPostSummaryUseCase : StatelessUseCase</ID>
    <ID>TooManyFunctions:LiveDataUtils.kt$org.wordpress.android.util.LiveDataUtils.kt</ID>
    <ID>TooManyFunctions:MeFragment.kt$MeFragment : FragmentOnScrollToTopListener</ID>
    <ID>TooManyFunctions:MediaPickerActivity.kt$MediaPickerActivity : LocaleAwareActivityMediaPickerListener</ID>
    <ID>TooManyFunctions:MediaPickerFragment.kt$MediaPickerFragment : Fragment</ID>
    <ID>TooManyFunctions:MediaPickerLauncher.kt$MediaPickerLauncher</ID>
    <ID>TooManyFunctions:MediaPickerTracker.kt$MediaPickerTracker</ID>
    <ID>TooManyFunctions:MediaPickerViewModel.kt$MediaPickerViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:MediaUtilsWrapper.kt$MediaUtilsWrapper</ID>
    <ID>TooManyFunctions:ModalLayoutPickerFragment.kt$ModalLayoutPickerFragment : FullscreenBottomSheetDialogFragment</ID>
    <ID>TooManyFunctions:ModalLayoutPickerViewModel.kt$ModalLayoutPickerViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:MySiteFragment.kt$MySiteFragment : FragmentOnScrollToTopListenerBasicDialogPositiveClickInterfaceBasicDialogNegativeClickInterfaceBasicDialogOnDismissByOutsideTouchInterfacePromoDialogClickInterfaceOnConfirmListenerOnDismissListenerCallback</ID>
    <ID>TooManyFunctions:MySiteViewModel.kt$MySiteViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:NestedCoordinatorLayout.kt$NestedCoordinatorLayout : CoordinatorLayoutNestedScrollingChild3</ID>
    <ID>TooManyFunctions:NestedWebView.kt$NestedWebView : WPWebViewNestedScrollingChild3</ID>
    <ID>TooManyFunctions:NotificationsListFragment.kt$NotificationsListFragment : FragmentScrollableViewInitializedListener</ID>
    <ID>TooManyFunctions:NotificationsListFragmentPage.kt$NotificationsListFragmentPage : ViewPagerFragmentOnScrollToTopListenerDataLoadedListener</ID>
    <ID>TooManyFunctions:PageListEventListener.kt$PageListEventListener : CoroutineScope</ID>
    <ID>TooManyFunctions:PageListFragment.kt$PageListFragment : ViewPagerFragment</ID>
    <ID>TooManyFunctions:PageListViewModel.kt$PageListViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:PageParentFragment.kt$PageParentFragment : FragmentCoroutineScope</ID>
    <ID>TooManyFunctions:PageParentViewModel.kt$PageParentViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:PagesFragment.kt$PagesFragment : FragmentScrollableViewInitializedListener</ID>
    <ID>TooManyFunctions:PagesViewModel.kt$PagesViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:PhotoPickerFragment.kt$PhotoPickerFragment : Fragment</ID>
    <ID>TooManyFunctions:PhotoPickerViewModel.kt$PhotoPickerViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:PluginBrowserViewModel.kt$PluginBrowserViewModel : ViewModel</ID>
    <ID>TooManyFunctions:PostActionHandler.kt$PostActionHandler</ID>
    <ID>TooManyFunctions:PostListDialogHelper.kt$PostListDialogHelper</ID>
    <ID>TooManyFunctions:PostListEventListener.kt$PostListEventListener : LifecycleObserverCoroutineScope</ID>
    <ID>TooManyFunctions:PostListItemUiStateHelper.kt$PostListItemUiStateHelper</ID>
    <ID>TooManyFunctions:PostListMainViewModel.kt$PostListMainViewModel : ViewModelCoroutineScope</ID>
    <ID>TooManyFunctions:PostListViewModel.kt$PostListViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:PostUtilsWrapper.kt$PostUtilsWrapper</ID>
    <ID>TooManyFunctions:PostsListActivity.kt$PostsListActivity : LocaleAwareActivityEditPostActivityHookPrepublishingBottomSheetListenerBasicDialogPositiveClickInterfaceBasicDialogNegativeClickInterfaceBasicDialogOnDismissByOutsideTouchInterfaceScrollableViewInitializedListener</ID>
    <ID>TooManyFunctions:PrefMasterSwitchToolbarView.kt$PrefMasterSwitchToolbarView : LinearLayoutOnCheckedChangeListenerOnLongClickListenerOnClickListener</ID>
    <ID>TooManyFunctions:PrepublishingAddCategoryFragment.kt$PrepublishingAddCategoryFragment : Fragment</ID>
    <ID>TooManyFunctions:PrepublishingAddCategoryViewModel.kt$PrepublishingAddCategoryViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:PrepublishingBottomSheetFragment.kt$PrepublishingBottomSheetFragment : WPBottomSheetDialogFragmentPrepublishingScreenClosedListenerPrepublishingActionClickedListener</ID>
    <ID>TooManyFunctions:PrepublishingCategoriesFragment.kt$PrepublishingCategoriesFragment : Fragment</ID>
    <ID>TooManyFunctions:PrepublishingCategoriesViewModel.kt$PrepublishingCategoriesViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:PrepublishingTagsFragment.kt$PrepublishingTagsFragment : TagsFragmentTagsSelectedListener</ID>
    <ID>TooManyFunctions:PrepublishingViewModel.kt$PrepublishingViewModel : ViewModel</ID>
    <ID>TooManyFunctions:PublishSettingsViewModel.kt$PublishSettingsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:QuickStartRepository.kt$QuickStartRepository : CoroutineScopeMySiteSource</ID>
    <ID>TooManyFunctions:QuickStartUtils.kt$QuickStartUtils$Companion</ID>
    <ID>TooManyFunctions:ReaderDiscoverDataProvider.kt$ReaderDiscoverDataProvider : CoroutineScope</ID>
    <ID>TooManyFunctions:ReaderDiscoverLogic.kt$ReaderDiscoverLogic</ID>
    <ID>TooManyFunctions:ReaderDiscoverViewModel.kt$ReaderDiscoverViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:ReaderFragment.kt$ReaderFragment : FragmentScrollableViewInitializedListener</ID>
    <ID>TooManyFunctions:ReaderInterestsFragment.kt$ReaderInterestsFragment : Fragment</ID>
    <ID>TooManyFunctions:ReaderInterestsViewModel.kt$ReaderInterestsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:ReaderPostCardActionsHandler.kt$ReaderPostCardActionsHandler</ID>
    <ID>TooManyFunctions:ReaderPostDetailFragment.kt$ReaderPostDetailFragment : ViewPagerFragmentOnActivityBackPressedListenerReaderCustomViewListenerReaderWebViewPageFinishedListenerReaderWebViewUrlClickListenerPrivateAtCookieProgressDialogOnDismissListenerAutoHideToolbarListener</ID>
    <ID>TooManyFunctions:ReaderPostDetailViewModel.kt$ReaderPostDetailViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:ReaderPostListViewModel.kt$ReaderPostListViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:ReaderPostUiStateBuilder.kt$ReaderPostUiStateBuilder</ID>
    <ID>TooManyFunctions:ReaderViewModel.kt$ReaderViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:ReferrersUseCase.kt$ReferrersUseCase : GranularStatefulUseCase</ID>
    <ID>TooManyFunctions:RestoreFragment.kt$RestoreFragment : Fragment</ID>
    <ID>TooManyFunctions:RestoreStateListItemBuilder.kt$RestoreStateListItemBuilder</ID>
    <ID>TooManyFunctions:RestoreViewModel.kt$RestoreViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:SaveStoryGutenbergBlockUseCase.kt$SaveStoryGutenbergBlockUseCase</ID>
    <ID>TooManyFunctions:ScanFragment.kt$ScanFragment : Fragment</ID>
    <ID>TooManyFunctions:ScanHistoryFragment.kt$ScanHistoryFragment : FragmentScrollableViewInitializedListener</ID>
    <ID>TooManyFunctions:ScanHistoryListFragment.kt$ScanHistoryListFragment : ViewPagerFragment</ID>
    <ID>TooManyFunctions:ScanStateListItemsBuilder.kt$ScanStateListItemsBuilder</ID>
    <ID>TooManyFunctions:ScanTracker.kt$ScanTracker</ID>
    <ID>TooManyFunctions:ScanViewModel.kt$ScanViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:SelectedDateProvider.kt$SelectedDateProvider</ID>
    <ID>TooManyFunctions:SettingsUsernameChangerFragment.kt$SettingsUsernameChangerFragment : BaseUsernameChangerFullScreenDialogFragment</ID>
    <ID>TooManyFunctions:SiteCreationActivity.kt$SiteCreationActivity : LocaleAwareActivitySegmentsScreenListenerDomainsScreenListenerSitePreviewScreenListenerOnHelpClickedListenerBasicDialogPositiveClickInterfaceBasicDialogNegativeClickInterface</ID>
    <ID>TooManyFunctions:SiteCreationDomainsFragment.kt$SiteCreationDomainsFragment : SiteCreationBaseFormFragment</ID>
    <ID>TooManyFunctions:SiteCreationDomainsViewModel.kt$SiteCreationDomainsViewModel : ViewModelCoroutineScope</ID>
    <ID>TooManyFunctions:SiteCreationMainVM.kt$SiteCreationMainVM : ViewModel</ID>
    <ID>TooManyFunctions:SiteCreationPreviewFragment.kt$SiteCreationPreviewFragment : SiteCreationBaseFormFragmentErrorManagedWebViewClientListener</ID>
    <ID>TooManyFunctions:SiteCreationSegmentsFragment.kt$SiteCreationSegmentsFragment : SiteCreationBaseFormFragment</ID>
    <ID>TooManyFunctions:SiteCreationSegmentsViewModel.kt$SiteCreationSegmentsViewModel : ViewModelCoroutineScope</ID>
    <ID>TooManyFunctions:SiteCreationTracker.kt$SiteCreationTracker</ID>
    <ID>TooManyFunctions:SiteListItemBuilder.kt$SiteListItemBuilder</ID>
    <ID>TooManyFunctions:SitePreviewViewModel.kt$SitePreviewViewModel : ViewModelCoroutineScope</ID>
    <ID>TooManyFunctions:StatsDateFormatter.kt$StatsDateFormatter</ID>
    <ID>TooManyFunctions:StatsModule.kt$StatsModule</ID>
    <ID>TooManyFunctions:StatsUtils.kt$StatsUtils</ID>
    <ID>TooManyFunctions:StatsViewAllViewModel.kt$StatsViewAllViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:StorePostViewModel.kt$StorePostViewModel : ScopedViewModelDialogVisibilityProvider</ID>
    <ID>TooManyFunctions:StoriesEventListener.kt$StoriesEventListener : LifecycleObserver</ID>
    <ID>TooManyFunctions:StoriesPrefs.kt$StoriesPrefs</ID>
    <ID>TooManyFunctions:StoryComposerActivity.kt$StoryComposerActivity : ComposeLoopFrameActivitySnackbarProviderMediaPickerProviderEditorMediaListenerAuthenticationHeadersProviderNotificationIntentLoaderMetadataProviderStoryDiscardListenerEditPostActivityHookPrepublishingEventProviderPrepublishingBottomSheetListenerPermanentPermissionDenialDialogProviderGenericAnnouncementDialogProvider</ID>
    <ID>TooManyFunctions:StoryComposerViewModel.kt$StoryComposerViewModel : ViewModel</ID>
    <ID>TooManyFunctions:SubFilterViewModel.kt$SubFilterViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:SuggestionActivity.kt$SuggestionActivity : LocaleAwareActivity</ID>
    <ID>TooManyFunctions:TagsAndCategoriesUseCase.kt$TagsAndCategoriesUseCase : BaseStatsUseCase</ID>
    <ID>TooManyFunctions:ThreatDetailsListItemsBuilder.kt$ThreatDetailsListItemsBuilder</ID>
    <ID>TooManyFunctions:ThreatDetailsViewModel.kt$ThreatDetailsViewModel : ViewModel</ID>
    <ID>TooManyFunctions:UnifiedLoginTracker.kt$UnifiedLoginTracker</ID>
    <ID>TooManyFunctions:UploadUtilsWrapper.kt$UploadUtilsWrapper</ID>
    <ID>TooManyFunctions:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined : ConstraintLayout</ID>
    <ID>TooManyFunctions:WPMainActivityViewModel.kt$WPMainActivityViewModel : ScopedViewModel</ID>
    <ID>TooManyFunctions:WPMainNavigationView.kt$WPMainNavigationView : BottomNavigationViewOnNavigationItemSelectedListenerOnNavigationItemReselectedListener</ID>
    <ID>TooManyFunctions:WPWebViewViewModel.kt$WPWebViewViewModel : ViewModelPreviewModeHandler</ID>
    <ID>TooManyFunctions:ZendeskHelper.kt$ZendeskHelper</ID>
    <ID>TopLevelPropertyNaming:ActivityLogTypeFilterAdapter.kt$private const val activityViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:ActivityLogTypeFilterAdapter.kt$private const val headerViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:HomePagePickerViewModel.kt$const val defaultTemplateSlug = "default"</ID>
    <ID>TopLevelPropertyNaming:PrepublishingHomeAdapter.kt$private const val headerViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:PrepublishingHomeAdapter.kt$private const val homeItemViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:PrepublishingHomeAdapter.kt$private const val submitButtonViewType: Int = 3</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val interestViewType: Int = 3</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val postViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val recommendedBlogsViewType: Int = 4</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val welcomeBannerViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:SiteCreationDomainsAdapter.kt$private const val suggestionErrorViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:SiteCreationDomainsAdapter.kt$private const val suggestionItemViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:SiteCreationSegmentsAdapter.kt$private const val headerViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:SiteCreationSegmentsAdapter.kt$private const val progressViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:SiteCreationSegmentsAdapter.kt$private const val segmentViewType: Int = 3</ID>
    <ID>TopLevelPropertyNaming:SupportedBlocks.kt$private const val defaultAssetFilename = "supported-blocks.json"</ID>
    <ID>TopLevelPropertyNaming:ThumbDimensionProvider.kt$/** * Width to height thumbnail dimension ratio */ private const val ratio = 0.75</ID>
    <ID>TopLevelPropertyNaming:ZendeskHelper.kt$private const val enablePushNotificationsDelayAfterIdentityChange: Long = 2500</ID>
    <ID>TopLevelPropertyNaming:ZendeskHelper.kt$private const val zendeskNeedsToBeEnabledError = "Zendesk needs to be setup before this method can be called"</ID>
    <ID>UnnecessaryAbstractClass:JetpackListItemState.kt$JetpackListItemState</ID>
    <ID>UtilityClassWithPublicConstructor:AppThemeUtils.kt$AppThemeUtils</ID>
    <ID>UtilityClassWithPublicConstructor:DomainPhoneNumberUtils.kt$DomainPhoneNumberUtils</ID>
    <ID>UtilityClassWithPublicConstructor:EncryptionUtils.kt$EncryptionUtils</ID>
    <ID>UtilityClassWithPublicConstructor:ImageEditorInitializer.kt$ImageEditorInitializer</ID>
    <ID>UtilityClassWithPublicConstructor:QuickStartUtils.kt$QuickStartUtils</ID>
    <ID>UtilityClassWithPublicConstructor:WPSnackbar.kt$WPSnackbar</ID>
    <ID>VariableNaming:ReaderCommentsFollowUseCase.kt$ReaderCommentsFollowUseCase$private val FOLLOW_COMMENT_ACTION = "follow_action"</ID>
    <ID>VariableNaming:ReaderCommentsFollowUseCase.kt$ReaderCommentsFollowUseCase$private val FOLLOW_COMMENT_ACTION_ERROR = "follow_action_error"</ID>
    <ID>VariableNaming:ReaderCommentsFollowUseCase.kt$ReaderCommentsFollowUseCase$private val FOLLOW_COMMENT_ACTION_RESULT = "follow_action_result"</ID>
  </CurrentIssues>
</SmellBaseline>
