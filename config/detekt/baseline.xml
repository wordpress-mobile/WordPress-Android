<?xml version='1.0' encoding='UTF-8'?>
<SmellBaseline>
  <ManuallySuppressedIssues/>
  <CurrentIssues>
    <ID>ComplexCondition:AllTimeStatsUseCase.kt$AllTimeStatsUseCase$!hasPosts &amp;&amp; !hasViews &amp;&amp; !hasVisitors &amp;&amp; !hasViewsBestDayTotal</ID>
    <ID>ComplexCondition:FollowersUseCase.kt$FollowersUseCase$wpComModel.followers.size >= VIEW_ALL_PAGE_SIZE &amp;&amp; uiState.selectedTab == 0 || emailModel.followers.size >= VIEW_ALL_PAGE_SIZE &amp;&amp; uiState.selectedTab == 1</ID>
    <ID>ComplexCondition:FollowersUseCase.kt$FollowersUseCase$wpComModel.hasMore &amp;&amp; uiState.selectedTab == 0 || emailModel.hasMore &amp;&amp; uiState.selectedTab == 1</ID>
    <ID>ComplexCondition:MinifiedWidgetUpdater.kt$MinifiedWidgetUpdater$networkAvailable &amp;&amp; hasAccessToken &amp;&amp; siteModel != null &amp;&amp; dataType != null</ID>
    <ID>ComplexCondition:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$activity != null &amp;&amp; requestCode == READER_FILE_DOWNLOAD_PERMISSION_REQUEST_CODE &amp;&amp; grantResults.isNotEmpty() &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED</ID>
    <ID>ComplexCondition:TodayStatsUseCase.kt$TodayStatsUseCase$!hasViews &amp;&amp; !hasVisitors &amp;&amp; !hasLikes &amp;&amp; !hasComments</ID>
    <ID>ComplexMethod:BarChartViewHolder.kt$BarChartViewHolder$private fun BarChart.draw( item: BarChartItem, labelStart: TextView, labelEnd: TextView ): BarCount</ID>
    <ID>ComplexMethod:BlockDiffCallback.kt$BlockDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ComplexMethod:BlockListAdapter.kt$BlockListAdapter$override fun onBindViewHolder(holder: BlockListItemViewHolder, position: Int, payloads: List&lt;Any>)</ID>
    <ID>ComplexMethod:BlockListAdapter.kt$BlockListAdapter$override fun onCreateViewHolder(parent: ViewGroup, itemType: Int): BlockListItemViewHolder</ID>
    <ID>ComplexMethod:CreatePageListItemActionsUseCase.kt$CreatePageListItemActionsUseCase$fun setupPageActions( listType: PageListType, uploadUiState: PostUploadUiState, siteModel: SiteModel, remoteId: Long ): Set&lt;Action></ID>
    <ID>ComplexMethod:EditorTracker.kt$EditorTracker$@JvmOverloads fun trackEditorEvent( event: TrackableEvent, editorName: String, properties: Map&lt;String, String> = mapOf() )</ID>
    <ID>ComplexMethod:FormattableContentClickHandler.kt$FormattableContentClickHandler$fun onClick( activity: FragmentActivity, clickedSpan: FormattableRange, source: String )</ID>
    <ID>ComplexMethod:HomepageSettingsDialog.kt$HomepageSettingsDialog$override fun onCreateDialog(savedInstanceState: Bundle?): Dialog</ID>
    <ID>ComplexMethod:ImagePlaceholderManager.kt$ImagePlaceholderManager$fun getErrorResource(imgType: ImageType): Int?</ID>
    <ID>ComplexMethod:ImagePlaceholderManager.kt$ImagePlaceholderManager$fun getPlaceholderResource(imgType: ImageType): Int?</ID>
    <ID>ComplexMethod:MediaPickerViewModel.kt$MediaPickerViewModel$private fun buildUiModel( domainModel: DomainModel?, selectedIds: List&lt;Identifier>?, softAskRequest: SoftAskRequest?, isSearching: Boolean? ): PhotoListUiModel</ID>
    <ID>ComplexMethod:NoticonUtils.kt$NoticonUtils$fun noticonToGridicon(noticon: String): Int</ID>
    <ID>ComplexMethod:PostActionHandler.kt$PostActionHandler$fun handlePostButton(buttonType: PostListButtonType, post: PostModel, hasAutoSave: Boolean)</ID>
    <ID>ComplexMethod:PostListActionTracker.kt$fun trackPostListAction(site: SiteModel, buttonType: PostListButtonType, postData: PostModel, statsEvent: Stat)</ID>
    <ID>ComplexMethod:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$private fun ReaderNavigationEvents.handleNavigationEvent()</ID>
    <ID>ComplexMethod:ReferrersUseCase.kt$ReferrersUseCase$override fun buildUiModel(domainModel: ReferrersModel, uiState: SelectedGroup): List&lt;BlockListItem></ID>
    <ID>ComplexMethod:SystemNotificationsTracker.kt$SystemNotificationsTracker$private fun NotificationType.toTypeValue(): String</ID>
    <ID>ComplexMethod:UiModelMapper.kt$UiModelMapper$fun mapInsights( useCaseModels: List&lt;UseCaseModel>, showError: (Int) -> Unit ): UiModel</ID>
    <ID>ComplexMethod:UiModelMapper.kt$UiModelMapper$private fun mapStatsWithOverview( overViewType: StatsType, useCaseModels: List&lt;UseCaseModel>, showError: (Int) -> Unit ): UiModel</ID>
    <ID>ComplexMethod:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$private fun setListeners()</ID>
    <ID>ConstructorParameterNaming:MainFabUiState.kt$MainFabUiState$@StringRes val CreateContentMessageId: Int</ID>
    <ID>ConstructorParameterNaming:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.SavedState$`in`: Parcel</ID>
    <ID>EmptyFunctionBlock:AllTimeWidgetListProvider.kt$AllTimeWidgetListProvider${ }</ID>
    <ID>EmptyFunctionBlock:CommentFullScreenDialogFragment.kt$CommentFullScreenDialogFragment.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:DomainRegistrationDetailsFragment.kt$DomainRegistrationDetailsFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:EditPostPublishSettingsFragment.kt$EditPostPublishSettingsFragment${}</ID>
    <ID>EmptyFunctionBlock:GlideMShotsLoader.kt$GlideMShotsLoader.Factory${}</ID>
    <ID>EmptyFunctionBlock:ImageManager.kt$ImageManager.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:LayoutViewHolder.kt$LayoutViewHolder.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:NotificationsListFragment.kt$NotificationsListFragment.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:NotificationsListFragmentPage.kt$NotificationsListFragmentPage.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:PagesFragment.kt$PagesFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:PagesFragment.kt$PagesFragment.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:PostsListActivity.kt$PostsListActivity.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:PrepublishingAddCategoryFragment.kt$PrepublishingAddCategoryFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:QuickStartFocusPoint.kt$QuickStartFocusPoint.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:ReaderDiscoverDataProvider.kt$ReaderDiscoverDataProvider${ }</ID>
    <ID>EmptyFunctionBlock:ReaderPostDetailFragment.kt$ReaderPostDetailFragment${ }</ID>
    <ID>EmptyFunctionBlock:ScanHistoryFragment.kt$ScanHistoryFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:SearchInputWithHeader.kt$SearchInputWithHeader.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:SettingsUsernameChangerFragment.kt$SettingsUsernameChangerFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:SiteCreationService.kt$SiteCreationService${ }</ID>
    <ID>EmptyFunctionBlock:StatsFragment.kt$SelectedTabListener${ }</ID>
    <ID>EmptyFunctionBlock:StatsViewAllFragment.kt$StatsViewAllFragment.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:StoryTitleHeaderView.kt$StoryTitleHeaderView.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:SuggestionActivity.kt$SuggestionActivity.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:TabsViewHolder.kt$TabsViewHolder.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:ThreatLoadingSkeletonViewHolder.kt$ThreatLoadingSkeletonViewHolder${}</ID>
    <ID>EmptyFunctionBlock:TodayWidgetListProvider.kt$TodayWidgetListProvider${ }</ID>
    <ID>EmptyFunctionBlock:ViewsWidgetListProvider.kt$ViewsWidgetListProvider${ }</ID>
    <ID>EmptyFunctionBlock:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.&lt;no name provided>${ }</ID>
    <ID>EmptyFunctionBlock:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.&lt;no name provided>${}</ID>
    <ID>EmptyFunctionBlock:WPTextViewDrawableCallback.kt$WPTextViewDrawableCallback${}</ID>
    <ID>EmptyFunctionBlock:WidgetBlockListProvider.kt$WidgetBlockListProvider${ }</ID>
    <ID>EmptyFunctionBlock:WordPressGlideModule.kt$WordPressGlideModule${}</ID>
    <ID>EmptySecondaryConstructor:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined.SavedState${}</ID>
    <ID>FunctionParameterNaming:WizardManager.kt$WizardManager$T: WizardStep</ID>
    <ID>LargeClass:PagesViewModel.kt$PagesViewModel : ScopedViewModel</ID>
    <ID>LargeClass:ReaderPostDetailFragment.kt$ReaderPostDetailFragment : ViewPagerFragmentOnActivityBackPressedListenerScrollDirectionListenerReaderCustomViewListenerReaderWebViewPageFinishedListenerReaderWebViewUrlClickListenerPrivateAtCookieProgressDialogOnDismissListenerAutoHideToolbarListener</ID>
    <ID>LongMethod:AuthorsUseCase.kt$AuthorsUseCase$override fun buildUiModel(domainModel: AuthorsModel, uiState: SelectedAuthor): List&lt;BlockListItem></ID>
    <ID>LongMethod:BarChartViewHolder.kt$BarChartViewHolder$private fun BarChart.draw( item: BarChartItem, labelStart: TextView, labelEnd: TextView ): BarCount</ID>
    <ID>LongMethod:ClicksUseCase.kt$ClicksUseCase$override fun buildUiModel(domainModel: ClicksModel, uiState: SelectedClicksGroup): List&lt;BlockListItem></ID>
    <ID>LongMethod:HomepageSettingsDialog.kt$HomepageSettingsDialog$override fun onCreateDialog(savedInstanceState: Bundle?): Dialog</ID>
    <ID>LongMethod:MediaPickerViewModel.kt$MediaPickerViewModel$private fun buildUiModel( domainModel: DomainModel?, selectedIds: List&lt;Identifier>?, softAskRequest: SoftAskRequest?, isSearching: Boolean? ): PhotoListUiModel</ID>
    <ID>LongMethod:PrepublishingHomeViewModel.kt$PrepublishingHomeViewModel$private fun setupHomeUiState( editPostRepository: EditPostRepository, site: SiteModel, isStoryPost: Boolean )</ID>
    <ID>LongMethod:PublishSettingsFragment.kt$PublishSettingsFragment$override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View?</ID>
    <ID>LongMethod:ReferrersUseCase.kt$ReferrersUseCase$override fun buildUiModel(domainModel: ReferrersModel, uiState: SelectedGroup): List&lt;BlockListItem></ID>
    <ID>LongMethod:SearchListViewModel.kt$SearchListViewModel$private fun PageModel.toPageItem(areActionsEnabled: Boolean): PageItem</ID>
    <ID>LongMethod:SuggestionActivity.kt$SuggestionActivity$private fun initializeActivity(siteModel: SiteModel, suggestionType: SuggestionType)</ID>
    <ID>MagicNumber:ActivityViewHolder.kt$ActivityViewHolder$3</ID>
    <ID>MagicNumber:ActivityViewHolder.kt$ActivityViewHolder$50</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$10</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$100</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$100F</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$10f</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$24</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$25</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$255</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$4</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$5</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$50</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$51</ID>
    <ID>MagicNumber:BarChartViewHolder.kt$BarChartViewHolder$8f</ID>
    <ID>MagicNumber:BaseStatsUseCase.kt$BaseStatsUseCase$50</ID>
    <ID>MagicNumber:ColorUnderlineSpan.kt$ColorUnderlineSpan$5f</ID>
    <ID>MagicNumber:ColorUtils.kt$ColorUtils$255</ID>
    <ID>MagicNumber:DateTimeUtilsWrapper.kt$DateTimeUtilsWrapper$1000</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$3</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$4</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$5</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$50</ID>
    <ID>MagicNumber:DateUtils.kt$DateUtils$6</ID>
    <ID>MagicNumber:DeviceMediaLoader.kt$DeviceMediaLoader$1000</ID>
    <ID>MagicNumber:EditorPhotoPicker.kt$EditorPhotoPicker$0.5f</ID>
    <ID>MagicNumber:ExpandableItemViewHolder.kt$ExpandableItemViewHolder$180</ID>
    <ID>MagicNumber:ExpandableItemViewHolder.kt$ExpandableItemViewHolder$180F</ID>
    <ID>MagicNumber:ExpandableItemViewHolder.kt$ExpandableItemViewHolder$200</ID>
    <ID>MagicNumber:FeatureAnnouncementViewModel.kt$FeatureAnnouncementViewModel$1000</ID>
    <ID>MagicNumber:LargeValueFormatter.kt$LargeValueFormatter$3</ID>
    <ID>MagicNumber:LargeValueFormatter.kt$LargeValueFormatter$5</ID>
    <ID>MagicNumber:LatestPostSummaryMapper.kt$LatestPostSummaryMapper$30</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$0xffffff</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$100</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$5</ID>
    <ID>MagicNumber:MapViewHolder.kt$MapViewHolder$8</ID>
    <ID>MagicNumber:MediaPickerViewModel.kt$MediaPickerViewModel$100</ID>
    <ID>MagicNumber:MediaPickerViewModel.kt$MediaPickerViewModel$300</ID>
    <ID>MagicNumber:MySiteFragment.kt$MySiteFragment$100</ID>
    <ID>MagicNumber:NotificationsListFragmentPage.kt$NotificationsListFragmentPage$1000L</ID>
    <ID>MagicNumber:OverviewUseCase.kt$OverviewUseCase$86400000.0</ID>
    <ID>MagicNumber:PageItemViewHolder.kt$PageItemViewHolder.PageViewHolder$16</ID>
    <ID>MagicNumber:PageParentAdapter.kt$PageParentAdapter$200</ID>
    <ID>MagicNumber:PageParentFragment.kt$PageParentFragment$8</ID>
    <ID>MagicNumber:PageParentSearchAdapter.kt$PageParentSearchAdapter$200</ID>
    <ID>MagicNumber:PagesFragment.kt$PagesFragment$8</ID>
    <ID>MagicNumber:PluginBrowserViewModel.kt$PluginBrowserViewModel$250</ID>
    <ID>MagicNumber:PostDayViewsMapper.kt$PostDayViewsMapper$100</ID>
    <ID>MagicNumber:PostListItemViewHolder.kt$PostListItemViewHolder.Standard$1000</ID>
    <ID>MagicNumber:PostModelUploadStatusTracker.kt$PostModelUploadStatusTracker$100</ID>
    <ID>MagicNumber:PostingActivityUseCase.kt$PostingActivityUseCase$2</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$10</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$10000</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$60</ID>
    <ID>MagicNumber:PublishSettingsViewModel.kt$PublishSettingsViewModel$6000</ID>
    <ID>MagicNumber:QuickStartItemBuilder.kt$QuickStartItemBuilder$100</ID>
    <ID>MagicNumber:ReaderCommentListViewModel.kt$ReaderCommentListViewModel$300</ID>
    <ID>MagicNumber:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$300</ID>
    <ID>MagicNumber:ReaderTagRepository.kt$ReaderTagRepository$5</ID>
    <ID>MagicNumber:RequestThrottler.kt$RequestThrottler$1000L</ID>
    <ID>MagicNumber:RequestThrottler.kt$RequestThrottler$60</ID>
    <ID>MagicNumber:SaveInitialPostUseCase.kt$SaveInitialPostUseCase$1000</ID>
    <ID>MagicNumber:SearchInputWithHeader.kt$SearchInputWithHeader$200</ID>
    <ID>MagicNumber:StatsDateFormatter.kt$StatsDateFormatter$31</ID>
    <ID>MagicNumber:StatsDateFormatter.kt$StatsDateFormatter$6</ID>
    <ID>MagicNumber:StatsDateFormatter.kt$StatsDateFormatter$60</ID>
    <ID>MagicNumber:StatsFragment.kt$StatsFragment$3</ID>
    <ID>MagicNumber:StatsFragment.kt$StatsFragment$4</ID>
    <ID>MagicNumber:StatsSiteProvider.kt$StatsSiteProvider$3</ID>
    <ID>MagicNumber:StatsUtils.kt$100</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$10</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$10.0</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$100</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000_000_000L</ID>
    <ID>MagicNumber:StatsUtils.kt$StatsUtils$1_000_000_000_000_000_000L</ID>
    <ID>MagicNumber:UiHelpers.kt$UiHelpers.Companion$0.8</ID>
    <ID>MagicNumber:UploadWorker.kt$6</ID>
    <ID>MagicNumber:UploadWorker.kt$8</ID>
    <ID>MagicNumber:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$255</ID>
    <ID>MagicNumber:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$255f</ID>
    <ID>MagicNumber:WPTooltipView.kt$WPTooltipView$400</ID>
    <ID>MagicNumber:WPTooltipView.kt$WPTooltipView$90f</ID>
    <ID>MagicNumber:WPWebView.kt$21</ID>
    <ID>MagicNumber:WPWebView.kt$22</ID>
    <ID>MagicNumber:WidgetUtils.kt$WidgetUtils$300</ID>
    <ID>MemberNameEqualsClassName:ActivityLogTypeFilterViewModel.kt$ActivityLogTypeFilterViewModel.Action$lateinit var action: (() -> Unit)</ID>
    <ID>NestedBlockDepth:AllTimeWidgetBlockListViewModel.kt$AllTimeWidgetBlockListViewModel$override fun onDataSetChanged(context: Context)</ID>
    <ID>NestedBlockDepth:AllTimeWidgetListViewModel.kt$AllTimeWidgetListViewModel$fun onDataSetChanged(onError: (appWidgetId: Int) -> Unit)</ID>
    <ID>NestedBlockDepth:CreatePageListItemActionsUseCase.kt$CreatePageListItemActionsUseCase$fun setupPageActions( listType: PageListType, uploadUiState: PostUploadUiState, siteModel: SiteModel, remoteId: Long ): Set&lt;Action></ID>
    <ID>NestedBlockDepth:LoadStoryFromStoriesPrefsUseCase.kt$LoadStoryFromStoriesPrefsUseCase$private fun loadOrReCreateStoryFromStoriesPrefs(site: SiteModel, mediaIds: ArrayList&lt;String>): ReCreateStoryResult</ID>
    <ID>NestedBlockDepth:PublicizeErrorDialogFragment.kt$PublicizeErrorDialogFragment$override fun onCreateDialog(savedInstanceState: Bundle?): Dialog</ID>
    <ID>NestedBlockDepth:PublishNotificationReceiverViewModel.kt$PublishNotificationReceiverViewModel$fun loadNotification(notificationId: Int): NotificationUiModel?</ID>
    <ID>NestedBlockDepth:StoriesPrefs.kt$StoriesPrefs$private fun checkSlideOriginalBackgroundMediaExists(storyFrameItem: StoryFrameItem?): Boolean</ID>
    <ID>NestedBlockDepth:StoryComposerActivity.kt$StoryComposerActivity$override fun onStorySaveButtonPressed()</ID>
    <ID>NestedBlockDepth:StoryComposerActivity.kt$StoryComposerActivity$private fun buildStoryMediaFileDataListFromStoryFrameIndexes( storyIndex: StoryIndex ): ArrayList&lt;StoryMediaFileData></ID>
    <ID>NestedBlockDepth:TodayWidgetBlockListViewModel.kt$TodayWidgetBlockListViewModel$override fun onDataSetChanged(context: Context)</ID>
    <ID>NestedBlockDepth:TodayWidgetListViewModel.kt$TodayWidgetListViewModel$fun onDataSetChanged(onError: (appWidgetId: Int) -> Unit)</ID>
    <ID>NestedBlockDepth:ViewsWidgetListViewModel.kt$ViewsWidgetListViewModel$fun onDataSetChanged(onError: (appWidgetId: Int) -> Unit)</ID>
    <ID>ProtectedMemberInFinalClass:PageParentSearchFragment.kt$PageParentSearchFragment$protected var job: Job = Job()</ID>
    <ID>ReturnCount:BarChartViewHolder.kt$BarChartViewHolder$private fun roundUp(input: Float): Float</ID>
    <ID>ReturnCount:BlockDiffCallback.kt$BlockDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ReturnCount:DomainPhoneNumberUtils.kt$DomainPhoneNumberUtils.Companion$fun getPhoneNumberPrefixFromFullPhoneNumber(phoneNumber: String?): String?</ID>
    <ID>ReturnCount:DomainPhoneNumberUtils.kt$DomainPhoneNumberUtils.Companion$fun getPhoneNumberWithoutPrefix(phoneNumber: String?): String?</ID>
    <ID>ReturnCount:FeatureAnnouncementListAdapter.kt$FeatureAnnouncementListAdapter$override fun getItemCount(): Int</ID>
    <ID>ReturnCount:FeaturedImageHelper.kt$FeaturedImageHelper$fun createCurrentFeaturedImageState(site: SiteModel, post: PostImmutableModel): FeaturedImageData</ID>
    <ID>ReturnCount:FeaturedImageHelper.kt$FeaturedImageHelper$fun queueFeaturedImageForUpload( localPostId: Int, site: SiteModel, uri: Uri, mimeType: String? ): EnqueueFeaturedImageResult</ID>
    <ID>ReturnCount:FollowedBlogsProvider.kt$FollowedBlogsProvider$fun getAllFollowedBlogs(query: String?): List&lt;PreferenceModel></ID>
    <ID>ReturnCount:ImageManager.kt$ImageManager$ private fun Context?.isAvailable(): Boolean</ID>
    <ID>ReturnCount:LoadStoryFromStoriesPrefsUseCase.kt$LoadStoryFromStoriesPrefsUseCase$fun areAllStorySlidesEditable(site: SiteModel, mediaIds: ArrayList&lt;String>): Boolean</ID>
    <ID>ReturnCount:MediaPickerAdapterDiffCallback.kt$MediaPickerAdapterDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ReturnCount:PageListViewModel.kt$PageListViewModel$private fun getFeaturedImageUrl(featuredImageId: Long): String?</ID>
    <ID>ReturnCount:PageParentFragment.kt$PageParentFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:ParseDiscoverCardsJsonUseCase.kt$ParseDiscoverCardsJsonUseCase$fun parseInterestCard(interestCardJson: JSONObject?): ReaderTagList</ID>
    <ID>ReturnCount:PhotoPickerAdapterDiffCallback.kt$PhotoPickerAdapterDiffCallback$override fun getChangePayload(oldItemPosition: Int, newItemPosition: Int): Any?</ID>
    <ID>ReturnCount:PostListAdapter.kt$&lt;no name provided>$override fun areContentsTheSame(oldItem: PostListItemType, newItem: PostListItemType): Boolean</ID>
    <ID>ReturnCount:PostListAdapter.kt$&lt;no name provided>$override fun areItemsTheSame(oldItem: PostListItemType, newItem: PostListItemType): Boolean</ID>
    <ID>ReturnCount:PostListFeaturedImageTracker.kt$PostListFeaturedImageTracker$fun getFeaturedImageUrl(site: SiteModel, featuredImageId: Long): String?</ID>
    <ID>ReturnCount:PostsListActivity.kt$PostsListActivity$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:PublishNotificationReceiverViewModel.kt$PublishNotificationReceiverViewModel$fun loadNotification(notificationId: Int): NotificationUiModel?</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$/* * returns True if the passed URL should be opened in the external browser app */ private fun shouldOpenExternal(url: String): Boolean</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$override fun onOptionsItemSelected(item: MenuItem): Boolean</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$private fun doLikePost()</ID>
    <ID>ReturnCount:ReaderPostDetailFragment.kt$ReaderPostDetailFragment$private fun showPhotoViewer( imageUrl: String, sourceView: View, startX: Int, startY: Int ): Boolean</ID>
    <ID>ReturnCount:ReaderSiteNotificationsUseCase.kt$ReaderSiteNotificationsUseCase$suspend fun toggleNotification( blogId: Long, feedId: Long ): SiteNotificationState</ID>
    <ID>ReturnCount:RemotePreviewLogicHelper.kt$RemotePreviewLogicHelper$fun runPostPreviewLogic( activity: Activity, site: SiteModel, post: PostImmutableModel, helperFunctions: RemotePreviewHelperFunctions ): PreviewLogicOperationResult</ID>
    <ID>ReturnCount:StoriesMediaPickerResultHandler.kt$StoriesMediaPickerResultHandler$@Deprecated("Use rather the other handle method and the live data navigation.") fun handleMediaPickerResultForStories( data: Intent, activity: Activity?, selectedSite: SiteModel?, source: PagePostCreationSourcesDetail ): Boolean</ID>
    <ID>ReturnCount:StoriesMediaPickerResultHandler.kt$StoriesMediaPickerResultHandler$private fun buildNavigationAction( data: Intent, selectedSite: SiteModel, source: PagePostCreationSourcesDetail ): SiteNavigationAction?</ID>
    <ID>ReturnCount:StoriesPrefs.kt$StoriesPrefs$private fun checkSlideOriginalBackgroundMediaExists(storyFrameItem: StoryFrameItem?): Boolean</ID>
    <ID>ReturnCount:UploadActionUseCase.kt$UploadActionUseCase$fun getAutoUploadAction(post: PostImmutableModel, site: SiteModel): UploadAction</ID>
    <ID>ReturnCount:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$private fun endsWithDelimiter(string: String): Boolean</ID>
    <ID>ReturnCount:WPEditTextWithChipsOutlined.kt$WPEditTextWithChipsOutlined$private fun removeDelimiterFromItemIfPresent(item: String?): String?</ID>
    <ID>SpreadOperator:PageListEventListener.kt$PageListEventListener$(*event.mediaList.map { LocalId(it.localPostId) }.toTypedArray())</ID>
    <ID>SpreadOperator:PageListEventListener.kt$PageListEventListener$(*postsToRefresh.map { LocalId(it.id) }.toTypedArray())</ID>
    <ID>SpreadOperator:PageListViewModel.kt$PageListViewModel$(*event.mediaList.map { it.mediaId }.toLongArray())</ID>
    <ID>SpreadOperator:PostListEventListener.kt$PostListEventListener$(*event.mediaList.map { it.localPostId }.toIntArray())</ID>
    <ID>SpreadOperator:PostListEventListener.kt$PostListEventListener$(*event.mediaList.map { it.mediaId }.toLongArray())</ID>
    <ID>SpreadOperator:PostListEventListener.kt$PostListEventListener$(*postsToRefresh.map { it.id }.toIntArray())</ID>
    <ID>SpreadOperator:UiHelpers.kt$UiHelpers$( uiString.stringRes, *uiString.params.map { value -> getTextOfUiString( context, value ) }.toTypedArray() )</ID>
    <ID>ThrowsCount:PageListDialogHelper.kt$PageListDialogHelper$fun onNegativeClickedForBasicDialog( instanceTag: String, editPage: (RemoteId, LoadAutoSaveRevision) -> Unit, copyPage: (RemoteId) -> Unit )</ID>
    <ID>ThrowsCount:PageListDialogHelper.kt$PageListDialogHelper$fun onPositiveClickedForBasicDialog( instanceTag: String, deletePage: (RemoteId) -> Unit, editPage: (RemoteId, LoadAutoSaveRevision) -> Unit, editPageFirst: (RemoteId) -> Unit )</ID>
    <ID>TooGenericExceptionCaught:BaseStatsUseCase.kt$BaseStatsUseCase$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ColorUnderlineSpan.kt$ColorUnderlineSpan$e: Exception</ID>
    <ID>TooGenericExceptionCaught:GifMediaInsertUseCase.kt$GifMediaInsertUseCase$e: Exception</ID>
    <ID>TooGenericExceptionCaught:MediaPickerActivity.kt$MediaPickerActivity$e: RuntimeException</ID>
    <ID>TooGenericExceptionCaught:UploadStarter.kt$UploadStarter$e: Exception</ID>
    <ID>TooGenericExceptionThrown:ActionableEmptyView.kt$ActionableEmptyView$throw RuntimeException("$context: ActionableEmptyView must have a title (aevTitle)")</ID>
    <ID>TooGenericExceptionThrown:ActivityLogDetailFragment.kt$ActivityLogDetailFragment$throw Throwable("Couldn't initialize Activity Log view model")</ID>
    <ID>TooGenericExceptionThrown:BackupDownloadFragment.kt$BackupDownloadFragment$throw Throwable("Couldn't initialize ${this.javaClass.simpleName} view model")</ID>
    <ID>TooGenericExceptionThrown:BaseListUseCase.kt$BaseListUseCase$throw RuntimeException("Duplicate stats type in a use case")</ID>
    <ID>TooGenericExceptionThrown:BasicFragmentDialog.kt$BasicFragmentDialog$throw RuntimeException("Hosting activity must implement BasicDialogNegativeClickInterface")</ID>
    <ID>TooGenericExceptionThrown:BasicFragmentDialog.kt$BasicFragmentDialog$throw RuntimeException("Hosting activity must implement BasicDialogPositiveClickInterface")</ID>
    <ID>TooGenericExceptionThrown:GifMediaInsertUseCase.kt$GifMediaInsertUseCase$throw Exception("Failed to download the image.")</ID>
    <ID>TooGenericExceptionThrown:PageListAdapter.kt$PageListAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PageParentAdapter.kt$PageParentAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PageParentSearchAdapter.kt$PageParentSearchAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PageSearchAdapter.kt$PageSearchAdapter$throw Throwable("Unexpected view type")</ID>
    <ID>TooGenericExceptionThrown:PostSettingsTagsFragment.kt$PostSettingsTagsFragment$throw RuntimeException("$context must implement TagsSelectedListener")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingBottomSheetFragment.kt$PrepublishingBottomSheetFragment$throw RuntimeException("$context must implement PrepublishingBottomSheetListener")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingCategoriesFragment.kt$PrepublishingCategoriesFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingHomeFragment.kt$PrepublishingHomeFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:PrepublishingTagsFragment.kt$PrepublishingTagsFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:PublishSettingsFragment.kt$PublishSettingsFragment$throw RuntimeException("$activity must implement EditPostActivityHook")</ID>
    <ID>TooGenericExceptionThrown:ReaderTracker.kt$ReaderTab.Companion$throw RuntimeException("Unexpected ReaderTab id")</ID>
    <ID>TooGenericExceptionThrown:RestoreFragment.kt$RestoreFragment$throw Throwable("Couldn't initialize ${this.javaClass.simpleName} view model")</ID>
    <ID>TooGenericExceptionThrown:RestoreViewModel.kt$RestoreViewModel$throw Throwable("Unexpected restoreRequestResult ${this.javaClass.simpleName}")</ID>
    <ID>TooGenericExceptionThrown:ThreatDetailsFragment.kt$ThreatDetailsFragment$throw RuntimeException("ThreatDetailsFragment - missing siteModel extras.")</ID>
    <ID>TopLevelPropertyNaming:ActivityLogTypeFilterAdapter.kt$private const val activityViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:ActivityLogTypeFilterAdapter.kt$private const val headerViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:HomePagePickerViewModel.kt$const val defaultTemplateSlug = "default"</ID>
    <ID>TopLevelPropertyNaming:PrepublishingHomeAdapter.kt$private const val headerViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:PrepublishingHomeAdapter.kt$private const val homeItemViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:PrepublishingHomeAdapter.kt$private const val submitButtonViewType: Int = 3</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val interestViewType: Int = 3</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val postViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val recommendedBlogsViewType: Int = 4</ID>
    <ID>TopLevelPropertyNaming:ReaderDiscoverAdapter.kt$private const val welcomeBannerViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:SiteCreationDomainsAdapter.kt$private const val suggestionErrorViewType: Int = 2</ID>
    <ID>TopLevelPropertyNaming:SiteCreationDomainsAdapter.kt$private const val suggestionItemViewType: Int = 1</ID>
    <ID>TopLevelPropertyNaming:SupportedBlocks.kt$private const val defaultAssetFilename = "supported-blocks.json"</ID>
    <ID>TopLevelPropertyNaming:ZendeskHelper.kt$private const val enablePushNotificationsDelayAfterIdentityChange: Long = 2500</ID>
    <ID>TopLevelPropertyNaming:ZendeskHelper.kt$private const val zendeskNeedsToBeEnabledError = "Zendesk needs to be setup before this method can be called"</ID>
    <ID>UtilityClassWithPublicConstructor:AppThemeUtils.kt$AppThemeUtils</ID>
    <ID>UtilityClassWithPublicConstructor:DomainPhoneNumberUtils.kt$DomainPhoneNumberUtils</ID>
    <ID>UtilityClassWithPublicConstructor:ImageEditorInitializer.kt$ImageEditorInitializer</ID>
    <ID>UtilityClassWithPublicConstructor:WPSnackbar.kt$WPSnackbar</ID>
  </CurrentIssues>
</SmellBaseline>
