ext {
    wordPressUtilsVersion = 'trunk-39557b2153d1b0c0e7e3fd3a4fa32e6099bf50a2'
    wordPressLoginVersion = 'trunk-d4f9830a9e2d2cbf7e1edec2886af687363b0980'
    gutenbergMobileVersion = '4691-1d7cb09537bb4da2b0b05f35d8e18695c527067c'
    storiesVersion = 'trunk-0b727f84440048e39d5e4835e2a84c67d043d225'
    aboutAutomatticVersion = 'trunk-99c45a25f4493f1ff19f1b88f718438dc7b3297a'

    minSdkVersion = 24
    compileSdkVersion = 31
    targetSdkVersion = 30

    coroutinesVersion = '1.5.2'
    androidxWorkVersion = "2.7.0"

    daggerVersion = '2.41'
    fluxCVersion = 'trunk-7035f6772f4e0cb4980da0556a5762ea7904eb24'

    appCompatVersion = '1.0.2'
    coreVersion = '1.3.2'
    lifecycleVersion = '2.2.0'
    constraintLayoutVersion = '1.1.3'
    materialVersion = '1.2.1'
    preferenceVersion = '1.1.0'
    swipeToRefresh = '1.1.0'
    uCropVersion = '2.2.4'
    lifecycleVersion = '2.2.0'
    tracksVersion = '2.2.0'
    roomVersion = '2.3.0'

    coreLibraryDesugaringVersion = '1.1.5'

    exoPlayerVersion = '2.9.3'

    // testing
    jUnitVersion = '4.13'
    androidxTestVersion = '1.1.0'
    androidxArchCoreVersion = '2.0.0'
    assertJVersion = '3.11.1'
    espressoVersion = '3.1.0'
    mockitoCoreVersion = "3.3.3"
    nhaarmanMockitoVersion = "2.2.0"
}

buildscript {
    ext.kotlinVersion = '1.5.32'
    ext.navComponentVersion = '2.3.5'
    ext.detektVersion = '1.15.0'

    repositories {
        maven {
            url 'https://a8c-libs.s3.amazonaws.com/android'
            content {
                includeGroup "com.automattic.android"
            }
        }
        maven { url "https://plugins.gradle.org/m2/" }
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.1'
        classpath 'com.automattic.android:fetchstyle:1.1'
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navComponentVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
    }
}

apply plugin: 'com.automattic.android.fetchstyle'

allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        google()
        mavenCentral()
        maven { url "https://jitpack.io" }
        maven {
            url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
            content {
                includeVersion "com.android.volley", "volley", "1.1.1"
                includeVersion "com.automattic", "rest", "1.0.8"
                includeVersion "com.google.android.exoplayer", "exoplayer-core", "2.9.3"
                includeVersion "com.google.android.exoplayer", "exoplayer-dash", "2.9.3"
                includeVersion "com.google.android.exoplayer", "exoplayer-hls", "2.9.3"
                includeVersion "com.google.android.exoplayer", "exoplayer-smoothstreaming", "2.9.3"
                includeVersion "com.google.android.exoplayer", "exoplayer-ui", "2.9.3"
                includeVersion "com.google.android.exoplayer", "exoplayer", "2.9.3"
                includeVersion "com.google.android.exoplayer", "extension-okhttp", "2.9.3"
                includeVersion "com.google.android", "flexbox", "2.0.1"
                includeVersion "org.wordpress", "emailchecker2", "1.1.0"
                includeVersion "org.wordpress", "persistentedittext", "1.0.2"
                includeVersion "org.wordpress", "wellsql-core", "1.6.0"
                includeVersion "org.wordpress", "wellsql", "1.6.0"
                // Required for detekt
                includeVersion "org.jetbrains.kotlinx", "kotlinx-html-jvm", "0.7.2"
                // Required for lintWordpressVanillaRelease
                includeVersion "com.jraska", "falcon", "2.1.1"
                // Required for ktlint
                includeVersion "com.andreapivetta.kolor", "kolor", "0.0.2"
            }
        }

        flatDir {
            dirs '../aars'
        }
    }

    tasks.register("checkstyle", Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = '8.3'
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }

    detekt {
        config = files("${project.rootDir}/config/detekt/detekt.yml")
        autoCorrect = false
        buildUponDefaultConfig = false
        disableDefaultRuleSets = false
        ignoreFailures = false
        parallel = false
        debug = false
        reports {
            html.enabled = true
            xml.enabled = true
            txt.enabled = true
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

subprojects {

    configurations {
        ktlint
    }

    dependencies {
        ktlint 'com.github.shyiko:ktlint:0.29.0'
    }

    tasks.register("ktlint", JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt"
    }

    tasks.register("ktlintFormat", JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "-F", "src/**/*.kt"
    }

    tasks.register("ciktlint", JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    }
}

buildScan {
    // Always run Gradle scan on CI builds
    if (System.getenv('CI')) {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
        tag 'CI'
        publishAlways()
        // Otherwise CI might shut down before it's uploaded
        uploadInBackground = false
    }
}

// Onboarding and dev env setup tasks
tasks.register("checkBundler", Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("checkBundle", Exec) {
    dependsOn tasks.named("checkBundler")
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("applyCredentials", Exec) {
    dependsOn tasks.named("checkBundle")
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}
