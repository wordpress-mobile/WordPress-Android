import com.automattic.android.measure.reporters.InternalA8cCiReporter
import com.automattic.android.measure.reporters.SlowSlowTasksMetricsReporter
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.detekt)
    alias(libs.plugins.automattic.measure.builds)
    alias(libs.plugins.kotlinx.kover)
    alias(libs.plugins.dependency.analysis)
    alias(libs.plugins.violation.comments).apply(false)
    alias(libs.plugins.androidx.navigation.safeargs).apply(false)
    alias(libs.plugins.android.application).apply(false)
    alias(libs.plugins.android.library).apply(false)
    alias(libs.plugins.google.services).apply(false)
    alias(libs.plugins.kotlin.allopen).apply(false)
    alias(libs.plugins.kotlin.android).apply(false)
    alias(libs.plugins.kotlin.jvm).apply(false)
    alias(libs.plugins.kotlin.parcelize).apply(false)
    alias(libs.plugins.kotlin.serialization).apply(false)
    alias(libs.plugins.ksp).apply(false)
    alias(libs.plugins.kapt).apply(false)
}

ext {
    minSdkVersion = 26
    compileSdkVersion = 34
    targetSdkVersion = 34
}

measureBuilds {
    enable = findProperty('measureBuildsEnabled')?.toBoolean() ?: false
    onBuildMetricsReadyListener { report ->
        SlowSlowTasksMetricsReporter.report(report)
        InternalA8cCiReporter.reportBlocking(
                report,
                "wordpress",
                findProperty('appsMetricsToken')
        )
    }
    attachGradleScanId = System.getenv('CI')?.toBoolean() ?: false
}

allprojects {
    apply plugin: libs.plugins.checkstyle.get().pluginId
    apply plugin: libs.plugins.detekt.get().pluginId

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
            content {
                includeVersion "com.android.volley", "volley", "1.1.1"
                includeVersion "com.automattic", "rest", "1.0.8"
                includeVersion "com.google.android", "flexbox", "2.0.1"
                includeVersion "org.wordpress", "persistentedittext", "1.0.2"
                includeVersion "org.wordpress", "wellsql-core", "1.6.0"
                includeVersion "org.wordpress", "wellsql", "1.6.0"
                // Required for detekt
                includeVersion "org.jetbrains.kotlinx", "kotlinx-html-jvm", "0.7.2"
                // Required for lintWordpressVanillaRelease
                includeVersion "com.jraska", "falcon", "2.1.1"
            }
        }
        maven {
            url "https://a8c-libs.s3.amazonaws.com/android"
            content {
                includeGroup "org.wordpress"
                includeGroup "org.wordpress.wellsql"
            }
        }
    }

    tasks.register("checkstyle", Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = libs.plugins.checkstyle.get().version
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }

    detekt {
        toolVersion = libs.plugins.detekt.get().version
        baseline = file("${project.rootDir}/config/detekt/baseline.xml")
        config = files("${project.rootDir}/config/detekt/detekt.yml")
        autoCorrect = false
        buildUponDefaultConfig = true
        disableDefaultRuleSets = false
        ignoreFailures = false
        parallel = true
        debug = false
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
            allWarningsAsErrors = true
            freeCompilerArgs += [
                    "-opt-in=kotlin.RequiresOptIn",
                    "-Xjvm-default=all"
            ]
        }
    }
}

// Onboarding and dev env setup tasks
tasks.register("checkBundler", Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("checkBundle", Exec) {
    dependsOn tasks.named("checkBundler")
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("applyCredentials", Exec) {
    dependsOn tasks.named("checkBundle")
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}

dependencies {
    detektPlugins(libs.detekt.formatting)
}

apply from: './config/gradle/code_coverage.gradle'
