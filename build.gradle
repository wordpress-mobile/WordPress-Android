plugins {
    id "com.automattic.android.fetchstyle"
    id "io.gitlab.arturbosch.detekt"
    id "androidx.navigation.safeargs.kotlin" apply false
    id "com.android.library" apply false
    id 'com.google.gms.google-services' apply false
    id "org.jetbrains.kotlin.plugin.parcelize" apply false
}

ext {
    wordPressUtilsVersion = '2.5.0'
    wordPressLoginVersion = '0.14.0'
    gutenbergMobileVersion = '4961-db8bfd958151567f30f451f1cfc9482885dbeaaf'
    storiesVersion = '1.3.0'
    aboutAutomatticVersion = '0.0.5'

    minSdkVersion = 24
    compileSdkVersion = 31
    targetSdkVersion = 30

    coroutinesVersion = '1.5.2'
    androidxWorkVersion = "2.7.0"

    fluxCVersion = '1.45.0'

    appCompatVersion = '1.0.2'
    androidxCoreVersion = '1.3.2'
    androidxArchCoreVersion = '2.0.0'
    fragmentVersion = '1.2.4'
    constraintLayoutVersion = '1.1.3'
    materialVersion = '1.2.1'
    preferenceVersion = '1.1.0'
    swipeToRefresh = '1.1.0'
    uCropVersion = '2.2.4'
    lifecycleVersion = '2.4.1'
    tracksVersion = '2.2.0'
    roomVersion = '2.3.0'

    coreLibraryDesugaringVersion = '1.1.5'

    exoPlayerVersion = '2.13.3'

    // testing
    jUnitVersion = '4.13'
    jUnitExtVersion = '1.1.3'
    androidxTestCoreVersion = '1.4.0'
    assertJVersion = '3.11.1'
    espressoVersion = '3.4.0'
    mockitoCoreVersion = "3.3.3"
    nhaarmanMockitoVersion = "2.2.0"
}

allprojects {
    apply plugin: 'checkstyle'

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
            content {
                includeVersion "com.android.volley", "volley", "1.1.1"
                includeVersion "com.automattic", "rest", "1.0.8"
                includeVersion "com.google.android", "flexbox", "2.0.1"
                includeVersion "org.wordpress", "emailchecker2", "1.1.0"
                includeVersion "org.wordpress", "persistentedittext", "1.0.2"
                includeVersion "org.wordpress", "wellsql-core", "1.6.0"
                includeVersion "org.wordpress", "wellsql", "1.6.0"
                // Required for detekt
                includeVersion "org.jetbrains.kotlinx", "kotlinx-html-jvm", "0.7.2"
                // Required for lintWordpressVanillaRelease
                includeVersion "com.jraska", "falcon", "2.1.1"
                // Required for ktlint
                includeVersion "com.andreapivetta.kolor", "kolor", "0.0.2"
            }
        }
        flatDir {
            dirs '../aars'
        }
    }

    tasks.register("checkstyle", Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = '8.3'
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }

    detekt {
        toolVersion = gradle.ext.detektVersion
        config = files("${project.rootDir}/config/detekt/detekt.yml")
        autoCorrect = false
        buildUponDefaultConfig = false
        disableDefaultRuleSets = false
        ignoreFailures = false
        parallel = false
        debug = false
        reports {
            html.enabled = true
            xml.enabled = true
            txt.enabled = true
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

subprojects {

    configurations {
        ktlint
    }

    dependencies {
        ktlint 'com.github.shyiko:ktlint:0.29.0'
    }

    tasks.register("ktlint", JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt"
    }

    tasks.register("ktlintFormat", JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "-F", "src/**/*.kt"
    }

    tasks.register("ciktlint", JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    }
}

// Onboarding and dev env setup tasks
tasks.register("checkBundler", Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("checkBundle", Exec) {
    dependsOn tasks.named("checkBundler")
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("applyCredentials", Exec) {
    dependsOn tasks.named("checkBundle")
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}
