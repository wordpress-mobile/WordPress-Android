buildscript {
    ext.kotlin_version = '1.3.61'
    ext.kotlin_coroutines_version = '1.3.3'
    ext.androidx_work_version = "2.0.1"
    ext.navComponenVersion = '2.0.0'

    repositories {
        google()
        jcenter()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.1'
        classpath 'com.automattic.android:fetchstyle:1.1'
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navComponenVersion"
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.0.2'
}

apply plugin: 'com.automattic.android.fetchstyle'

project.ext.buildGutenbergFromSource = project.properties.getOrDefault('wp.BUILD_GUTENBERG_FROM_SOURCE', false).toBoolean()

allprojects {
    apply plugin: 'checkstyle'

    repositories {
        google()
        jcenter()
        maven { url "https://dl.bintray.com/wordpress-mobile/maven" }
        maven { url "https://jitpack.io" }

        if (rootProject.ext.buildGutenbergFromSource) {
            // nested RN libraries need the RN maven repo defined from outside so, do it here when building from source

            maven {
                // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
                url "$rootDir/libs/gutenberg-mobile/node_modules/react-native/android"
            }
        } else {
            maven { url "https://dl.bintray.com/wordpress-mobile/react-native-mirror/" }
        }
    }

    task checkstyle(type: Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = '8.3'
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }
}

subprojects {

    configurations {
        ktlint
    }

    dependencies {
        ktlint 'com.github.shyiko:ktlint:0.29.0'
    }

    task ktlint(type: JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt"
    }

    task ktlintFormat(type: JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "-F", "src/**/*.kt"
    }

    task ciktlint(type: JavaExec) {
        main = "com.github.shyiko.ktlint.Main"
        classpath = configurations.ktlint
        args "src/**/*.kt", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    }
}

buildScan {
    // Always run Gradle scan on CI builds
    if (System.getenv('CI')) {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
        tag 'CI'
        publishAlways()
    }
}

ext {
    compileSdkVersion = 28
    buildToolVersion = '28.0.3'

    minSdkVersion = 21
    targetSdkVersion = 28

    daggerVersion = '2.22.1'
    fluxCVersion = '1.6.9-beta-1'

    appCompatVersion = '1.0.2'
    constraintLayoutVersion = '1.1.3'
    uCropVersion = '2.2.4'
    lifecycleExtensionsVersion = '2.0.0'

    // testing
    jUnitVersion = '4.12'
    androidxTestVersion = '1.1.0'
    androidxArchCoreVersion = '2.0.0'
    assertJVersion = '3.11.1'
    espressoVersion = '3.1.0'
}

// Onboarding and dev env setup tasks
task checkBundler(type:Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task checkBundle(type:Exec, dependsOn:checkBundler) {
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

task applyCredentials(type:Exec, dependsOn:checkBundle) {
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("prodDeps") {
    group = 'Onboarding'
    description = 'Install dependencies for production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}
