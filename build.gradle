import com.automattic.android.measure.MeasureBuildsExtension
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id "io.gitlab.arturbosch.detekt"
    id 'com.automattic.android.measure-builds'
    id "org.jetbrains.kotlinx.kover"
    id "androidx.navigation.safeargs.kotlin" apply false
    id "com.android.library" apply false
    id 'com.google.gms.google-services' apply false
    id "org.jetbrains.kotlin.plugin.parcelize" apply false
    id "com.google.devtools.ksp" apply false
}

ext {
    minSdkVersion = 24
    compileSdkVersion = 34
    targetSdkVersion = 33
}

ext {
    // libs
    automatticAboutVersion = '1.4.0'
    automatticRestVersion = '1.0.8'
    automatticTracksVersion = '5.1.0'
    gutenbergMobileVersion = 'v1.120.0'
    wordPressAztecVersion = 'v2.1.3'
    wordPressFluxCVersion = 'trunk-b5d95fda4257bd1b3c94b33088f5e2a3f48ff1c2'
    wordPressLoginVersion = '1.15.0'
    wordPressPersistentEditTextVersion = '1.0.2'
    wordPressUtilsVersion = '3.14.0'
    indexosMediaForMobileVersion = '43a9026f0973a2f0a74fa813132f6a16f7499c3a'
    gravatarVersion = '1.0.0'

    // debug
    flipperVersion = '0.245.0'
    soLoaderVersion = '0.10.5'

    // main
    androidInstallReferrerVersion = '2.2'
    androidVolleyVersion = '1.2.1'
    androidxAnnotationVersion = '1.6.0'
    androidxAppcompatVersion = '1.6.1'
    androidxArchCoreVersion = '2.2.0'
    androidxCameraVersion = '1.2.3'
    androidxComposeBomVersion = '2023.10.00'
    androidxComposeCompilerVersion = '1.5.9'
    androidxComposeNavigationVersion = '2.7.6'
    androidxCardviewVersion = '1.0.0'
    androidxConstraintlayoutVersion = '2.1.4'
    androidxConstraintlayoutComposeVersion = '1.0.1'
    androidxCoreVersion = '1.10.0'
    androidxActivityVersion = '1.8.0'
    androidxFragmentVersion = '1.6.2'
    androidxGridlayoutVersion = '1.0.0'
    androidxLifecycleVersion = '2.6.2'
    androidxPercentlayoutVersion = '1.0.0'
    androidxPreferenceVersion = '1.2.0'
    androidxRecyclerviewVersion = '1.3.0'
    androidxSwipeToRefreshVersion = '1.1.0'
    androidxViewpager2Version = '1.0.0'
    androidxWorkManagerVersion = "2.9.0"
    androidxWebkitVersion =  '1.10.0'
    androidxComposeMaterial3Version = '1.1.1'
    apacheCommonsTextVersion = '1.10.0'
    coilComposeVersion = '2.4.0'
    chrisbanesPhotoviewVersion = '2.3.0'
    eventBusVersion = '3.3.1'
    facebookShimmerVersion = '0.5.0'
    firebaseBomVersion = '32.1.0'
    firebaseIidVersion = '21.1.0'
    glideVersion = '4.16.0'
    googleAutoServiceVersion = '1.0.1'
    googleExoPlayerVersion = '2.13.3'
    googleFlexboxlayoutVersion = '3.0.0'
    googleGsonVersion = '2.10.1'
    googleMaterialVersion = '1.9.0'

    googleMLKitBarcodeScanningVersion = '17.2.0'
    googleMLKitBarcodeScanningCommonVersion = '17.0.0'
    googleMLKitTextRecognitionVersion = '16.0.0'
    googlePlayReviewVersion = '2.0.1'
    googlePlayServicesAuthVersion = '20.4.1'
    googlePlayServicesCodeScannerVersion = '16.0.0-beta3'
    jsoupVersion = '1.16.2'
    kotlinxCoroutinesVersion = '1.7.3'
    lottieVersion = '6.1.0'
    philjayMpAndroidChartVersion = 'v3.1.0'
    squareupKotlinPoetVersion = '1.16.0'
    squareupRetrofitVersion = '2.9.0'
    uCropVersion = '2.2.9'
    zendeskVersion = '5.1.2'
    googlePlayInAppUpdateVersion = '2.1.0'

    // react native
    facebookReactVersion = '0.73.3'

    // test
    assertjVersion = '3.23.1'
    junitVersion = '4.13.2'
    mockitoAndroidVersion = '4.5.1'
    mockitoKotlinVersion = '4.1.0'

    // android test
    androidxTestCoreVersion = '1.5.0'
    androidxTestEspressoVersion = '3.4.0'
    androidxTestExtJunitVersion = '1.1.5'
    androidxTestUiAutomatorVersion = '2.2.0'
    screengrabVersion = '2.1.1'
    squareupMockWebServerVersion = '4.12.0'
    wiremockVersion = '2.26.3'
    wiremockHttpClientVersion = '4.3.5.1'

    // other
    androidDesugarVersion = '2.0.4'
    wordPressLintVersion = '2.1.0'
}

measureBuilds {
    enable = findProperty('measureBuildsEnabled')?.toBoolean() ?: false
    automatticProject = MeasureBuildsExtension.AutomatticProject.WordPress
    authToken = findProperty('appsMetricsToken')
    attachGradleScanId = System.getenv('CI')?.toBoolean() ?: false
}

allprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'io.gitlab.arturbosch.detekt'

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://a8c-libs.s3.amazonaws.com/android/jcenter-mirror"
            content {
                includeVersion "com.android.volley", "volley", "1.1.1"
                includeVersion "com.automattic", "rest", "1.0.8"
                includeVersion "com.google.android", "flexbox", "2.0.1"
                includeVersion "org.wordpress", "persistentedittext", "1.0.2"
                includeVersion "org.wordpress", "wellsql-core", "1.6.0"
                includeVersion "org.wordpress", "wellsql", "1.6.0"
                // Required for detekt
                includeVersion "org.jetbrains.kotlinx", "kotlinx-html-jvm", "0.7.2"
                // Required for lintWordpressVanillaRelease
                includeVersion "com.jraska", "falcon", "2.1.1"
            }
        }
        flatDir {
            dirs '../aars'
        }
    }

    tasks.register("checkstyle", Checkstyle) {
        source 'src'

        classpath = files()
    }

    checkstyle {
        toolVersion = '8.3'
        configFile file("${project.rootDir}/config/checkstyle.xml")
    }

    detekt {
        toolVersion = gradle.ext.detektVersion
        baseline = file("${project.rootDir}/config/detekt/baseline.xml")
        config = files("${project.rootDir}/config/detekt/detekt.yml")
        autoCorrect = false
        buildUponDefaultConfig = true
        disableDefaultRuleSets = false
        ignoreFailures = false
        parallel = true
        debug = false
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
            allWarningsAsErrors = true
            freeCompilerArgs += [
                    "-opt-in=kotlin.RequiresOptIn",
                    "-Xjvm-default=all"
            ]
        }
    }
}

// Onboarding and dev env setup tasks
tasks.register("checkBundler", Exec) {
    doFirst {
        println "Check Bundler"
    }

    workingDir = './'
    executable "sh"
    args "-c", "if ! type 'bundle' > /dev/null; then gem install bundler; fi"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundler.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("checkBundle", Exec) {
    dependsOn tasks.named("checkBundler")
    doFirst {
        println "Check Bundle"
    }

    workingDir = './'
    executable "sh"
    args "-c", "bundle check --path=\${BUNDLE_PATH:-vendor/bundle} > /dev/null || bundle install --jobs=3 --retry=3 --path=\${BUNDLE_PATH:-vendor/bundle}"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("applyCredentials", Exec) {
    dependsOn tasks.named("checkBundle")
    doFirst {
        println "Apply credentials for this branch"
    }

    workingDir = './'
    executable "sh"
    args "-c", "FASTLANE_SKIP_UPDATE_CHECK=1 FASTLANE_ENV_PRINTER=1 bundle exec fastlane run configure_apply force:true"

    //store the output instead of printing to the console:
    standardOutput = new ByteArrayOutputStream()

    //extension method checkBundle.output() can be used to obtain the output:
    ext.output = {
        return standardOutput.toString()
    }
}

tasks.register("configureApply") {
    group = 'Onboarding'
    description = 'Install dependencies for debug and production builds'
    dependsOn applyCredentials
    doLast {
        println("Done")
    }
}

dependencies {
    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$gradle.ext.detektVersion"
}

apply from: './config/gradle/code_coverage.gradle'
apply from: './config/gradle/gradle_build_scan.gradle'
