buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'org.robolectric:robolectric-gradle-plugin:1.1.0'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'org.robolectric'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

android {
    publishNonDefault true

    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        versionCode 1
        versionName "0.1"
        minSdkVersion 14
        targetSdkVersion 22
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // Avoid 'duplicate files during packaging of APK' errors
    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'org.wordpress:analytics:1.0.0'
    compile 'org.wordpress:utils:1.6.0'

    // Test libraries
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.robolectric:robolectric:2.4'

    // Workaround for IDE bug
    // http://stackoverflow.com/questions/22246183/android-studio-doesnt-recognize-espresso-classes
    provided 'junit:junit:4.11'
    provided 'org.mockito:mockito-core:1.10.19'
    provided 'org.robolectric:robolectric:2.4'
}

signing {
    required {
        project.properties.containsKey("signing.keyId") && project.properties.containsKey("signing.secretKeyRingFile")
    }
    sign configurations.archives
}

version android.defaultConfig.versionName
group = "org.wordpress"
archivesBaseName = "editor"

// http://central.sonatype.org/pages/gradle.html

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: project.properties.ossrhUsername, password: project.properties.ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: project.properties.ossrhUsername, password: project.properties.ossrhPassword)
            }

            pom.project {
                name 'WordPress-Android-Editor'
                packaging 'aar'
                description 'A reusable Android rich text editor component'
                url 'https://github.com/wordpress-mobile/WordPress-Android-Editor'
                scm {
                    connection 'scm:git:https://github.com/wordpress-mobile/WordPress-Android-Editor.git'
                    developerConnection 'scm:git:https://github.com/wordpress-mobile/WordPress-Android-Editor.git'
                    url 'https://github.com/wordpress-mobile/WordPress-Android-Editor'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'maxme'
                        name 'Maxime Biais'
                        email 'maxime@automattic.com'
                    }
                }
            }
        }
    }
}

//
// Testing and code coverage
//

android.testOptions.unitTests.all {
    include '**/*Test.class'
    exclude '**/ApplicationTest.class'
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

// Use these to define which classes to include and exclude from code coverage analysis
def coverageSourceDirs = [ 'src/main/java' ]
def coverageExclusions = [ '**/R.class',
                           '**/R$*.class',
                           '**/*$ViewInjector*.*',
                           '**/BuildConfig.*',
                           '**/Manifest*.*',
                           '**/Legacy**.class',
                           '**/legacy/**/*.class' ]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: coverageExclusions
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
