import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.android.library)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.parcelize)
    alias(libs.plugins.kapt)
    alias(libs.plugins.kotlinx.kover)
}

android {
    useLibrary 'org.apache.http.legacy'

    namespace "org.wordpress.android.fluxc"

    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
        consumerProguardFiles 'consumer-rules.pro'
    }

    lint {
        enable += 'UnknownNullness'
        disable 'UseTomlInstead', 'IgnoreWithoutReason'
    }

    testOptions {
        unitTests.includeAndroidResources = true
    }

    buildFeatures {
        buildConfig true
    }
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        allWarningsAsErrors = false
    }
}

android.buildTypes.all { buildType ->
    // Load gradle properties and add them to BuildConfig
    Properties gradleProperties = new Properties()
    File propertiesFile = file("gradle.properties")
    if (propertiesFile.exists()) {
        gradleProperties.load(new FileInputStream(propertiesFile))
    } else {
        // Load defaults
        gradleProperties.load(new FileInputStream(file("gradle.properties-example")))
    }
    gradleProperties.any { property ->
        if (property.value.equals("true") || property.value.equals("false")) {
            buildType.buildConfigField "boolean", property.key.replace("fluxc.", "").replace(".", "_").toUpperCase(),
                    "Boolean.parseBoolean(\"${property.value}\")"
        } else {
            buildType.buildConfigField "String", property.key.replace("fluxc.", "").replace(".", "_").toUpperCase(),
                    "\"${property.value}\""
        }
    }
}

dependencies {
    implementation libs.androidx.exifinterface
    implementation libs.androidx.security.crypto

    implementation(libs.wordpress.utils) {
        // Using official volley package
        exclude group: "com.mcxiaoke.volley"
        exclude group: "com.android.support"
    }

    // Custom WellSql version
    api libs.wellsql
    kapt libs.wellsql.processor

    // FluxC annotations
    api project(":libs:fluxc-annotations")
    kapt project(":libs:fluxc-processor")

    // External libs
    api libs.greenrobot.eventbus.main
    api libs.greenrobot.eventbus.java
    api libs.squareup.okhttp3
    implementation libs.squareup.okhttp3.urlconnection
    api libs.android.volley
    implementation libs.google.gson

    implementation libs.apache.commons.text
    api libs.androidx.paging.runtime
    implementation libs.androidx.room.runtime
    kapt libs.androidx.room.compiler
    implementation libs.androidx.room.ktx

    // Dagger
    implementation libs.google.dagger
    kapt libs.google.dagger.compiler

    // Coroutines
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    // Encrypted Logging
    api "com.goterl:lazysodium-android:5.0.2@aar"
    api "net.java.dev.jna:jna:5.15.0@aar"

    // Unit tests
    testImplementation libs.junit
    testImplementation libs.kotlin.test.junit
    testImplementation libs.kotlinx.coroutines.test
    testImplementation libs.androidx.test.core
    testImplementation libs.robolectric
    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin
    testImplementation libs.assertj.core
    testImplementation libs.androidx.arch.core.testing

    lintChecks libs.wordpress.lint
}

dependencyAnalysis {
    issues {
        onUnusedDependencies {
            // This dependency is actually needed otherwise the app will crash with a runtime exception.
            exclude(libs.greenrobot.eventbus.main.get().module.toString())
        }
    }
}
