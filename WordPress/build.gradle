buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath 'com.google.gms:google-services:4.3.8'
        classpath 'se.bjurr.violations:violation-comments-to-github-gradle-plugin:1.67'
        classpath 'io.sentry:sentry-android-gradle-plugin:2.0.0'
    }
}

repositories {
    maven {
        url "https://a8c-libs.s3.amazonaws.com/android"
        content {
            includeGroup "org.wordpress"
            includeGroup "org.wordpress.fluxc"
            includeGroup "org.wordpress-mobile.gutenberg-mobile"
        }
    }
    maven {
        url "https://a8c-libs.s3.amazonaws.com/android/hermes-mirror"
        content {
            includeGroup "org.wordpress-mobile"
        }
    }
    // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
    def localRNUrl = "$rootDir/$gradle.ext.includedBuildGutenbergMobilePath/gutenberg/node_modules/react-native/android"
    def remoteRNUrl ="https://a8c-libs.s3.amazonaws.com/android/react-native-mirror"
    def reactNativeUrl = gradle.ext.includedBuildGutenbergMobilePath != null ? localRNUrl : remoteRNUrl
    maven {
        url reactNativeUrl
        content {
            includeGroup "com.facebook.react"
        }
    }
    maven {
        url 'https://zendesk.jfrog.io/zendesk/repo'
        content {
            includeGroup "com.zendesk"
            includeGroup "com.zendesk.belvedere2"
        }
    }
    google()
    jcenter()
    mavenCentral()
    maven { url "https://www.jitpack.io" }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'se.bjurr.violations.violation-comments-to-github-gradle-plugin'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-kapt'

detekt {
    baseline = file("${project.rootDir}/config/detekt/baseline.xml")
}

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'org.wordpress.android.testing.OpenClassAnnotation'
}

android {
    useLibrary 'android.test.runner'

    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    dexOptions {
        jumboMode = true
        dexInProcess = true
    }

    compileSdkVersion rootProject.compileSdkVersion

    defaultConfig {
        applicationId "org.wordpress.android"
        archivesBaseName = "$applicationId"

        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion

        multiDexEnabled true

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner 'org.wordpress.android.WordPressTestRunner'

        buildConfigField "boolean", "OFFER_GUTENBERG", "true"
        buildConfigField "long", "REMOTE_CONFIG_FETCH_INTERVAL", "10"
        buildConfigField "boolean", "FEATURE_ANNOUNCEMENT_AVAILABLE", "false"
        buildConfigField "boolean", "ENABLE_DEBUG_SETTINGS", "true"
        buildConfigField "boolean", "MY_SITE_IMPROVEMENTS", "false"
        buildConfigField "boolean", "SEEN_UNSEEN_WITH_COUNTER", "false"
        buildConfigField "boolean", "LIKES_ENHANCEMENTS", "false"
        buildConfigField "boolean", "IS_JETPACK_APP", "false"
        buildConfigField "String", "TRACKS_EVENT_PREFIX", '"wpandroid_"'
        buildConfigField "String", "PUSH_NOTIFICATIONS_APP_KEY", '"org.wordpress.android"'
        buildConfigField "boolean", "UNIFIED_COMMENTS_LIST", "false"
        buildConfigField "boolean", "MP4_COMPOSER_VIDEO_OPTIMIZATION", "false"
        buildConfigField "boolean", "BLOGGING_REMINDERS", "false"
        buildConfigField "boolean", "MANAGE_CATEGORIES", "false"
        buildConfigField "boolean", "GLOBAL_STYLE_SUPPORT", "true"
        buildConfigField "boolean", "ONBOARDING_IMPROVEMENTS", "false"
        buildConfigField "boolean", "QUICK_START_DYNAMIC_CARDS", "false"
        buildConfigField "boolean", "SITE_DOMAINS", "false"

        manifestPlaceholders = [magicLinkScheme:"wordpress"]
    }

    // Gutenberg's dependency - react-native-video is using
    // Java API 1.8
    compileOptions {
        // Enables Java 8+ API desugaring support
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "app", "buildType"

    productFlavors {
        wordpress {
            isDefault true
            dimension "app"

            applicationId "org.wordpress.android"
            buildConfigField "boolean", "IS_JETPACK_APP", "false"
            buildConfigField "String", "TRACKS_EVENT_PREFIX", '"wpandroid_"'
            buildConfigField "String", "PUSH_NOTIFICATIONS_APP_KEY", '"org.wordpress.android"'

            manifestPlaceholders = [magicLinkScheme:"wordpress"]
        }

        jetpack {
            dimension "app"

            applicationId "com.jetpack.android"
            buildConfigField "boolean", "IS_JETPACK_APP", "true"
            buildConfigField "String", "TRACKS_EVENT_PREFIX", '"jpandroid_"'
            buildConfigField "String", "PUSH_NOTIFICATIONS_APP_KEY", '"com.jetpack.android"'

            manifestPlaceholders = [magicLinkScheme:"jetpack"]
        }

        vanilla { // used for release and beta
            dimension "buildType"
            buildConfigField "boolean", "ME_ACTIVITY_AVAILABLE", "false"
            buildConfigField "long", "REMOTE_CONFIG_FETCH_INTERVAL", "3600"
            buildConfigField "boolean", "ENABLE_DEBUG_SETTINGS", "false"
        }

        zalpha { // alpha version - enable experimental features
            dimension "buildType"
            buildConfigField "boolean", "VIDEO_OPTIMIZATION_AVAILABLE", "true"
            buildConfigField "boolean", "ENABLE_DEBUG_SETTINGS", "false"
        }

        wasabi { // "hot" version, can be installed along release, alpha or beta versions
            applicationIdSuffix ".beta"
            dimension "buildType"
        }

        jalapeno { // Pre-Alpha version, used for PR builds, can be installed along release, alpha, beta, dev versions
            isDefault true
            applicationIdSuffix ".prealpha"
            dimension "buildType"
        }

        // Also dynamically add additional `buildConfigFields` to our app flavors from any `wp.`/`jp.`-prefixed property in `gradle.properties`
        def properties = loadPropertiesFromFile(checkGradlePropertiesFile())
        addBuildConfigFieldsFromPrefixedProperties(wordpress, properties, ['wp'])
        addBuildConfigFieldsFromPrefixedProperties(jetpack, properties, ['wp', 'jp']) // Inherit same properties used from WP first then overwrite with JP-specific ones
    }

    buildTypes {
        release {
            // Proguard is used to shrink our apk, and reduce the number of methods in our final apk,
            // but we don't obfuscate the bytecode.
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.cfg'
        }

        debug {
            minifyEnabled false
            buildConfigField "String", "APP_PN_KEY", "\"org.wordpress.android.debug.build\""
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    lintOptions{
        checkDependencies = true
        checkGeneratedSources = true
        lintConfig file("${project.rootDir}/config/lint.xml")
    }

    packagingOptions {
        // MPAndroidChart uses androidX - remove this line when we migrate everything to androidX
        exclude 'META-INF/proguard/androidx-annotations.pro'

        // Exclude React Native's JSC and Hermes debug binaries
        exclude '**/libjscexecutor.so'
        exclude '**/libhermes-inspector.so'
        exclude '**/libhermes-executor-debug.so'

        pickFirst 'META-INF/-no-jdk.kotlin_module'

    }

    bundle {
        language {
            // Don't split language resources for App Bundles.
            // This is required to switch language in app.
            enableSplit = false
        }
    }

    buildFeatures {
        viewBinding true
    }

    applicationVariants.all { variant ->
        def app = variant.productFlavors[0].name
        def buildType = variant.productFlavors[1].name
        def version = versionForVariant(app, buildType)
        variant.outputs.each { output ->
            output.versionNameOverride = version['versionName']
            output.versionCodeOverride = version['versionCode']?.toInteger()
        }
    }
}

/// Dynamically add `buildConfigFields` on a given variant/flavor from prefixed properties
/// (This is used to e.g. add every property prefixed `wp.` in `gradle.properties` as a BuildConfigField in the `wordpress` flavor)
///
/// `prefixes` is an array of prefixes to search for, without their `.` dot (e.g. `["wp", "jp"]`).
/// Properties found with prefixes first in that array will be overridden by the ones found with prefixes later in the array.
static def addBuildConfigFieldsFromPrefixedProperties(variant, properties, prefixes) {
    // Build a Map of prefixed properties found. Keys in this Map will be lowercased and `.` replaced by `_`
    def fields_map = [:]
    prefixes.each { prefix ->
        properties.each { property ->
            if (property.key.toLowerCase().startsWith("${prefix.toLowerCase()}.")) {
                def key = property.key.toLowerCase().replace("${prefix.toLowerCase()}.", "").replace(".", "_")
                fields_map[key] = property.value
            }
        }
    }

    // Then define the found properties as buildConfigFields
    // Also define found properties that started with `res.` (`res_*` keys once in the `fields_map`) as resValues
    fields_map.each {
        variant.buildConfigField "String", it.key.toUpperCase(), "\"${it.value}\""
    }
}

// Search for a variant-specific variation of the versionName and versionCode in `version.properties` file, based on the
// variant's app and buildType flavors.
//
// This will search the `version.properties` file for "$app.$buildType.versionName" first, and fallback to "$app.versionName" then just "versionName" (and same for versionCode)
// Note: If the property is overridden at project level (e.g. '-PversionName'), it will take priority over any value in `version.properties`.
//
// Returns a Hash with keys 'versionName' and 'versionCode', with the found values for the app and buildType provided.
def versionForVariant(app, buildType) {
    def versionProperties = new Properties()
    file("../version.properties").withInputStream { versionProperties.load(it) }

    def propertyForVariant = { property ->
        return project.findProperty(property)
                ?: versionProperties.getProperty("${app}.${buildType}.${property}")
                ?: versionProperties.getProperty("${app}.${property}")
                ?: versionProperties.getProperty(property)
    }

    def versionName = propertyForVariant('versionName')
    def versionCode = propertyForVariant('versionCode')
    return [versionName: versionName, versionCode: versionCode]
}

dependencies {
    implementation project(path: ':mp4compose')
    implementation project(path:':libs:stories-android:stories')
    testImplementation project(path:':photoeditor')
    implementation project(path:':libs:image-editor::ImageEditor')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    // Provided by maven central
    implementation 'com.google.code.gson:gson:2.6.2'
    implementation 'org.ccil.cowan.tagsoup:tagsoup:1.2.1'

    implementation "androidx.core:core:$coreVersion"
    implementation "androidx.core:core-ktx:$coreVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.fragment:fragment:1.2.4'

    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.exifinterface:exifinterface:1.0.0'
    implementation 'androidx.media:media:1.0.1'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation "com.google.android.material:material:$materialVersion"
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeToRefresh"
    implementation "androidx.preference:preference:$preferenceVersion"
    implementation "androidx.work:work-runtime:$androidxWorkVersion"
    implementation "androidx.work:work-runtime-ktx:$androidxWorkVersion"
    // GCMNetworkManager on api <= 22
    implementation "androidx.work:work-gcm:$androidxWorkVersion"

    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    // ProcessLifecycleOwner
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"

    testImplementation("androidx.arch.core:core-testing:$androidxArchCoreVersion", {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })

    implementation 'com.android.volley:volley:1.1.1'
    implementation 'com.google.firebase:firebase-messaging:21.1.0'
    implementation 'com.google.android.gms:play-services-auth:18.1.0'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation ('com.automattic:rest:1.0.8') {
        exclude group: 'com.mcxiaoke.volley'
    }
    implementation 'org.wordpress:graphview:3.4.0'
    implementation 'org.wordpress:persistentedittext:1.0.2'
    implementation 'org.wordpress:emailchecker2:1.1.0'
    implementation "com.github.Automattic:Automattic-Tracks-Android:$tracksVersion"
    implementation 'com.squareup.okio:okio:2.8.0'
    implementation 'org.apache.commons:commons-text:1.1'
    implementation 'com.airbnb.android:lottie:3.4.0'
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    implementation ("com.github.yalantis:ucrop:$uCropVersion") {
        exclude group: 'androidx.core', module: 'core'
        exclude group: 'androidx.constraintlayout', module: 'constraintlayout'
        exclude group: 'androidx.appcompat', module: 'appcompat'
    }

    implementation 'com.github.bumptech.glide:glide:4.10.0'
    kapt 'com.github.bumptech.glide:compiler:4.10.0'
    implementation 'com.github.bumptech.glide:volley-integration:4.6.1@aar'

    testImplementation "junit:junit:$jUnitVersion"

    testImplementation 'org.robolectric:robolectric:4.4'
    testImplementation 'org.robolectric:shadows-multidex:4.4'

    testImplementation "org.mockito:mockito-core:$mockitoCoreVersion"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$nhaarmanMockitoVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation 'androidx.test:core:1.2.0'

    androidTestImplementation 'org.mockito:mockito-android:3.3.3'
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$nhaarmanMockitoVersion"
    androidTestImplementation 'com.squareup.okhttp:mockwebserver:2.7.5'
    testImplementation('org.bouncycastle:bcprov-jdk15on') {
        version {
            strictly '1.64'
        }
    }

    androidTestImplementation 'com.squareup.okio:okio:2.8.0'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion") {
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation('com.github.tomakehurst:wiremock:2.26.3') {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'asm', module: 'asm'
        exclude group: 'org.json', module: 'json'
    }
    androidTestImplementation 'org.apache.httpcomponents:httpclient-android:4.3.5.1'

    androidTestImplementation project(path:':WordPressMocks')

    androidTestImplementation "androidx.test:runner:$androidxTestVersion"
    androidTestImplementation "androidx.test:rules:$androidxTestVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxTestVersion"
    androidTestImplementation 'tools.fastlane:screengrab:2.0.0',  {
        exclude group: 'com.android.support.test.uiautomator', module: 'uiautomator-v18'
    }
    androidTestImplementation (name:'cloudtestingscreenshotter_lib', ext:'aar') // Screenshots on Firebase Cloud Testing
    androidTestImplementation "androidx.work:work-testing:$androidxWorkVersion"

    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"

    // Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28'
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"

    implementation("$gradle.ext.fluxCBinaryPath") {
        version {
            strictly fluxCVersion
        }
        exclude group: "com.android.volley"
        exclude group: 'org.wordpress', module: 'utils'
    }

    implementation ('com.github.indexos.media-for-mobile:android:43a9026f0973a2f0a74fa813132f6a16f7499c3a')

    implementation "$gradle.ext.wputilsBinaryPath:$wordPressUtilsVersion"
    testImplementation "$gradle.ext.wputilsBinaryPath:$wordPressUtilsVersion"
    debugImplementation "$gradle.ext.wputilsBinaryPath:$wordPressUtilsVersion"
    implementation (project(path:':libs:networking:WordPressNetworking')) {
        exclude group: "com.android.volley"
        exclude group: 'org.wordpress', module: 'utils'
    }
    implementation (project(path:':libs:analytics:WordPressAnalytics')) {
        exclude group: 'org.wordpress', module: 'utils'
    }
    implementation (project(path:':libs:editor:WordPressEditor')) {
        exclude group: 'org.wordpress', module: 'utils'
    }

    implementation ("$gradle.ext.loginFlowBinaryPath:$wordPressLoginVersion") {
        exclude group: 'com.github.bumptech.glide'
        exclude group: 'org.wordpress', module: 'utils'
    }

    implementation (group: 'com.zendesk', name: 'support', version: '5.0.2') {
        exclude group: 'com.google.dagger'
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    implementation 'com.github.Tenor-Inc:tenor-android-core:0.5.1'

    lintChecks 'org.wordpress:lint:1.0.1'

    // Firebase
    implementation 'com.google.firebase:firebase-config:19.1.3'

    compileOnly project(path:':libs:WordPressAnnotations')
    kapt project(':libs:WordPressProcessors')

    // Debug
    debugImplementation 'com.facebook.stetho:stetho:1.5.1'
    debugImplementation 'com.facebook.stetho:stetho-okhttp3:1.5.1'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

    implementation "org.jsoup:jsoup:1.10.3"
    implementation 'androidx.emoji:emoji:1.0.0'

    // Necessary because of the failing android tests
    androidTestImplementation "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    androidTestImplementation "androidx.room:room-ktx:$roomVersion"

    // Enables accessibility checks in Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.3.0-alpha05'

    detektPlugins "io.gitlab.arturbosch.detekt:detekt-formatting:$detektVersion"

    // Enables Java 8+ API desugaring support
    coreLibraryDesugaring "com.android.tools:desugar_jdk_libs:$coreLibraryDesugaringVersion"
}

configurations.all {
    // Exclude packaged wordpress sub projects, force the use of the source project
    // (eg. use :libs:utils:WordPressUtils instead of 'org.wordpress:utils')
    exclude group: 'org.wordpress', module: 'analytics'
}


// If Google services file doesn't exist, copy example file
if (!file("google-services.json").exists()) {
    copy {
        from(".")
        into(".")
        include("google-services.json-example")
        rename('google-services.json-example', 'google-services.json')
    }
}

// Print warning message if example Google services file is used.
if ((file('google-services.json').text) == (file('google-services.json-example').text)) {
    println("WARNING: You're using the example google-services.json file. Google login will fail.")
}

tasks.register("violationCommentsToGitHub", se.bjurr.violations.comments.github.plugin.gradle.ViolationCommentsToGitHubTask) {
    repositoryOwner = "wordpress-mobile"
    repositoryName = "WordPress-Android"
    pullRequestId = System.properties['GITHUB_PULLREQUESTID']
    username = System.properties['GITHUB_USERNAME']
    password = System.properties['GITHUB_PASSWORD']
    oAuth2Token = System.properties['GITHUB_OAUTH2TOKEN']
    gitHubUrl = "https://api.github.com/"
    createCommentWithAllSingleFileComments = false
    createSingleFileComments = true
    commentOnlyChangedContent = true
    minSeverity = se.bjurr.violations.lib.model.SEVERITY.INFO //ERROR, INFO, WARN
    commentTemplate = """
**Reporter**: {{violation.reporter}}{{#violation.rule}}\n
**Rule**: {{violation.rule}}{{/violation.rule}}
**Severity**: {{violation.severity}}
**File**: {{violation.file}} L{{violation.startLine}}{{#violation.source}}
**Source**: {{violation.source}}{{/violation.source}}
{{violation.message}}
"""
    violations = [
            ["CHECKSTYLE", ".", ".*/build/.*/checkstyle/.*\\.xml\$", "CheckStyle"],
            ["CHECKSTYLE", ".", ".*/build/.*/detekt/.*\\.xml\$", "Detekt"]
    ]
}

tasks.register("updateVersionProperties") {
    doLast {
        ant.propertyfile(
                file: "../version.properties") {
            entry( key: "$key", value: "$value")
        }
    }
}

tasks.register("printVersionName") {
    doLast {
        def app = project.findProperty('productKey') ?: 'wordpress'
        def buildType = project.findProperty('buildType') ?: ''
        println versionForVariant(app, buildType)['versionName']
    }
}

tasks.register("printAllVersions") {
    doLast {
        android.applicationVariants.all { variant ->
            def apkData = variant.outputs*.apkData
            println "${variant.name}: ${apkData*.versionName} (${apkData*.versionCode})"
        }
    }
}

def checkGradlePropertiesFile() {
    def inputFile = file("${rootDir}/gradle.properties")
    if (!inputFile.exists()) {
        throw new StopActionException("Build configuration file gradle.properties doesn't exist, follow README instructions")
    }
    return inputFile
}

static def loadPropertiesFromFile(inputFile) {
    def properties = new Properties()
    inputFile.withInputStream { stream ->
        properties.load(stream)
    }
    return properties
}

// For app signing
if (["uploadStoreFile", "uploadStorePassword", "uploadKeyAlias", "uploadKeyPassword"].count { !project.hasProperty(it) } == 0) {
    android {
        signingConfigs {
            release {
                storeFile = rootProject.file(project.uploadStoreFile)
                storePassword = project.uploadStorePassword
                keyAlias = project.uploadKeyAlias
                keyPassword = project.uploadKeyPassword
            }
        }
    }
    android.buildTypes.release.signingConfig = android.signingConfigs.release
}

if (project.hasProperty("debugStoreFile")) {
    def sharedDebugStore = file(project.debugStoreFile.replaceFirst("^~", System.getProperty("user.home")))
    if (sharedDebugStore.exists()) {
        android {
            signingConfigs {
                debug {
                    storeFile sharedDebugStore
                }
            }
        }
    }
}

// Keep this at the bottom (https://stackoverflow.com/a/37565535)
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.sentry.android.gradle'
